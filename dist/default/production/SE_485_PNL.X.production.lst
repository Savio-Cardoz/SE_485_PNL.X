

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sat Aug 19 22:14:00 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.42
    38                           ; Generated 13/04/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F882 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  008F                     	;# 
   342  0090                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  009F                     	;# 
   360  0105                     	;# 
   361  0107                     	;# 
   362  0108                     	;# 
   363  0109                     	;# 
   364  010C                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0185                     	;# 
   370  0187                     	;# 
   371  0188                     	;# 
   372  0189                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  000E                     	;# 
   390  000F                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0013                     	;# 
   395  0014                     	;# 
   396  0015                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  001D                     	;# 
   407  001E                     	;# 
   408  001F                     	;# 
   409  0081                     	;# 
   410  0085                     	;# 
   411  0086                     	;# 
   412  0087                     	;# 
   413  0089                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  008F                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0093                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0094                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0098                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  009F                     	;# 
   436  0105                     	;# 
   437  0107                     	;# 
   438  0108                     	;# 
   439  0109                     	;# 
   440  010C                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  0185                     	;# 
   446  0187                     	;# 
   447  0188                     	;# 
   448  0189                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451                           
   452                           	psect	nvCOMMON
   453  007A                     __pnvCOMMON:	
   454  007A                     _UQEnd:	
   455  007A                     	ds	1
   456  007B                     _UQFront:	
   457  007B                     	ds	1
   458  000C                     _PIR1bits	set	12
   459  0007                     _PORTCbits	set	7
   460  001A                     _RCREG	set	26
   461  0019                     _TXREG	set	25
   462  000B                     _INTCONbits	set	11
   463  0018                     _RCSTAbits	set	24
   464  0006                     _PORTB	set	6
   465  005F                     _GIE	set	95
   466  0087                     _TRISCbits	set	135
   467  0081                     _OPTION_REGbits	set	129
   468  008C                     _PIE1bits	set	140
   469  0098                     _TXSTAbits	set	152
   470  0099                     _SPBRG	set	153
   471  0086                     _TRISB	set	134
   472  04C2                     _BRGH	set	1218
   473  0189                     _ANSELH	set	393
   474                           
   475                           	psect	strings
   476  03C5                     __pstrings:	
   477  03C5                     stringtab:	
   478  03C5                     __stringtab:	
   479                           
   480                           ;	String table - string pointers are 1 byte each
   481  03C5  1BFF               	btfsc	btemp+1,7
   482  03C6  2BCF               	ljmp	stringcode
   483  03C7  1383               	bcf	3,7
   484  03C8  187F               	btfsc	btemp+1,0
   485  03C9  1783               	bsf	3,7
   486  03CA  0800               	movf	0,w
   487  03CB  0A84               	incf	4,f
   488  03CC  1903               	skipnz
   489  03CD  0AFF               	incf	btemp+1,f
   490  03CE  0008               	return
   491  03CF                     stringcode:	
   492  03CF                     stringdir:	
   493  03CF  3003               	movlw	high stringdir
   494  03D0  008A               	movwf	10
   495  03D1  0804               	movf	4,w
   496  03D2  0A84               	incf	4,f
   497  03D3  0782               	addwf	2,f
   498  03D4                     __stringbase:	
   499  03D4  3400               	retlw	0
   500  03D5                     __end_of__stringtab:	
   501  03D5                     STR_1:	
   502  03D5  3453               	retlw	83	;'S'
   503  03D6  3465               	retlw	101	;'e'
   504  03D7  3472               	retlw	114	;'r'
   505  03D8  3469               	retlw	105	;'i'
   506  03D9  3461               	retlw	97	;'a'
   507  03DA  346C               	retlw	108	;'l'
   508  03DB  3420               	retlw	32	;' '
   509  03DC  344F               	retlw	79	;'O'
   510  03DD  344B               	retlw	75	;'K'
   511  03DE  3421               	retlw	33	;'!'
   512  03DF  3400               	retlw	0
   513                           
   514                           ; #config settings
   515  0000                     
   516                           	psect	cinit
   517  0011                     start_initialization:	
   518  0011                     __initialization:	
   519                           
   520                           ; Clear objects allocated to COMMON
   521  0011  01FC               	clrf	__pbssCOMMON& (0+127)
   522  0012  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   523                           
   524                           ; Clear objects allocated to BANK0
   525  0013  3020               	movlw	low __pbssBANK0
   526  0014  0084               	movwf	4
   527  0015  303D               	movlw	low (__pbssBANK0+29)
   528  0016  247F               	fcall	clear_ram0
   529  0017                     end_of_initialization:	
   530                           ;End of C runtime variable initialization code
   531                           
   532  0017                     __end_of__initialization:	
   533  0017  0183               	clrf	3
   534  0018  2C4B               	ljmp	_main	;jump to C main() function
   535                           
   536                           	psect	bssCOMMON
   537  007C                     __pbssCOMMON:	
   538  007C                     _currentKey:	
   539  007C                     	ds	1
   540  007D                     _buttonPressed:	
   541  007D                     	ds	1
   542                           
   543                           	psect	bssBANK0
   544  0020                     __pbssBANK0:	
   545  0020                     _URBuff:	
   546  0020                     	ds	12
   547  002C                     USARTWriteInt@F1616:	
   548  002C                     	ds	5
   549  0031                     _currentKeypadStatus:	
   550  0031                     	ds	2
   551  0033                     _lastKey:	
   552  0033                     	ds	1
   553  0034                     _rxCount:	
   554  0034                     	ds	1
   555  0035                     _recvCommand:	
   556  0035                     	ds	6
   557  003B                     _keypadState:	
   558  003B                     	ds	2
   559                           
   560                           	psect	clrtext
   561  047F                     clear_ram0:	
   562                           ;	Called with FSR containing the base address, and
   563                           ;	W with the last address+1
   564                           
   565  047F  0064               	clrwdt	;clear the watchdog before getting into this loop
   566  0480                     clrloop0:	
   567  0480  0180               	clrf	0	;clear RAM location pointed to by FSR
   568  0481  0A84               	incf	4,f	;increment pointer
   569  0482  0604               	xorwf	4,w	;XOR with final address
   570  0483  1903               	btfsc	3,2	;have we reached the end yet?
   571  0484  3400               	retlw	0	;all done for this memory range, return
   572  0485  0604               	xorwf	4,w	;XOR again to restore value
   573  0486  2C80               	goto	clrloop0	;do the next byte
   574                           
   575                           	psect	cstackCOMMON
   576  0070                     __pcstackCOMMON:	
   577  0070                     ?_controllerInit:	
   578  0070                     ?_rs485Tx:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_rs485Rx:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?_checkCommandRx:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_scanKeypad:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_sendButtonInfo:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_ackButton:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_resetKeypad:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_initKeypad:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_getKey:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_USARTWriteChar:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_USARTHandleRxInt:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ??_USARTHandleRxInt:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_USARTReadData:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_main:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_gpioInit:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ?_runProtocol:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_ISR:	
   627                           ; 1 bytes @ 0x0
   628                           
   629                           
   630                           ; 1 bytes @ 0x0
   631  0070                     	ds	4
   632  0074                     USARTHandleRxInt@data:	
   633                           
   634                           ; 1 bytes @ 0x4
   635  0074                     	ds	1
   636  0075                     ??_ISR:	
   637                           
   638                           ; 1 bytes @ 0x5
   639  0075                     	ds	5
   640                           
   641                           	psect	cstackBANK0
   642  003D                     __pcstackBANK0:	
   643  003D                     ??_rs485Tx:	
   644  003D                     ??_rs485Rx:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  003D                     ??_initKeypad:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  003D                     ??_getKey:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  003D                     ?_USARTInit:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  003D                     ??_USARTWriteChar:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  003D                     ??_USARTReadData:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  003D                     ??_gpioInit:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  003D                     ?_sortRxFrame:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  003D                     USARTWriteChar@ch:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  003D                     sortRxFrame@commandStruct:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  003D                     USARTInit@baud_rate:	
   675                           ; 1 bytes @ 0x0
   676                           
   677                           
   678                           ; 2 bytes @ 0x0
   679  003D                     	ds	1
   680  003E                     ?_USARTWriteString:	
   681  003E                     ??_sortRxFrame:	
   682                           ; 1 bytes @ 0x1
   683                           
   684  003E                     USARTReadData@data:	
   685                           ; 1 bytes @ 0x1
   686                           
   687  003E                     USARTWriteString@str:	
   688                           ; 1 bytes @ 0x1
   689                           
   690                           
   691                           ; 2 bytes @ 0x1
   692  003E                     	ds	1
   693  003F                     ??_USARTInit:	
   694  003F                     ?_USARTReadBuffer:	
   695                           ; 1 bytes @ 0x2
   696                           
   697  003F                     getKey@keypadState:	
   698                           ; 1 bytes @ 0x2
   699                           
   700  003F                     USARTReadBuffer@len:	
   701                           ; 1 bytes @ 0x2
   702                           
   703                           
   704                           ; 2 bytes @ 0x2
   705  003F                     	ds	1
   706  0040                     ??_controllerInit:	
   707  0040                     ??_scanKeypad:	
   708                           ; 1 bytes @ 0x3
   709                           
   710  0040                     USARTWriteString@len:	
   711                           ; 1 bytes @ 0x3
   712                           
   713  0040                     sortRxFrame@rxBuf:	
   714                           ; 1 bytes @ 0x3
   715                           
   716                           
   717                           ; 1 bytes @ 0x3
   718  0040                     	ds	1
   719  0041                     ??_sendButtonInfo:	
   720  0041                     ??_ackButton:	
   721                           ; 1 bytes @ 0x4
   722                           
   723  0041                     ??_resetKeypad:	
   724                           ; 1 bytes @ 0x4
   725                           
   726  0041                     ??_USARTWriteString:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  0041                     ?_USARTWriteLine:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  0041                     ??_USARTReadBuffer:	
   733                           ; 1 bytes @ 0x4
   734                           
   735  0041                     USARTWriteLine@len:	
   736                           ; 1 bytes @ 0x4
   737                           
   738  0041                     sortRxFrame@err:	
   739                           ; 1 bytes @ 0x4
   740                           
   741                           
   742                           ; 1 bytes @ 0x4
   743  0041                     	ds	1
   744  0042                     ??_USARTWriteLine:	
   745  0042                     sortRxFrame@command:	
   746                           ; 1 bytes @ 0x5
   747                           
   748  0042                     sendButtonInfo@buffer:	
   749                           ; 1 bytes @ 0x5
   750                           
   751  0042                     ackButton@buffer:	
   752                           ; 6 bytes @ 0x5
   753                           
   754  0042                     resetKeypad@buffer:	
   755                           ; 6 bytes @ 0x5
   756                           
   757                           
   758                           ; 6 bytes @ 0x5
   759  0042                     	ds	1
   760  0043                     USARTWriteLine@str:	
   761  0043                     USARTReadBuffer@buff:	
   762                           ; 1 bytes @ 0x6
   763                           
   764                           
   765                           ; 1 bytes @ 0x6
   766  0043                     	ds	1
   767  0044                     USARTReadBuffer@i:	
   768                           
   769                           ; 2 bytes @ 0x7
   770  0044                     	ds	4
   771  0048                     sendButtonInfo@button:	
   772                           
   773                           ; 1 bytes @ 0xB
   774  0048                     	ds	1
   775  0049                     ??_runProtocol:	
   776                           
   777                           ; 1 bytes @ 0xC
   778  0049                     	ds	1
   779  004A                     runProtocol@command:	
   780                           
   781                           ; 1 bytes @ 0xD
   782  004A                     	ds	1
   783  004B                     runProtocol@commandRecv:	
   784                           
   785                           ; 1 bytes @ 0xE
   786  004B                     	ds	1
   787  004C                     ??_checkCommandRx:	
   788                           
   789                           ; 1 bytes @ 0xF
   790  004C                     	ds	1
   791  004D                     checkCommandRx@buffer:	
   792                           
   793                           ; 6 bytes @ 0x10
   794  004D                     	ds	6
   795  0053                     ??_main:	
   796                           
   797                           ; 1 bytes @ 0x16
   798  0053                     	ds	1
   799                           
   800                           	psect	maintext
   801  044B                     __pmaintext:	
   802 ;;
   803 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   804 ;;
   805 ;; *************** function _main *****************
   806 ;; Defined at:
   807 ;;		line 34 in file "main.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;		None
   810 ;; Auto vars:     Size  Location     Type
   811 ;;		None
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : B00/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1
   821 ;;      Params:         0       0       0
   822 ;;      Locals:         0       0       0
   823 ;;      Temps:          0       1       0
   824 ;;      Totals:         0       1       0
   825 ;;Total ram usage:        1 bytes
   826 ;; Hardware stack levels required when called:    7
   827 ;; This function calls:
   828 ;;		_USARTWriteLine
   829 ;;		_checkCommandRx
   830 ;;		_controllerInit
   831 ;;		_rs485Rx
   832 ;;		_rs485Tx
   833 ;;		_scanKeypad
   834 ;; This function is called by:
   835 ;;		Startup code after reset
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _main
   841  044B                     _main:	
   842                           
   843                           ;main.c: 36: controllerInit();
   844                           
   845                           ;incstack = 0
   846                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   847  044B  2459               	fcall	_controllerInit
   848                           
   849                           ;main.c: 39: rs485Tx();
   850  044C  2487               	fcall	_rs485Tx
   851                           
   852                           ;main.c: 40: USARTWriteLine("Serial OK!", 10);
   853  044D  300A               	movlw	10
   854  044E  1283               	bcf	3,5	;RP0=0, select bank0
   855  044F  1303               	bcf	3,6	;RP1=0, select bank0
   856  0450  00D3               	movwf	??_main
   857  0451  0853               	movf	??_main,w
   858  0452  00C1               	movwf	USARTWriteLine@len
   859  0453  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   860  0454  240F               	fcall	_USARTWriteLine
   861                           
   862                           ;main.c: 41: rs485Rx();
   863  0455  248B               	fcall	_rs485Rx
   864  0456                     l1858:	
   865                           ;main.c: 46: while(1)
   866                           
   867                           
   868                           ;main.c: 47: {
   869                           ;main.c: 48: checkCommandRx();
   870  0456  23E0               	fcall	_checkCommandRx
   871                           
   872                           ;main.c: 49: scanKeypad();
   873  0457  2439               	fcall	_scanKeypad
   874  0458  2C56               	goto	l1858
   875  0459                     __end_of_main:	
   876                           
   877                           	psect	text1
   878  0439                     __ptext1:	
   879 ;; *************** function _scanKeypad *****************
   880 ;; Defined at:
   881 ;;		line 157 in file "sysFunc.c"
   882 ;; Parameters:    Size  Location     Type
   883 ;;		None
   884 ;; Auto vars:     Size  Location     Type
   885 ;;		None
   886 ;; Return value:  Size  Location     Type
   887 ;;                  1    wreg      unsigned char 
   888 ;; Registers used:
   889 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   890 ;; Tracked objects:
   891 ;;		On entry : 0/0
   892 ;;		On exit  : 0/0
   893 ;;		Unchanged: 0/0
   894 ;; Data sizes:     COMMON   BANK0   BANK1
   895 ;;      Params:         0       0       0
   896 ;;      Locals:         0       0       0
   897 ;;      Temps:          0       1       0
   898 ;;      Totals:         0       1       0
   899 ;;Total ram usage:        1 bytes
   900 ;; Hardware stack levels used:    1
   901 ;; Hardware stack levels required when called:    3
   902 ;; This function calls:
   903 ;;		_getKey
   904 ;; This function is called by:
   905 ;;		_main
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           
   910                           ;psect for function _scanKeypad
   911  0439                     _scanKeypad:	
   912                           
   913                           ;sysFunc.c: 159: if(!keypadState.keyPressIndicator && !keypadState.keyLock)
   914                           
   915                           ;incstack = 0
   916                           ; Regs used in _scanKeypad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   917  0439  1283               	bcf	3,5	;RP0=0, select bank0
   918  043A  1303               	bcf	3,6	;RP1=0, select bank0
   919  043B  183B               	btfsc	_keypadState,0
   920  043C  0008               	return
   921  043D  193B               	btfsc	_keypadState,2
   922  043E  0008               	return
   923                           
   924                           ;sysFunc.c: 160: {
   925                           ;sysFunc.c: 161: getKey(&keypadState);
   926  043F  303B               	movlw	(low (_keypadState| 0))& (0+255)
   927  0440  2019               	fcall	_getKey
   928                           
   929                           ;sysFunc.c: 163: if(keypadState.keyPressIndicator)
   930  0441  1283               	bcf	3,5	;RP0=0, select bank0
   931  0442  1303               	bcf	3,6	;RP1=0, select bank0
   932  0443  1C3B               	btfss	_keypadState,0
   933  0444  0008               	return
   934                           
   935                           ;sysFunc.c: 164: {
   936                           ;sysFunc.c: 165: lastKey = keypadState.keyPressed;
   937  0445  083C               	movf	_keypadState+1,w
   938  0446  00C0               	movwf	??_scanKeypad
   939  0447  0840               	movf	??_scanKeypad,w
   940  0448  00B3               	movwf	_lastKey
   941                           
   942                           ;sysFunc.c: 166: keypadState.keyLock = 1;
   943  0449  153B               	bsf	_keypadState,2
   944                           
   945                           ;sysFunc.c: 167: return 0;
   946                           ;	Return value of _scanKeypad is never used
   947  044A  0008               	return
   948  044B                     __end_of_scanKeypad:	
   949                           ;sysFunc.c: 168: }
   950                           ;sysFunc.c: 169: }
   951                           ;sysFunc.c: 170: return 1;
   952                           ;	Return value of _scanKeypad is never used
   953                           
   954                           
   955                           	psect	text2
   956  0019                     __ptext2:	
   957 ;; *************** function _getKey *****************
   958 ;; Defined at:
   959 ;;		line 30 in file "Keypad4X4.c"
   960 ;; Parameters:    Size  Location     Type
   961 ;;  keypadState     1    wreg     PTR struct .
   962 ;;		 -> keypadState(2), 
   963 ;; Auto vars:     Size  Location     Type
   964 ;;  keypadState     1    2[BANK0 ] PTR struct .
   965 ;;		 -> keypadState(2), 
   966 ;; Return value:  Size  Location     Type
   967 ;;                  1    wreg      void 
   968 ;; Registers used:
   969 ;;		wreg, fsr0l, fsr0h, status,2
   970 ;; Tracked objects:
   971 ;;		On entry : 0/0
   972 ;;		On exit  : 0/0
   973 ;;		Unchanged: 0/0
   974 ;; Data sizes:     COMMON   BANK0   BANK1
   975 ;;      Params:         0       0       0
   976 ;;      Locals:         0       1       0
   977 ;;      Temps:          0       2       0
   978 ;;      Totals:         0       3       0
   979 ;;Total ram usage:        3 bytes
   980 ;; Hardware stack levels used:    1
   981 ;; Hardware stack levels required when called:    2
   982 ;; This function calls:
   983 ;;		Nothing
   984 ;; This function is called by:
   985 ;;		_scanKeypad
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           
   990                           ;psect for function _getKey
   991  0019                     _getKey:	
   992                           
   993                           ;incstack = 0
   994                           ; Regs used in _getKey: [wreg-fsr0h+status,2]
   995                           ;getKey@keypadState stored from wreg
   996  0019  1283               	bcf	3,5	;RP0=0, select bank0
   997  001A  1303               	bcf	3,6	;RP1=0, select bank0
   998  001B  00BF               	movwf	getKey@keypadState
   999                           
  1000                           ;Keypad4X4.c: 33: PORTB = 0xFE;
  1001  001C  30FE               	movlw	254
  1002  001D  0086               	movwf	6	;volatile
  1003                           
  1004                           ;Keypad4X4.c: 34: if ((PORTB & 0x10) == 0x00)
  1005  001E  1A06               	btfsc	6,4	;volatile
  1006  001F  283A               	goto	l16
  1007                           
  1008                           ;Keypad4X4.c: 35: {
  1009                           ;Keypad4X4.c: 36: _delay((unsigned long)((100)*(4000000/4000.0)));
  1010  0020  3082               	movlw	130
  1011  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1012  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1013  0023  00BE               	movwf	??_getKey+1
  1014  0024  30DD               	movlw	221
  1015  0025  00BD               	movwf	??_getKey
  1016  0026                     u1157:	
  1017  0026  0BBD               	decfsz	??_getKey,f
  1018  0027  2826               	goto	u1157
  1019  0028  0BBE               	decfsz	??_getKey+1,f
  1020  0029  2826               	goto	u1157
  1021  002A  0000               	nop
  1022                           
  1023                           ;Keypad4X4.c: 37: buttonPressed = BUTTON_1;
  1024  002B  01FD               	clrf	_buttonPressed
  1025  002C  0AFD               	incf	_buttonPressed,f
  1026                           
  1027                           ;Keypad4X4.c: 38: keypadState->keyPressIndicator = 1;
  1028  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1029  002E  1303               	bcf	3,6	;RP1=0, select bank0
  1030  002F  083F               	movf	getKey@keypadState,w
  1031  0030  0084               	movwf	4
  1032  0031  1383               	bcf	3,7	;select IRP bank0
  1033  0032  1400               	bsf	0,0
  1034                           
  1035                           ;Keypad4X4.c: 39: keypadState->keyPressed = buttonPressed;
  1036  0033  087D               	movf	_buttonPressed,w
  1037  0034  00BD               	movwf	??_getKey
  1038  0035  0A3F               	incf	getKey@keypadState,w
  1039  0036  0084               	movwf	4
  1040  0037  083D               	movf	??_getKey,w
  1041  0038  0080               	movwf	0
  1042                           
  1043                           ;Keypad4X4.c: 40: return;
  1044  0039  0008               	return
  1045  003A                     l16:	
  1046                           ;Keypad4X4.c: 41: }
  1047                           
  1048                           
  1049                           ;Keypad4X4.c: 43: else if ((PORTB & 0x20) == 0x00)
  1050  003A  1A86               	btfsc	6,5	;volatile
  1051  003B  2858               	goto	l19
  1052                           
  1053                           ;Keypad4X4.c: 44: {
  1054                           ;Keypad4X4.c: 45: _delay((unsigned long)((100)*(4000000/4000.0)));
  1055  003C  3082               	movlw	130
  1056  003D  1283               	bcf	3,5	;RP0=0, select bank0
  1057  003E  1303               	bcf	3,6	;RP1=0, select bank0
  1058  003F  00BE               	movwf	??_getKey+1
  1059  0040  30DD               	movlw	221
  1060  0041  00BD               	movwf	??_getKey
  1061  0042                     u1167:	
  1062  0042  0BBD               	decfsz	??_getKey,f
  1063  0043  2842               	goto	u1167
  1064  0044  0BBE               	decfsz	??_getKey+1,f
  1065  0045  2842               	goto	u1167
  1066  0046  0000               	nop
  1067                           
  1068                           ;Keypad4X4.c: 46: buttonPressed = BUTTON_2;
  1069  0047  3002               	movlw	2
  1070  0048  1283               	bcf	3,5	;RP0=0, select bank0
  1071  0049  1303               	bcf	3,6	;RP1=0, select bank0
  1072  004A  00BD               	movwf	??_getKey
  1073  004B  083D               	movf	??_getKey,w
  1074  004C  00FD               	movwf	_buttonPressed
  1075                           
  1076                           ;Keypad4X4.c: 47: keypadState->keyPressIndicator = 1;
  1077  004D  083F               	movf	getKey@keypadState,w
  1078  004E  0084               	movwf	4
  1079  004F  1383               	bcf	3,7	;select IRP bank0
  1080  0050  1400               	bsf	0,0
  1081                           
  1082                           ;Keypad4X4.c: 48: keypadState->keyPressed = buttonPressed;
  1083  0051  087D               	movf	_buttonPressed,w
  1084  0052  00BD               	movwf	??_getKey
  1085  0053  0A3F               	incf	getKey@keypadState,w
  1086  0054  0084               	movwf	4
  1087  0055  083D               	movf	??_getKey,w
  1088  0056  0080               	movwf	0
  1089                           
  1090                           ;Keypad4X4.c: 49: return;
  1091  0057  0008               	return
  1092  0058                     l19:	
  1093                           ;Keypad4X4.c: 50: }
  1094                           
  1095                           
  1096                           ;Keypad4X4.c: 52: else if ((PORTB & 0x40) == 0x00)
  1097  0058  1B06               	btfsc	6,6	;volatile
  1098  0059  2876               	goto	l21
  1099                           
  1100                           ;Keypad4X4.c: 53: {
  1101                           ;Keypad4X4.c: 54: _delay((unsigned long)((100)*(4000000/4000.0)));
  1102  005A  3082               	movlw	130
  1103  005B  1283               	bcf	3,5	;RP0=0, select bank0
  1104  005C  1303               	bcf	3,6	;RP1=0, select bank0
  1105  005D  00BE               	movwf	??_getKey+1
  1106  005E  30DD               	movlw	221
  1107  005F  00BD               	movwf	??_getKey
  1108  0060                     u1177:	
  1109  0060  0BBD               	decfsz	??_getKey,f
  1110  0061  2860               	goto	u1177
  1111  0062  0BBE               	decfsz	??_getKey+1,f
  1112  0063  2860               	goto	u1177
  1113  0064  0000               	nop
  1114                           
  1115                           ;Keypad4X4.c: 55: buttonPressed = BUTTON_3;
  1116  0065  3003               	movlw	3
  1117  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1118  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1119  0068  00BD               	movwf	??_getKey
  1120  0069  083D               	movf	??_getKey,w
  1121  006A  00FD               	movwf	_buttonPressed
  1122                           
  1123                           ;Keypad4X4.c: 56: keypadState->keyPressIndicator = 1;
  1124  006B  083F               	movf	getKey@keypadState,w
  1125  006C  0084               	movwf	4
  1126  006D  1383               	bcf	3,7	;select IRP bank0
  1127  006E  1400               	bsf	0,0
  1128                           
  1129                           ;Keypad4X4.c: 57: keypadState->keyPressed = buttonPressed;
  1130  006F  087D               	movf	_buttonPressed,w
  1131  0070  00BD               	movwf	??_getKey
  1132  0071  0A3F               	incf	getKey@keypadState,w
  1133  0072  0084               	movwf	4
  1134  0073  083D               	movf	??_getKey,w
  1135  0074  0080               	movwf	0
  1136                           
  1137                           ;Keypad4X4.c: 58: return;
  1138  0075  0008               	return
  1139  0076                     l21:	
  1140                           ;Keypad4X4.c: 59: }
  1141                           
  1142                           
  1143                           ;Keypad4X4.c: 61: else if ((PORTB & 0x80) == 0x00)
  1144  0076  1B86               	btfsc	6,7	;volatile
  1145  0077  2894               	goto	l1508
  1146                           
  1147                           ;Keypad4X4.c: 62: {
  1148                           ;Keypad4X4.c: 63: _delay((unsigned long)((100)*(4000000/4000.0)));
  1149  0078  3082               	movlw	130
  1150  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1151  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1152  007B  00BE               	movwf	??_getKey+1
  1153  007C  30DD               	movlw	221
  1154  007D  00BD               	movwf	??_getKey
  1155  007E                     u1187:	
  1156  007E  0BBD               	decfsz	??_getKey,f
  1157  007F  287E               	goto	u1187
  1158  0080  0BBE               	decfsz	??_getKey+1,f
  1159  0081  287E               	goto	u1187
  1160  0082  0000               	nop
  1161                           
  1162                           ;Keypad4X4.c: 64: buttonPressed = BUTTON_4;
  1163  0083  3004               	movlw	4
  1164  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1165  0085  1303               	bcf	3,6	;RP1=0, select bank0
  1166  0086  00BD               	movwf	??_getKey
  1167  0087  083D               	movf	??_getKey,w
  1168  0088  00FD               	movwf	_buttonPressed
  1169                           
  1170                           ;Keypad4X4.c: 65: keypadState->keyPressIndicator = 1;
  1171  0089  083F               	movf	getKey@keypadState,w
  1172  008A  0084               	movwf	4
  1173  008B  1383               	bcf	3,7	;select IRP bank0
  1174  008C  1400               	bsf	0,0
  1175                           
  1176                           ;Keypad4X4.c: 66: keypadState->keyPressed = buttonPressed;
  1177  008D  087D               	movf	_buttonPressed,w
  1178  008E  00BD               	movwf	??_getKey
  1179  008F  0A3F               	incf	getKey@keypadState,w
  1180  0090  0084               	movwf	4
  1181  0091  083D               	movf	??_getKey,w
  1182  0092  0080               	movwf	0
  1183                           
  1184                           ;Keypad4X4.c: 67: return;
  1185  0093  0008               	return
  1186  0094                     l1508:	
  1187                           
  1188                           ;Keypad4X4.c: 68: }
  1189                           ;Keypad4X4.c: 70: PORTB = 0xFD;
  1190  0094  30FD               	movlw	253
  1191  0095  0086               	movwf	6	;volatile
  1192                           
  1193                           ;Keypad4X4.c: 71: if ((PORTB & 0x10) == 0x00)
  1194  0096  1A06               	btfsc	6,4	;volatile
  1195  0097  28B4               	goto	l24
  1196                           
  1197                           ;Keypad4X4.c: 72: {
  1198                           ;Keypad4X4.c: 73: _delay((unsigned long)((100)*(4000000/4000.0)));
  1199  0098  3082               	movlw	130
  1200  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1201  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1202  009B  00BE               	movwf	??_getKey+1
  1203  009C  30DD               	movlw	221
  1204  009D  00BD               	movwf	??_getKey
  1205  009E                     u1197:	
  1206  009E  0BBD               	decfsz	??_getKey,f
  1207  009F  289E               	goto	u1197
  1208  00A0  0BBE               	decfsz	??_getKey+1,f
  1209  00A1  289E               	goto	u1197
  1210  00A2  0000               	nop
  1211                           
  1212                           ;Keypad4X4.c: 74: buttonPressed = BUTTON_5;
  1213  00A3  3005               	movlw	5
  1214  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1215  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1216  00A6  00BD               	movwf	??_getKey
  1217  00A7  083D               	movf	??_getKey,w
  1218  00A8  00FD               	movwf	_buttonPressed
  1219                           
  1220                           ;Keypad4X4.c: 75: keypadState->keyPressIndicator = 1;
  1221  00A9  083F               	movf	getKey@keypadState,w
  1222  00AA  0084               	movwf	4
  1223  00AB  1383               	bcf	3,7	;select IRP bank0
  1224  00AC  1400               	bsf	0,0
  1225                           
  1226                           ;Keypad4X4.c: 76: keypadState->keyPressed = buttonPressed;
  1227  00AD  087D               	movf	_buttonPressed,w
  1228  00AE  00BD               	movwf	??_getKey
  1229  00AF  0A3F               	incf	getKey@keypadState,w
  1230  00B0  0084               	movwf	4
  1231  00B1  083D               	movf	??_getKey,w
  1232  00B2  0080               	movwf	0
  1233                           
  1234                           ;Keypad4X4.c: 77: return;
  1235  00B3  0008               	return
  1236  00B4                     l24:	
  1237                           ;Keypad4X4.c: 78: }
  1238                           
  1239                           
  1240                           ;Keypad4X4.c: 80: else if ((PORTB & 0x20) == 0x00)
  1241  00B4  1A86               	btfsc	6,5	;volatile
  1242  00B5  28D2               	goto	l26
  1243                           
  1244                           ;Keypad4X4.c: 81: {
  1245                           ;Keypad4X4.c: 82: _delay((unsigned long)((100)*(4000000/4000.0)));
  1246  00B6  3082               	movlw	130
  1247  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1248  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1249  00B9  00BE               	movwf	??_getKey+1
  1250  00BA  30DD               	movlw	221
  1251  00BB  00BD               	movwf	??_getKey
  1252  00BC                     u1207:	
  1253  00BC  0BBD               	decfsz	??_getKey,f
  1254  00BD  28BC               	goto	u1207
  1255  00BE  0BBE               	decfsz	??_getKey+1,f
  1256  00BF  28BC               	goto	u1207
  1257  00C0  0000               	nop
  1258                           
  1259                           ;Keypad4X4.c: 83: buttonPressed = BUTTON_6;
  1260  00C1  3006               	movlw	6
  1261  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1262  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1263  00C4  00BD               	movwf	??_getKey
  1264  00C5  083D               	movf	??_getKey,w
  1265  00C6  00FD               	movwf	_buttonPressed
  1266                           
  1267                           ;Keypad4X4.c: 84: keypadState->keyPressIndicator = 1;
  1268  00C7  083F               	movf	getKey@keypadState,w
  1269  00C8  0084               	movwf	4
  1270  00C9  1383               	bcf	3,7	;select IRP bank0
  1271  00CA  1400               	bsf	0,0
  1272                           
  1273                           ;Keypad4X4.c: 85: keypadState->keyPressed = buttonPressed;
  1274  00CB  087D               	movf	_buttonPressed,w
  1275  00CC  00BD               	movwf	??_getKey
  1276  00CD  0A3F               	incf	getKey@keypadState,w
  1277  00CE  0084               	movwf	4
  1278  00CF  083D               	movf	??_getKey,w
  1279  00D0  0080               	movwf	0
  1280                           
  1281                           ;Keypad4X4.c: 86: return;
  1282  00D1  0008               	return
  1283  00D2                     l26:	
  1284                           ;Keypad4X4.c: 87: }
  1285                           
  1286                           
  1287                           ;Keypad4X4.c: 89: else if ((PORTB & 0x40) == 0x00)
  1288  00D2  1B06               	btfsc	6,6	;volatile
  1289  00D3  28F0               	goto	l28
  1290                           
  1291                           ;Keypad4X4.c: 90: {
  1292                           ;Keypad4X4.c: 91: _delay((unsigned long)((100)*(4000000/4000.0)));
  1293  00D4  3082               	movlw	130
  1294  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1295  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1296  00D7  00BE               	movwf	??_getKey+1
  1297  00D8  30DD               	movlw	221
  1298  00D9  00BD               	movwf	??_getKey
  1299  00DA                     u1217:	
  1300  00DA  0BBD               	decfsz	??_getKey,f
  1301  00DB  28DA               	goto	u1217
  1302  00DC  0BBE               	decfsz	??_getKey+1,f
  1303  00DD  28DA               	goto	u1217
  1304  00DE  0000               	nop
  1305                           
  1306                           ;Keypad4X4.c: 92: buttonPressed = BUTTON_7;
  1307  00DF  3007               	movlw	7
  1308  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1309  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1310  00E2  00BD               	movwf	??_getKey
  1311  00E3  083D               	movf	??_getKey,w
  1312  00E4  00FD               	movwf	_buttonPressed
  1313                           
  1314                           ;Keypad4X4.c: 93: keypadState->keyPressIndicator = 1;
  1315  00E5  083F               	movf	getKey@keypadState,w
  1316  00E6  0084               	movwf	4
  1317  00E7  1383               	bcf	3,7	;select IRP bank0
  1318  00E8  1400               	bsf	0,0
  1319                           
  1320                           ;Keypad4X4.c: 94: keypadState->keyPressed = buttonPressed;
  1321  00E9  087D               	movf	_buttonPressed,w
  1322  00EA  00BD               	movwf	??_getKey
  1323  00EB  0A3F               	incf	getKey@keypadState,w
  1324  00EC  0084               	movwf	4
  1325  00ED  083D               	movf	??_getKey,w
  1326  00EE  0080               	movwf	0
  1327                           
  1328                           ;Keypad4X4.c: 95: return;
  1329  00EF  0008               	return
  1330  00F0                     l28:	
  1331                           ;Keypad4X4.c: 96: }
  1332                           
  1333                           
  1334                           ;Keypad4X4.c: 98: else if ((PORTB & 0x80) == 0x00)
  1335  00F0  1B86               	btfsc	6,7	;volatile
  1336  00F1  290E               	goto	l1550
  1337                           
  1338                           ;Keypad4X4.c: 99: {
  1339                           ;Keypad4X4.c: 100: _delay((unsigned long)((100)*(4000000/4000.0)));
  1340  00F2  3082               	movlw	130
  1341  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1342  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1343  00F5  00BE               	movwf	??_getKey+1
  1344  00F6  30DD               	movlw	221
  1345  00F7  00BD               	movwf	??_getKey
  1346  00F8                     u1227:	
  1347  00F8  0BBD               	decfsz	??_getKey,f
  1348  00F9  28F8               	goto	u1227
  1349  00FA  0BBE               	decfsz	??_getKey+1,f
  1350  00FB  28F8               	goto	u1227
  1351  00FC  0000               	nop
  1352                           
  1353                           ;Keypad4X4.c: 101: buttonPressed = BUTTON_8;
  1354  00FD  3008               	movlw	8
  1355  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1356  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1357  0100  00BD               	movwf	??_getKey
  1358  0101  083D               	movf	??_getKey,w
  1359  0102  00FD               	movwf	_buttonPressed
  1360                           
  1361                           ;Keypad4X4.c: 102: keypadState->keyPressIndicator = 1;
  1362  0103  083F               	movf	getKey@keypadState,w
  1363  0104  0084               	movwf	4
  1364  0105  1383               	bcf	3,7	;select IRP bank0
  1365  0106  1400               	bsf	0,0
  1366                           
  1367                           ;Keypad4X4.c: 103: keypadState->keyPressed = buttonPressed;
  1368  0107  087D               	movf	_buttonPressed,w
  1369  0108  00BD               	movwf	??_getKey
  1370  0109  0A3F               	incf	getKey@keypadState,w
  1371  010A  0084               	movwf	4
  1372  010B  083D               	movf	??_getKey,w
  1373  010C  0080               	movwf	0
  1374                           
  1375                           ;Keypad4X4.c: 104: return;
  1376  010D  0008               	return
  1377  010E                     l1550:	
  1378                           
  1379                           ;Keypad4X4.c: 105: }
  1380                           ;Keypad4X4.c: 107: PORTB = 0xFB;
  1381  010E  30FB               	movlw	251
  1382  010F  0086               	movwf	6	;volatile
  1383                           
  1384                           ;Keypad4X4.c: 108: if ((PORTB & 0x10) == 0x00)
  1385  0110  1A06               	btfsc	6,4	;volatile
  1386  0111  292E               	goto	l31
  1387                           
  1388                           ;Keypad4X4.c: 109: {
  1389                           ;Keypad4X4.c: 110: _delay((unsigned long)((100)*(4000000/4000.0)));
  1390  0112  3082               	movlw	130
  1391  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1392  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1393  0115  00BE               	movwf	??_getKey+1
  1394  0116  30DD               	movlw	221
  1395  0117  00BD               	movwf	??_getKey
  1396  0118                     u1237:	
  1397  0118  0BBD               	decfsz	??_getKey,f
  1398  0119  2918               	goto	u1237
  1399  011A  0BBE               	decfsz	??_getKey+1,f
  1400  011B  2918               	goto	u1237
  1401  011C  0000               	nop
  1402                           
  1403                           ;Keypad4X4.c: 111: buttonPressed = BUTTON_9;
  1404  011D  3009               	movlw	9
  1405  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1406  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1407  0120  00BD               	movwf	??_getKey
  1408  0121  083D               	movf	??_getKey,w
  1409  0122  00FD               	movwf	_buttonPressed
  1410                           
  1411                           ;Keypad4X4.c: 112: keypadState->keyPressIndicator = 1;
  1412  0123  083F               	movf	getKey@keypadState,w
  1413  0124  0084               	movwf	4
  1414  0125  1383               	bcf	3,7	;select IRP bank0
  1415  0126  1400               	bsf	0,0
  1416                           
  1417                           ;Keypad4X4.c: 113: keypadState->keyPressed = buttonPressed;
  1418  0127  087D               	movf	_buttonPressed,w
  1419  0128  00BD               	movwf	??_getKey
  1420  0129  0A3F               	incf	getKey@keypadState,w
  1421  012A  0084               	movwf	4
  1422  012B  083D               	movf	??_getKey,w
  1423  012C  0080               	movwf	0
  1424                           
  1425                           ;Keypad4X4.c: 114: return;
  1426  012D  0008               	return
  1427  012E                     l31:	
  1428                           ;Keypad4X4.c: 115: }
  1429                           
  1430                           
  1431                           ;Keypad4X4.c: 117: else if ((PORTB & 0x20) == 0x00)
  1432  012E  1A86               	btfsc	6,5	;volatile
  1433  012F  294C               	goto	l33
  1434                           
  1435                           ;Keypad4X4.c: 118: {
  1436                           ;Keypad4X4.c: 119: _delay((unsigned long)((100)*(4000000/4000.0)));
  1437  0130  3082               	movlw	130
  1438  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1439  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1440  0133  00BE               	movwf	??_getKey+1
  1441  0134  30DD               	movlw	221
  1442  0135  00BD               	movwf	??_getKey
  1443  0136                     u1247:	
  1444  0136  0BBD               	decfsz	??_getKey,f
  1445  0137  2936               	goto	u1247
  1446  0138  0BBE               	decfsz	??_getKey+1,f
  1447  0139  2936               	goto	u1247
  1448  013A  0000               	nop
  1449                           
  1450                           ;Keypad4X4.c: 120: buttonPressed = BUTTON_10;
  1451  013B  300A               	movlw	10
  1452  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1453  013D  1303               	bcf	3,6	;RP1=0, select bank0
  1454  013E  00BD               	movwf	??_getKey
  1455  013F  083D               	movf	??_getKey,w
  1456  0140  00FD               	movwf	_buttonPressed
  1457                           
  1458                           ;Keypad4X4.c: 121: keypadState->keyPressIndicator = 1;
  1459  0141  083F               	movf	getKey@keypadState,w
  1460  0142  0084               	movwf	4
  1461  0143  1383               	bcf	3,7	;select IRP bank0
  1462  0144  1400               	bsf	0,0
  1463                           
  1464                           ;Keypad4X4.c: 122: keypadState->keyPressed = buttonPressed;
  1465  0145  087D               	movf	_buttonPressed,w
  1466  0146  00BD               	movwf	??_getKey
  1467  0147  0A3F               	incf	getKey@keypadState,w
  1468  0148  0084               	movwf	4
  1469  0149  083D               	movf	??_getKey,w
  1470  014A  0080               	movwf	0
  1471                           
  1472                           ;Keypad4X4.c: 123: return;
  1473  014B  0008               	return
  1474  014C                     l33:	
  1475                           ;Keypad4X4.c: 124: }
  1476                           
  1477                           
  1478                           ;Keypad4X4.c: 126: else if ((PORTB & 0x40) == 0x00)
  1479  014C  1B06               	btfsc	6,6	;volatile
  1480  014D  296A               	goto	l35
  1481                           
  1482                           ;Keypad4X4.c: 127: {
  1483                           ;Keypad4X4.c: 128: _delay((unsigned long)((100)*(4000000/4000.0)));
  1484  014E  3082               	movlw	130
  1485  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1486  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1487  0151  00BE               	movwf	??_getKey+1
  1488  0152  30DD               	movlw	221
  1489  0153  00BD               	movwf	??_getKey
  1490  0154                     u1257:	
  1491  0154  0BBD               	decfsz	??_getKey,f
  1492  0155  2954               	goto	u1257
  1493  0156  0BBE               	decfsz	??_getKey+1,f
  1494  0157  2954               	goto	u1257
  1495  0158  0000               	nop
  1496                           
  1497                           ;Keypad4X4.c: 129: buttonPressed = BUTTON_11;
  1498  0159  300B               	movlw	11
  1499  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1500  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1501  015C  00BD               	movwf	??_getKey
  1502  015D  083D               	movf	??_getKey,w
  1503  015E  00FD               	movwf	_buttonPressed
  1504                           
  1505                           ;Keypad4X4.c: 130: keypadState->keyPressIndicator = 1;
  1506  015F  083F               	movf	getKey@keypadState,w
  1507  0160  0084               	movwf	4
  1508  0161  1383               	bcf	3,7	;select IRP bank0
  1509  0162  1400               	bsf	0,0
  1510                           
  1511                           ;Keypad4X4.c: 131: keypadState->keyPressed = buttonPressed;
  1512  0163  087D               	movf	_buttonPressed,w
  1513  0164  00BD               	movwf	??_getKey
  1514  0165  0A3F               	incf	getKey@keypadState,w
  1515  0166  0084               	movwf	4
  1516  0167  083D               	movf	??_getKey,w
  1517  0168  0080               	movwf	0
  1518                           
  1519                           ;Keypad4X4.c: 132: return;
  1520  0169  0008               	return
  1521  016A                     l35:	
  1522                           ;Keypad4X4.c: 133: }
  1523                           
  1524                           
  1525                           ;Keypad4X4.c: 135: else if ((PORTB & 0x80) == 0x00)
  1526  016A  1B86               	btfsc	6,7	;volatile
  1527  016B  2988               	goto	l1592
  1528                           
  1529                           ;Keypad4X4.c: 136: {
  1530                           ;Keypad4X4.c: 137: _delay((unsigned long)((100)*(4000000/4000.0)));
  1531  016C  3082               	movlw	130
  1532  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1533  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1534  016F  00BE               	movwf	??_getKey+1
  1535  0170  30DD               	movlw	221
  1536  0171  00BD               	movwf	??_getKey
  1537  0172                     u1267:	
  1538  0172  0BBD               	decfsz	??_getKey,f
  1539  0173  2972               	goto	u1267
  1540  0174  0BBE               	decfsz	??_getKey+1,f
  1541  0175  2972               	goto	u1267
  1542  0176  0000               	nop
  1543                           
  1544                           ;Keypad4X4.c: 138: buttonPressed = BUTTON_12;
  1545  0177  300C               	movlw	12
  1546  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1547  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1548  017A  00BD               	movwf	??_getKey
  1549  017B  083D               	movf	??_getKey,w
  1550  017C  00FD               	movwf	_buttonPressed
  1551                           
  1552                           ;Keypad4X4.c: 139: keypadState->keyPressIndicator = 1;
  1553  017D  083F               	movf	getKey@keypadState,w
  1554  017E  0084               	movwf	4
  1555  017F  1383               	bcf	3,7	;select IRP bank0
  1556  0180  1400               	bsf	0,0
  1557                           
  1558                           ;Keypad4X4.c: 140: keypadState->keyPressed = buttonPressed;
  1559  0181  087D               	movf	_buttonPressed,w
  1560  0182  00BD               	movwf	??_getKey
  1561  0183  0A3F               	incf	getKey@keypadState,w
  1562  0184  0084               	movwf	4
  1563  0185  083D               	movf	??_getKey,w
  1564  0186  0080               	movwf	0
  1565                           
  1566                           ;Keypad4X4.c: 141: return;
  1567  0187  0008               	return
  1568  0188                     l1592:	
  1569                           
  1570                           ;Keypad4X4.c: 142: }
  1571                           ;Keypad4X4.c: 144: PORTB = 0xF7;
  1572  0188  30F7               	movlw	247
  1573  0189  0086               	movwf	6	;volatile
  1574                           
  1575                           ;Keypad4X4.c: 145: if ((PORTB & 0x10) == 0x00)
  1576  018A  1A06               	btfsc	6,4	;volatile
  1577  018B  29A8               	goto	l38
  1578                           
  1579                           ;Keypad4X4.c: 146: {
  1580                           ;Keypad4X4.c: 147: _delay((unsigned long)((100)*(4000000/4000.0)));
  1581  018C  3082               	movlw	130
  1582  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1583  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1584  018F  00BE               	movwf	??_getKey+1
  1585  0190  30DD               	movlw	221
  1586  0191  00BD               	movwf	??_getKey
  1587  0192                     u1277:	
  1588  0192  0BBD               	decfsz	??_getKey,f
  1589  0193  2992               	goto	u1277
  1590  0194  0BBE               	decfsz	??_getKey+1,f
  1591  0195  2992               	goto	u1277
  1592  0196  0000               	nop
  1593                           
  1594                           ;Keypad4X4.c: 148: buttonPressed = BUTTON_13;
  1595  0197  300D               	movlw	13
  1596  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1597  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1598  019A  00BD               	movwf	??_getKey
  1599  019B  083D               	movf	??_getKey,w
  1600  019C  00FD               	movwf	_buttonPressed
  1601                           
  1602                           ;Keypad4X4.c: 149: keypadState->keyPressIndicator = 1;
  1603  019D  083F               	movf	getKey@keypadState,w
  1604  019E  0084               	movwf	4
  1605  019F  1383               	bcf	3,7	;select IRP bank0
  1606  01A0  1400               	bsf	0,0
  1607                           
  1608                           ;Keypad4X4.c: 150: keypadState->keyPressed = buttonPressed;
  1609  01A1  087D               	movf	_buttonPressed,w
  1610  01A2  00BD               	movwf	??_getKey
  1611  01A3  0A3F               	incf	getKey@keypadState,w
  1612  01A4  0084               	movwf	4
  1613  01A5  083D               	movf	??_getKey,w
  1614  01A6  0080               	movwf	0
  1615                           
  1616                           ;Keypad4X4.c: 152: }
  1617                           
  1618                           ;Keypad4X4.c: 151: return;
  1619  01A7  0008               	return
  1620  01A8                     l38:	
  1621                           
  1622                           ;Keypad4X4.c: 154: else if ((PORTB & 0x20) == 0x00)
  1623  01A8  1A86               	btfsc	6,5	;volatile
  1624  01A9  29C6               	goto	l40
  1625                           
  1626                           ;Keypad4X4.c: 155: {
  1627                           ;Keypad4X4.c: 156: _delay((unsigned long)((100)*(4000000/4000.0)));
  1628  01AA  3082               	movlw	130
  1629  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1630  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1631  01AD  00BE               	movwf	??_getKey+1
  1632  01AE  30DD               	movlw	221
  1633  01AF  00BD               	movwf	??_getKey
  1634  01B0                     u1287:	
  1635  01B0  0BBD               	decfsz	??_getKey,f
  1636  01B1  29B0               	goto	u1287
  1637  01B2  0BBE               	decfsz	??_getKey+1,f
  1638  01B3  29B0               	goto	u1287
  1639  01B4  0000               	nop
  1640                           
  1641                           ;Keypad4X4.c: 157: buttonPressed = BUTTON_14;
  1642  01B5  300E               	movlw	14
  1643  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1644  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1645  01B8  00BD               	movwf	??_getKey
  1646  01B9  083D               	movf	??_getKey,w
  1647  01BA  00FD               	movwf	_buttonPressed
  1648                           
  1649                           ;Keypad4X4.c: 158: keypadState->keyPressIndicator = 1;
  1650  01BB  083F               	movf	getKey@keypadState,w
  1651  01BC  0084               	movwf	4
  1652  01BD  1383               	bcf	3,7	;select IRP bank0
  1653  01BE  1400               	bsf	0,0
  1654                           
  1655                           ;Keypad4X4.c: 159: keypadState->keyPressed = buttonPressed;
  1656  01BF  087D               	movf	_buttonPressed,w
  1657  01C0  00BD               	movwf	??_getKey
  1658  01C1  0A3F               	incf	getKey@keypadState,w
  1659  01C2  0084               	movwf	4
  1660  01C3  083D               	movf	??_getKey,w
  1661  01C4  0080               	movwf	0
  1662                           
  1663                           ;Keypad4X4.c: 161: }
  1664                           
  1665                           ;Keypad4X4.c: 160: return;
  1666  01C5  0008               	return
  1667  01C6                     l40:	
  1668                           
  1669                           ;Keypad4X4.c: 163: else if ((PORTB & 0x40) == 0x00)
  1670  01C6  1B06               	btfsc	6,6	;volatile
  1671  01C7  29E4               	goto	l42
  1672                           
  1673                           ;Keypad4X4.c: 164: {
  1674                           ;Keypad4X4.c: 165: _delay((unsigned long)((100)*(4000000/4000.0)));
  1675  01C8  3082               	movlw	130
  1676  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1677  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1678  01CB  00BE               	movwf	??_getKey+1
  1679  01CC  30DD               	movlw	221
  1680  01CD  00BD               	movwf	??_getKey
  1681  01CE                     u1297:	
  1682  01CE  0BBD               	decfsz	??_getKey,f
  1683  01CF  29CE               	goto	u1297
  1684  01D0  0BBE               	decfsz	??_getKey+1,f
  1685  01D1  29CE               	goto	u1297
  1686  01D2  0000               	nop
  1687                           
  1688                           ;Keypad4X4.c: 166: buttonPressed = BUTTON_15;
  1689  01D3  300F               	movlw	15
  1690  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1691  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1692  01D6  00BD               	movwf	??_getKey
  1693  01D7  083D               	movf	??_getKey,w
  1694  01D8  00FD               	movwf	_buttonPressed
  1695                           
  1696                           ;Keypad4X4.c: 167: keypadState->keyPressIndicator = 1;
  1697  01D9  083F               	movf	getKey@keypadState,w
  1698  01DA  0084               	movwf	4
  1699  01DB  1383               	bcf	3,7	;select IRP bank0
  1700  01DC  1400               	bsf	0,0
  1701                           
  1702                           ;Keypad4X4.c: 168: keypadState->keyPressed = buttonPressed;
  1703  01DD  087D               	movf	_buttonPressed,w
  1704  01DE  00BD               	movwf	??_getKey
  1705  01DF  0A3F               	incf	getKey@keypadState,w
  1706  01E0  0084               	movwf	4
  1707  01E1  083D               	movf	??_getKey,w
  1708  01E2  0080               	movwf	0
  1709                           
  1710                           ;Keypad4X4.c: 170: }
  1711                           
  1712                           ;Keypad4X4.c: 169: return;
  1713  01E3  0008               	return
  1714  01E4                     l42:	
  1715                           
  1716                           ;Keypad4X4.c: 172: else if ((PORTB & 0x80) == 0x00)
  1717  01E4  1B86               	btfsc	6,7	;volatile
  1718  01E5  2A02               	goto	l1636
  1719                           
  1720                           ;Keypad4X4.c: 173: {
  1721                           ;Keypad4X4.c: 174: _delay((unsigned long)((100)*(4000000/4000.0)));
  1722  01E6  3082               	movlw	130
  1723  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1724  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1725  01E9  00BE               	movwf	??_getKey+1
  1726  01EA  30DD               	movlw	221
  1727  01EB  00BD               	movwf	??_getKey
  1728  01EC                     u1307:	
  1729  01EC  0BBD               	decfsz	??_getKey,f
  1730  01ED  29EC               	goto	u1307
  1731  01EE  0BBE               	decfsz	??_getKey+1,f
  1732  01EF  29EC               	goto	u1307
  1733  01F0  0000               	nop
  1734                           
  1735                           ;Keypad4X4.c: 175: buttonPressed = BUTTON_16;
  1736  01F1  3010               	movlw	16
  1737  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1738  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1739  01F4  00BD               	movwf	??_getKey
  1740  01F5  083D               	movf	??_getKey,w
  1741  01F6  00FD               	movwf	_buttonPressed
  1742                           
  1743                           ;Keypad4X4.c: 176: keypadState->keyPressIndicator = 1;
  1744  01F7  083F               	movf	getKey@keypadState,w
  1745  01F8  0084               	movwf	4
  1746  01F9  1383               	bcf	3,7	;select IRP bank0
  1747  01FA  1400               	bsf	0,0
  1748                           
  1749                           ;Keypad4X4.c: 177: keypadState->keyPressed = buttonPressed;
  1750  01FB  087D               	movf	_buttonPressed,w
  1751  01FC  00BD               	movwf	??_getKey
  1752  01FD  0A3F               	incf	getKey@keypadState,w
  1753  01FE  0084               	movwf	4
  1754  01FF  083D               	movf	??_getKey,w
  1755  0200  0080               	movwf	0
  1756                           
  1757                           ;Keypad4X4.c: 179: }
  1758                           
  1759                           ;Keypad4X4.c: 178: return;
  1760  0201  0008               	return
  1761  0202                     l1636:	
  1762                           
  1763                           ;Keypad4X4.c: 181: else {
  1764                           ;Keypad4X4.c: 182: keypadState->keyPressIndicator = 0;
  1765  0202  083F               	movf	getKey@keypadState,w
  1766  0203  0084               	movwf	4
  1767  0204  1383               	bcf	3,7	;select IRP bank0
  1768  0205  1000               	bcf	0,0
  1769                           
  1770                           ;Keypad4X4.c: 183: keypadState->keyPressed = BUTTON_0;
  1771  0206  0A3F               	incf	getKey@keypadState,w
  1772  0207  0084               	movwf	4
  1773  0208  0180               	clrf	0
  1774                           
  1775                           ;Keypad4X4.c: 184: return;
  1776  0209  0008               	return
  1777  020A                     __end_of_getKey:	
  1778                           
  1779                           	psect	text3
  1780  0459                     __ptext3:	
  1781 ;; *************** function _controllerInit *****************
  1782 ;; Defined at:
  1783 ;;		line 148 in file "sysFunc.c"
  1784 ;; Parameters:    Size  Location     Type
  1785 ;;		None
  1786 ;; Auto vars:     Size  Location     Type
  1787 ;;		None
  1788 ;; Return value:  Size  Location     Type
  1789 ;;                  1    wreg      void 
  1790 ;; Registers used:
  1791 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1792 ;; Tracked objects:
  1793 ;;		On entry : 0/0
  1794 ;;		On exit  : 0/0
  1795 ;;		Unchanged: 0/0
  1796 ;; Data sizes:     COMMON   BANK0   BANK1
  1797 ;;      Params:         0       0       0
  1798 ;;      Locals:         0       0       0
  1799 ;;      Temps:          0       0       0
  1800 ;;      Totals:         0       0       0
  1801 ;;Total ram usage:        0 bytes
  1802 ;; Hardware stack levels used:    1
  1803 ;; Hardware stack levels required when called:    4
  1804 ;; This function calls:
  1805 ;;		_USARTInit
  1806 ;;		_gpioInit
  1807 ;;		_initKeypad
  1808 ;; This function is called by:
  1809 ;;		_main
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812                           
  1813                           
  1814                           ;psect for function _controllerInit
  1815  0459                     _controllerInit:	
  1816                           
  1817                           ;sysFunc.c: 150: gpioInit();
  1818                           
  1819                           ;incstack = 0
  1820                           ; Regs used in _controllerInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1821  0459  2476               	fcall	_gpioInit
  1822                           
  1823                           ;sysFunc.c: 151: USARTInit(9600);
  1824  045A  3080               	movlw	128
  1825  045B  1283               	bcf	3,5	;RP0=0, select bank0
  1826  045C  1303               	bcf	3,6	;RP1=0, select bank0
  1827  045D  00BD               	movwf	USARTInit@baud_rate
  1828  045E  3025               	movlw	37
  1829  045F  00BE               	movwf	USARTInit@baud_rate+1
  1830  0460  220A               	fcall	_USARTInit
  1831                           
  1832                           ;sysFunc.c: 152: initKeypad();
  1833  0461  246D               	fcall	_initKeypad
  1834  0462  0008               	return
  1835  0463                     __end_of_controllerInit:	
  1836                           ;sysFunc.c: 154: return;
  1837                           
  1838                           
  1839                           	psect	text4
  1840  046D                     __ptext4:	
  1841 ;; *************** function _initKeypad *****************
  1842 ;; Defined at:
  1843 ;;		line 18 in file "Keypad4X4.c"
  1844 ;; Parameters:    Size  Location     Type
  1845 ;;		None
  1846 ;; Auto vars:     Size  Location     Type
  1847 ;;		None
  1848 ;; Return value:  Size  Location     Type
  1849 ;;                  1    wreg      void 
  1850 ;; Registers used:
  1851 ;;		wreg
  1852 ;; Tracked objects:
  1853 ;;		On entry : 0/0
  1854 ;;		On exit  : 0/0
  1855 ;;		Unchanged: 0/0
  1856 ;; Data sizes:     COMMON   BANK0   BANK1
  1857 ;;      Params:         0       0       0
  1858 ;;      Locals:         0       0       0
  1859 ;;      Temps:          0       0       0
  1860 ;;      Totals:         0       0       0
  1861 ;;Total ram usage:        0 bytes
  1862 ;; Hardware stack levels used:    1
  1863 ;; Hardware stack levels required when called:    2
  1864 ;; This function calls:
  1865 ;;		Nothing
  1866 ;; This function is called by:
  1867 ;;		_controllerInit
  1868 ;; This function uses a non-reentrant model
  1869 ;;
  1870                           
  1871                           
  1872                           ;psect for function _initKeypad
  1873  046D                     _initKeypad:	
  1874                           
  1875                           ;Keypad4X4.c: 20: TRISB = 0xF0;
  1876                           
  1877                           ;incstack = 0
  1878                           ; Regs used in _initKeypad: [wreg]
  1879  046D  30F0               	movlw	240
  1880  046E  1683               	bsf	3,5	;RP0=1, select bank1
  1881  046F  1303               	bcf	3,6	;RP1=0, select bank1
  1882  0470  0086               	movwf	6	;volatile
  1883                           
  1884                           ;Keypad4X4.c: 21: PORTB = 0xFF;
  1885  0471  30FF               	movlw	255
  1886  0472  1283               	bcf	3,5	;RP0=0, select bank0
  1887  0473  1303               	bcf	3,6	;RP1=0, select bank0
  1888  0474  0086               	movwf	6	;volatile
  1889  0475  0008               	return
  1890  0476                     __end_of_initKeypad:	
  1891                           
  1892                           	psect	text5
  1893  0476                     __ptext5:	
  1894 ;; *************** function _gpioInit *****************
  1895 ;; Defined at:
  1896 ;;		line 18 in file "sysFunc.c"
  1897 ;; Parameters:    Size  Location     Type
  1898 ;;		None
  1899 ;; Auto vars:     Size  Location     Type
  1900 ;;		None
  1901 ;; Return value:  Size  Location     Type
  1902 ;;                  1    wreg      void 
  1903 ;; Registers used:
  1904 ;;		status,2, status,0, pclath, cstack
  1905 ;; Tracked objects:
  1906 ;;		On entry : 0/0
  1907 ;;		On exit  : 0/0
  1908 ;;		Unchanged: 0/0
  1909 ;; Data sizes:     COMMON   BANK0   BANK1
  1910 ;;      Params:         0       0       0
  1911 ;;      Locals:         0       0       0
  1912 ;;      Temps:          0       0       0
  1913 ;;      Totals:         0       0       0
  1914 ;;Total ram usage:        0 bytes
  1915 ;; Hardware stack levels used:    1
  1916 ;; Hardware stack levels required when called:    3
  1917 ;; This function calls:
  1918 ;;		_rs485Rx
  1919 ;; This function is called by:
  1920 ;;		_controllerInit
  1921 ;; This function uses a non-reentrant model
  1922 ;;
  1923                           
  1924                           
  1925                           ;psect for function _gpioInit
  1926  0476                     _gpioInit:	
  1927                           
  1928                           ;sysFunc.c: 20: ANSELH = 0x00;
  1929                           
  1930                           ;incstack = 0
  1931                           ; Regs used in _gpioInit: [status,2+status,0+pclath+cstack]
  1932  0476  1683               	bsf	3,5	;RP0=1, select bank3
  1933  0477  1703               	bsf	3,6	;RP1=1, select bank3
  1934  0478  0189               	clrf	9	;volatile
  1935                           
  1936                           ;sysFunc.c: 21: OPTION_REGbits.nRBPU = 0;
  1937  0479  1683               	bsf	3,5	;RP0=1, select bank1
  1938  047A  1303               	bcf	3,6	;RP1=0, select bank1
  1939  047B  1381               	bcf	1,7	;volatile
  1940                           
  1941                           ;sysFunc.c: 22: TRISCbits.TRISC5 = 0;
  1942  047C  1287               	bcf	7,5	;volatile
  1943                           
  1944                           ;sysFunc.c: 23: rs485Rx();
  1945  047D  248B               	fcall	_rs485Rx
  1946  047E  0008               	return
  1947  047F                     __end_of_gpioInit:	
  1948                           
  1949                           	psect	text6
  1950  020A                     __ptext6:	
  1951 ;; *************** function _USARTInit *****************
  1952 ;; Defined at:
  1953 ;;		line 31 in file "uart.c"
  1954 ;; Parameters:    Size  Location     Type
  1955 ;;  baud_rate       2    0[BANK0 ] unsigned int 
  1956 ;; Auto vars:     Size  Location     Type
  1957 ;;		None
  1958 ;; Return value:  Size  Location     Type
  1959 ;;                  1    wreg      void 
  1960 ;; Registers used:
  1961 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1962 ;; Tracked objects:
  1963 ;;		On entry : 0/0
  1964 ;;		On exit  : 0/0
  1965 ;;		Unchanged: 0/0
  1966 ;; Data sizes:     COMMON   BANK0   BANK1
  1967 ;;      Params:         0       2       0
  1968 ;;      Locals:         0       0       0
  1969 ;;      Temps:          0       1       0
  1970 ;;      Totals:         0       3       0
  1971 ;;Total ram usage:        3 bytes
  1972 ;; Hardware stack levels used:    1
  1973 ;; Hardware stack levels required when called:    2
  1974 ;; This function calls:
  1975 ;;		Nothing
  1976 ;; This function is called by:
  1977 ;;		_controllerInit
  1978 ;; This function uses a non-reentrant model
  1979 ;;
  1980                           
  1981                           
  1982                           ;psect for function _USARTInit
  1983  020A                     _USARTInit:	
  1984                           
  1985                           ;uart.c: 34: UQFront=UQEnd=-1;
  1986                           
  1987                           ;incstack = 0
  1988                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  1989  020A  30FF               	movlw	255
  1990  020B  00FA               	movwf	_UQEnd	;volatile
  1991  020C  1283               	bcf	3,5	;RP0=0, select bank0
  1992  020D  1303               	bcf	3,6	;RP1=0, select bank0
  1993  020E  00BF               	movwf	??_USARTInit
  1994  020F  083F               	movf	??_USARTInit,w
  1995  0210  00FB               	movwf	_UQFront	;volatile
  1996                           
  1997                           ;uart.c: 37: BRGH = 1;
  1998  0211  1683               	bsf	3,5	;RP0=1, select bank1
  1999  0212  1303               	bcf	3,6	;RP1=0, select bank1
  2000  0213  1518               	bsf	24,2	;volatile
  2001                           
  2002                           ;uart.c: 38: switch(baud_rate)
  2003  0214  2A20               	goto	l1656
  2004  0215                     l1646:	
  2005                           ;uart.c: 39: {
  2006                           ;uart.c: 40: case 9600:
  2007                           
  2008                           
  2009                           ;uart.c: 41: SPBRG=25;
  2010  0215  3019               	movlw	25
  2011  0216  2A1C               	goto	L3
  2012  0217                     l1648:	
  2013                           ;uart.c: 43: case 19200:
  2014                           
  2015                           ;uart.c: 42: break;
  2016                           
  2017                           
  2018                           ;uart.c: 44: SPBRG=64;
  2019  0217  3040               	movlw	64
  2020  0218  2A1C               	goto	L3
  2021  0219                     l1650:	
  2022                           ;uart.c: 46: case 28800:
  2023                           
  2024                           ;uart.c: 45: break;
  2025                           
  2026                           
  2027                           ;uart.c: 47: SPBRG=42;
  2028  0219  302A               	movlw	42
  2029  021A  2A1C               	goto	L3
  2030  021B                     l1652:	
  2031                           ;uart.c: 49: case 33600:
  2032                           
  2033                           ;uart.c: 48: break;
  2034                           
  2035                           
  2036                           ;uart.c: 50: SPBRG=36;
  2037  021B  3024               	movlw	36
  2038  021C                     L3:	
  2039  021C  1683               	bsf	3,5	;RP0=1, select bank1
  2040  021D  1303               	bcf	3,6	;RP1=0, select bank1
  2041  021E  0099               	movwf	25	;volatile
  2042                           
  2043                           ;uart.c: 52: }
  2044                           
  2045                           ;uart.c: 51: break;
  2046  021F  2A44               	goto	l74
  2047  0220                     l1656:	
  2048                           
  2049                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  2050                           ; Switch size 1, requested type "space"
  2051                           ; Number of cases is 4, Range of values is 37 to 131
  2052                           ; switch strategies available:
  2053                           ; Name         Instructions Cycles
  2054                           ; simple_byte           13     7 (average)
  2055                           ; direct_byte          104     9 (fixed)
  2056                           ; jumptable            263     9 (fixed)
  2057                           ;	Chosen strategy is simple_byte
  2058  0220  1283               	bcf	3,5	;RP0=0, select bank0
  2059  0221  1303               	bcf	3,6	;RP1=0, select bank0
  2060  0222  083E               	movf	USARTInit@baud_rate+1,w
  2061  0223  3A25               	xorlw	37	; case 37
  2062  0224  1903               	skipnz
  2063  0225  2A30               	goto	l2032
  2064  0226  3A6E               	xorlw	110	; case 75
  2065  0227  1903               	skipnz
  2066  0228  2A35               	goto	l2034
  2067  0229  3A3B               	xorlw	59	; case 112
  2068  022A  1903               	skipnz
  2069  022B  2A3A               	goto	l2036
  2070  022C  3AF3               	xorlw	243	; case 131
  2071  022D  1903               	skipnz
  2072  022E  2A3F               	goto	l2038
  2073  022F  2A44               	goto	l74
  2074  0230                     l2032:	
  2075                           
  2076                           ; Switch size 1, requested type "space"
  2077                           ; Number of cases is 1, Range of values is 128 to 128
  2078                           ; switch strategies available:
  2079                           ; Name         Instructions Cycles
  2080                           ; simple_byte            4     3 (average)
  2081                           ; direct_byte           10     9 (fixed)
  2082                           ; jumptable            263     9 (fixed)
  2083                           ;	Chosen strategy is simple_byte
  2084  0230  083D               	movf	USARTInit@baud_rate,w
  2085  0231  3A80               	xorlw	128	; case 128
  2086  0232  1903               	skipnz
  2087  0233  2A15               	goto	l1646
  2088  0234  2A44               	goto	l74
  2089  0235                     l2034:	
  2090                           
  2091                           ; Switch size 1, requested type "space"
  2092                           ; Number of cases is 1, Range of values is 0 to 0
  2093                           ; switch strategies available:
  2094                           ; Name         Instructions Cycles
  2095                           ; simple_byte            4     3 (average)
  2096                           ; direct_byte            7     6 (fixed)
  2097                           ; jumptable            260     6 (fixed)
  2098                           ;	Chosen strategy is simple_byte
  2099  0235  083D               	movf	USARTInit@baud_rate,w
  2100  0236  3A00               	xorlw	0	; case 0
  2101  0237  1903               	skipnz
  2102  0238  2A17               	goto	l1648
  2103  0239  2A44               	goto	l74
  2104  023A                     l2036:	
  2105                           
  2106                           ; Switch size 1, requested type "space"
  2107                           ; Number of cases is 1, Range of values is 128 to 128
  2108                           ; switch strategies available:
  2109                           ; Name         Instructions Cycles
  2110                           ; simple_byte            4     3 (average)
  2111                           ; direct_byte           10     9 (fixed)
  2112                           ; jumptable            263     9 (fixed)
  2113                           ;	Chosen strategy is simple_byte
  2114  023A  083D               	movf	USARTInit@baud_rate,w
  2115  023B  3A80               	xorlw	128	; case 128
  2116  023C  1903               	skipnz
  2117  023D  2A19               	goto	l1650
  2118  023E  2A44               	goto	l74
  2119  023F                     l2038:	
  2120                           
  2121                           ; Switch size 1, requested type "space"
  2122                           ; Number of cases is 1, Range of values is 64 to 64
  2123                           ; switch strategies available:
  2124                           ; Name         Instructions Cycles
  2125                           ; simple_byte            4     3 (average)
  2126                           ; direct_byte           10     9 (fixed)
  2127                           ; jumptable            263     9 (fixed)
  2128                           ;	Chosen strategy is simple_byte
  2129  023F  083D               	movf	USARTInit@baud_rate,w
  2130  0240  3A40               	xorlw	64	; case 64
  2131  0241  1903               	skipnz
  2132  0242  2A1B               	goto	l1652
  2133  0243  2A44               	goto	l74
  2134  0244                     l74:	
  2135                           
  2136                           ;uart.c: 54: TXSTAbits.TX9=0;
  2137  0244  1683               	bsf	3,5	;RP0=1, select bank1
  2138  0245  1303               	bcf	3,6	;RP1=0, select bank1
  2139  0246  1318               	bcf	24,6	;volatile
  2140                           
  2141                           ;uart.c: 55: TXSTAbits.TXEN=1;
  2142  0247  1698               	bsf	24,5	;volatile
  2143                           
  2144                           ;uart.c: 56: TXSTAbits.SYNC=0;
  2145  0248  1218               	bcf	24,4	;volatile
  2146                           
  2147                           ;uart.c: 57: TXSTAbits.BRGH=1;
  2148  0249  1518               	bsf	24,2	;volatile
  2149                           
  2150                           ;uart.c: 60: RCSTAbits.SPEN=1;
  2151  024A  1283               	bcf	3,5	;RP0=0, select bank0
  2152  024B  1303               	bcf	3,6	;RP1=0, select bank0
  2153  024C  1798               	bsf	24,7	;volatile
  2154                           
  2155                           ;uart.c: 61: RCSTAbits.RX9=0;
  2156  024D  1318               	bcf	24,6	;volatile
  2157                           
  2158                           ;uart.c: 62: RCSTAbits.CREN=1;
  2159  024E  1618               	bsf	24,4	;volatile
  2160                           
  2161                           ;uart.c: 63: RCSTAbits.ADDEN=0;
  2162  024F  1198               	bcf	24,3	;volatile
  2163                           
  2164                           ;uart.c: 66: PIE1bits.RCIE=1;
  2165  0250  1683               	bsf	3,5	;RP0=1, select bank1
  2166  0251  1303               	bcf	3,6	;RP1=0, select bank1
  2167  0252  168C               	bsf	12,5	;volatile
  2168                           
  2169                           ;uart.c: 67: INTCONbits.PEIE=1;
  2170  0253  170B               	bsf	11,6	;volatile
  2171                           
  2172                           ;uart.c: 69: (GIE = 1);
  2173  0254  178B               	bsf	11,7	;volatile
  2174  0255  0008               	return
  2175  0256                     __end_of_USARTInit:	
  2176                           
  2177                           	psect	text7
  2178  03E0                     __ptext7:	
  2179 ;; *************** function _checkCommandRx *****************
  2180 ;; Defined at:
  2181 ;;		line 173 in file "sysFunc.c"
  2182 ;; Parameters:    Size  Location     Type
  2183 ;;		None
  2184 ;; Auto vars:     Size  Location     Type
  2185 ;;  buffer          6   16[BANK0 ] unsigned char [6]
  2186 ;; Return value:  Size  Location     Type
  2187 ;;                  1    wreg      void 
  2188 ;; Registers used:
  2189 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2190 ;; Tracked objects:
  2191 ;;		On entry : 0/0
  2192 ;;		On exit  : 0/0
  2193 ;;		Unchanged: 0/0
  2194 ;; Data sizes:     COMMON   BANK0   BANK1
  2195 ;;      Params:         0       0       0
  2196 ;;      Locals:         0       6       0
  2197 ;;      Temps:          0       1       0
  2198 ;;      Totals:         0       7       0
  2199 ;;Total ram usage:        7 bytes
  2200 ;; Hardware stack levels used:    1
  2201 ;; Hardware stack levels required when called:    6
  2202 ;; This function calls:
  2203 ;;		_USARTReadBuffer
  2204 ;;		_runProtocol
  2205 ;;		_sortRxFrame
  2206 ;; This function is called by:
  2207 ;;		_main
  2208 ;; This function uses a non-reentrant model
  2209 ;;
  2210                           
  2211                           
  2212                           ;psect for function _checkCommandRx
  2213  03E0                     _checkCommandRx:	
  2214                           
  2215                           ;sysFunc.c: 175: uint8_t buffer[6];
  2216                           ;sysFunc.c: 177: if(rxCount >= (12 / 2))
  2217                           
  2218                           ;incstack = 0
  2219                           ; Regs used in _checkCommandRx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2220  03E0  3006               	movlw	6
  2221  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2222  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2223  03E3  0234               	subwf	_rxCount,w
  2224  03E4  1C03               	skipc
  2225  03E5  0008               	return
  2226                           
  2227                           ;sysFunc.c: 178: {
  2228                           ;sysFunc.c: 179: USARTReadBuffer(buffer, sizeof(buffer));
  2229  03E6  3006               	movlw	6
  2230  03E7  00BF               	movwf	USARTReadBuffer@len
  2231  03E8  3000               	movlw	0
  2232  03E9  00C0               	movwf	USARTReadBuffer@len+1
  2233  03EA  304D               	movlw	(low (checkCommandRx@buffer| 0))& (0+255)
  2234  03EB  23A5               	fcall	_USARTReadBuffer
  2235                           
  2236                           ;sysFunc.c: 180: rxCount -= (12 / 2);
  2237  03EC  3006               	movlw	6
  2238  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2239  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2240  03EF  02B4               	subwf	_rxCount,f
  2241                           
  2242                           ;sysFunc.c: 181: sortRxFrame(buffer, &recvCommand);
  2243  03F0  3035               	movlw	(low (_recvCommand| 0))& (0+255)
  2244  03F1  00CC               	movwf	??_checkCommandRx
  2245  03F2  084C               	movf	??_checkCommandRx,w
  2246  03F3  00BD               	movwf	sortRxFrame@commandStruct
  2247  03F4  304D               	movlw	(low (checkCommandRx@buffer| 0))& (0+255)
  2248  03F5  2256               	fcall	_sortRxFrame
  2249                           
  2250                           ;sysFunc.c: 182: runProtocol(&recvCommand);
  2251  03F6  3035               	movlw	(low (_recvCommand| 0))& (0+255)
  2252  03F7  22DC               	fcall	_runProtocol
  2253  03F8  0008               	return
  2254  03F9                     __end_of_checkCommandRx:	
  2255                           
  2256                           	psect	text8
  2257  0256                     __ptext8:	
  2258 ;; *************** function _sortRxFrame *****************
  2259 ;; Defined at:
  2260 ;;		line 48 in file "sysFunc.c"
  2261 ;; Parameters:    Size  Location     Type
  2262 ;;  rxBuf           1    wreg     PTR unsigned char 
  2263 ;;		 -> checkCommandRx@buffer(6), 
  2264 ;;  commandStruc    1    0[BANK0 ] PTR struct .
  2265 ;;		 -> recvCommand(6), 
  2266 ;; Auto vars:     Size  Location     Type
  2267 ;;  rxBuf           1    3[BANK0 ] PTR unsigned char 
  2268 ;;		 -> checkCommandRx@buffer(6), 
  2269 ;;  command         1    5[BANK0 ] PTR struct .
  2270 ;;		 -> checkCommandRx@buffer(6), 
  2271 ;;  err             1    4[BANK0 ] enum E1653
  2272 ;; Return value:  Size  Location     Type
  2273 ;;                  1    wreg      enum E1653
  2274 ;; Registers used:
  2275 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2276 ;; Tracked objects:
  2277 ;;		On entry : 0/0
  2278 ;;		On exit  : 0/0
  2279 ;;		Unchanged: 0/0
  2280 ;; Data sizes:     COMMON   BANK0   BANK1
  2281 ;;      Params:         0       1       0
  2282 ;;      Locals:         0       3       0
  2283 ;;      Temps:          0       2       0
  2284 ;;      Totals:         0       6       0
  2285 ;;Total ram usage:        6 bytes
  2286 ;; Hardware stack levels used:    1
  2287 ;; Hardware stack levels required when called:    2
  2288 ;; This function calls:
  2289 ;;		Nothing
  2290 ;; This function is called by:
  2291 ;;		_checkCommandRx
  2292 ;; This function uses a non-reentrant model
  2293 ;;
  2294                           
  2295                           
  2296                           ;psect for function _sortRxFrame
  2297  0256                     _sortRxFrame:	
  2298                           
  2299                           ;incstack = 0
  2300                           ; Regs used in _sortRxFrame: [wreg-fsr0h+status,2+status,0]
  2301                           ;sortRxFrame@rxBuf stored from wreg
  2302  0256  1283               	bcf	3,5	;RP0=0, select bank0
  2303  0257  1303               	bcf	3,6	;RP1=0, select bank0
  2304  0258  00C0               	movwf	sortRxFrame@rxBuf
  2305                           
  2306                           ;sysFunc.c: 50: err_t err;
  2307                           ;sysFunc.c: 51: command_t *command;
  2308                           ;sysFunc.c: 52: command = rxBuf;
  2309  0259  0840               	movf	sortRxFrame@rxBuf,w
  2310  025A  00BE               	movwf	??_sortRxFrame
  2311  025B  083E               	movf	??_sortRxFrame,w
  2312  025C  00C2               	movwf	sortRxFrame@command
  2313                           
  2314                           ;sysFunc.c: 53: if(command->startByte == 0xFF)
  2315  025D  0842               	movf	sortRxFrame@command,w
  2316  025E  0084               	movwf	4
  2317  025F  1383               	bcf	3,7	;select IRP bank0
  2318  0260  0A00               	incf	0,w
  2319  0261  1D03               	btfss	3,2
  2320  0262  2A97               	goto	l1710
  2321                           
  2322                           ;sysFunc.c: 54: if(command->panelId == 0x01)
  2323  0263  0A42               	incf	sortRxFrame@command,w
  2324  0264  0084               	movwf	4
  2325  0265  0300               	decf	0,w
  2326  0266  1D03               	btfss	3,2
  2327  0267  2A94               	goto	l239
  2328                           
  2329                           ;sysFunc.c: 55: if(command->endByte == 0xFE)
  2330  0268  0842               	movf	sortRxFrame@command,w
  2331  0269  3E05               	addlw	5
  2332  026A  0084               	movwf	4
  2333  026B  30FE               	movlw	254
  2334  026C  0600               	xorwf	0,w
  2335  026D  1D03               	btfss	3,2
  2336  026E  2A8F               	goto	l1706
  2337                           
  2338                           ;sysFunc.c: 56: {
  2339                           ;sysFunc.c: 57: commandStruct->commandType = command->commandType;
  2340  026F  0842               	movf	sortRxFrame@command,w
  2341  0270  3E02               	addlw	2
  2342  0271  0084               	movwf	4
  2343  0272  0800               	movf	0,w
  2344  0273  397F               	andlw	127
  2345  0274  00BE               	movwf	??_sortRxFrame
  2346  0275  083D               	movf	sortRxFrame@commandStruct,w
  2347  0276  3E02               	addlw	2
  2348  0277  0084               	movwf	4
  2349  0278  0800               	movf	0,w
  2350  0279  063E               	xorwf	??_sortRxFrame,w
  2351  027A  3980               	andlw	-128
  2352  027B  063E               	xorwf	??_sortRxFrame,w
  2353  027C  0080               	movwf	0
  2354                           
  2355                           ;sysFunc.c: 58: commandStruct->param = command->param;
  2356  027D  0842               	movf	sortRxFrame@command,w
  2357  027E  3E03               	addlw	3
  2358  027F  0084               	movwf	4
  2359  0280  0800               	movf	0,w
  2360  0281  00BE               	movwf	??_sortRxFrame
  2361  0282  0A84               	incf	4,f
  2362  0283  0800               	movf	0,w
  2363  0284  00BF               	movwf	??_sortRxFrame+1
  2364  0285  083D               	movf	sortRxFrame@commandStruct,w
  2365  0286  3E03               	addlw	3
  2366  0287  0084               	movwf	4
  2367  0288  083E               	movf	??_sortRxFrame,w
  2368  0289  0080               	movwf	0
  2369  028A  0A84               	incf	4,f
  2370  028B  083F               	movf	??_sortRxFrame+1,w
  2371  028C  0080               	movwf	0
  2372                           
  2373                           ;sysFunc.c: 59: err = ERR_OK;
  2374  028D  01C1               	clrf	sortRxFrame@err
  2375                           
  2376                           ;sysFunc.c: 61: }
  2377                           
  2378                           ;sysFunc.c: 60: return err;
  2379                           ;	Return value of _sortRxFrame is never used
  2380  028E  0008               	return
  2381  028F                     l1706:	
  2382                           
  2383                           ;sysFunc.c: 62: else { err = ERR_END; return err;}
  2384  028F  3004               	movlw	4
  2385  0290  00BE               	movwf	??_sortRxFrame
  2386  0291  083E               	movf	??_sortRxFrame,w
  2387  0292  00C1               	movwf	sortRxFrame@err
  2388                           
  2389                           ;	Return value of _sortRxFrame is never used
  2390  0293  0008               	return
  2391  0294                     l239:	
  2392                           
  2393                           ;sysFunc.c: 63: else { err = ERR_ID; return err;}
  2394  0294  01C1               	clrf	sortRxFrame@err
  2395  0295  0AC1               	incf	sortRxFrame@err,f
  2396                           
  2397                           ;	Return value of _sortRxFrame is never used
  2398  0296  0008               	return
  2399  0297                     l1710:	
  2400                           
  2401                           ;sysFunc.c: 64: else { err = ERR_STRT; return err;}
  2402  0297  3003               	movlw	3
  2403  0298  00BE               	movwf	??_sortRxFrame
  2404  0299  083E               	movf	??_sortRxFrame,w
  2405  029A  00C1               	movwf	sortRxFrame@err
  2406                           
  2407                           ;	Return value of _sortRxFrame is never used
  2408  029B  0008               	return
  2409  029C                     __end_of_sortRxFrame:	
  2410                           
  2411                           	psect	text9
  2412  02DC                     __ptext9:	
  2413 ;; *************** function _runProtocol *****************
  2414 ;; Defined at:
  2415 ;;		line 67 in file "sysFunc.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;  commandRecv     1    wreg     PTR struct .
  2418 ;;		 -> recvCommand(6), 
  2419 ;; Auto vars:     Size  Location     Type
  2420 ;;  commandRecv     1   14[BANK0 ] PTR struct .
  2421 ;;		 -> recvCommand(6), 
  2422 ;;  command         1   13[BANK0 ] unsigned char 
  2423 ;; Return value:  Size  Location     Type
  2424 ;;                  1    wreg      void 
  2425 ;; Registers used:
  2426 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2427 ;; Tracked objects:
  2428 ;;		On entry : 0/0
  2429 ;;		On exit  : 0/0
  2430 ;;		Unchanged: 0/0
  2431 ;; Data sizes:     COMMON   BANK0   BANK1
  2432 ;;      Params:         0       0       0
  2433 ;;      Locals:         0       2       0
  2434 ;;      Temps:          0       1       0
  2435 ;;      Totals:         0       3       0
  2436 ;;Total ram usage:        3 bytes
  2437 ;; Hardware stack levels used:    1
  2438 ;; Hardware stack levels required when called:    5
  2439 ;; This function calls:
  2440 ;;		_ackButton
  2441 ;;		_resetKeypad
  2442 ;;		_sendButtonInfo
  2443 ;; This function is called by:
  2444 ;;		_checkCommandRx
  2445 ;; This function uses a non-reentrant model
  2446 ;;
  2447                           
  2448                           
  2449                           ;psect for function _runProtocol
  2450  02DC                     _runProtocol:	
  2451                           
  2452                           ;incstack = 0
  2453                           ; Regs used in _runProtocol: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2454                           ;runProtocol@commandRecv stored from wreg
  2455  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2456  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2457  02DE  00CB               	movwf	runProtocol@commandRecv
  2458                           
  2459                           ;sysFunc.c: 69: uint8_t command = commandRecv->commandType;
  2460  02DF  084B               	movf	runProtocol@commandRecv,w
  2461  02E0  3E02               	addlw	2
  2462  02E1  0084               	movwf	4
  2463  02E2  1383               	bcf	3,7	;select IRP bank0
  2464  02E3  0800               	movf	0,w
  2465  02E4  397F               	andlw	127
  2466  02E5  00C9               	movwf	??_runProtocol
  2467  02E6  0849               	movf	??_runProtocol,w
  2468  02E7  00CA               	movwf	runProtocol@command
  2469                           
  2470                           ;sysFunc.c: 70: switch(command){
  2471  02E8  2B08               	goto	l1730
  2472  02E9                     l1716:	
  2473                           ;sysFunc.c: 71: case SEND_BUTTON:
  2474                           
  2475                           
  2476                           ;sysFunc.c: 72: sendButtonInfo(lastKey);
  2477  02E9  0833               	movf	_lastKey,w
  2478  02EA  2383               	fcall	_sendButtonInfo
  2479                           
  2480                           ;sysFunc.c: 73: commandRecv->commandType = COMMAND_NULL;
  2481  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2482  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  2483  02ED  084B               	movf	runProtocol@commandRecv,w
  2484  02EE  3E02               	addlw	2
  2485  02EF  0084               	movwf	4
  2486  02F0  3080               	movlw	-128
  2487  02F1  1383               	bcf	3,7	;select IRP bank0
  2488  02F2  0580               	andwf	0,f
  2489                           
  2490                           ;sysFunc.c: 74: break;
  2491  02F3  0008               	return
  2492  02F4                     l1720:	
  2493                           ;sysFunc.c: 76: case ACK_BUTTON:
  2494                           
  2495                           
  2496                           ;sysFunc.c: 77: ackButton();
  2497  02F4  233A               	fcall	_ackButton
  2498                           
  2499                           ;sysFunc.c: 78: commandRecv->commandType = COMMAND_NULL;
  2500  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  2501  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  2502  02F7  084B               	movf	runProtocol@commandRecv,w
  2503  02F8  3E02               	addlw	2
  2504  02F9  0084               	movwf	4
  2505  02FA  3080               	movlw	-128
  2506  02FB  1383               	bcf	3,7	;select IRP bank0
  2507  02FC  0580               	andwf	0,f
  2508                           
  2509                           ;sysFunc.c: 79: break;
  2510  02FD  0008               	return
  2511  02FE                     l1724:	
  2512                           ;sysFunc.c: 81: case RESET_KEYPAD:
  2513                           
  2514                           
  2515                           ;sysFunc.c: 82: resetKeypad();
  2516  02FE  2314               	fcall	_resetKeypad
  2517                           
  2518                           ;sysFunc.c: 83: commandRecv->commandType = COMMAND_NULL;
  2519  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  2520  0300  1303               	bcf	3,6	;RP1=0, select bank0
  2521  0301  084B               	movf	runProtocol@commandRecv,w
  2522  0302  3E02               	addlw	2
  2523  0303  0084               	movwf	4
  2524  0304  3080               	movlw	-128
  2525  0305  1383               	bcf	3,7	;select IRP bank0
  2526  0306  0580               	andwf	0,f
  2527                           
  2528                           ;sysFunc.c: 88: }
  2529                           
  2530                           ;sysFunc.c: 87: break;
  2531                           
  2532                           ;sysFunc.c: 86: default:
  2533                           
  2534                           ;sysFunc.c: 84: break;
  2535  0307  0008               	return
  2536  0308                     l1730:	
  2537  0308  084A               	movf	runProtocol@command,w
  2538                           
  2539                           ; Switch size 1, requested type "space"
  2540                           ; Number of cases is 3, Range of values is 1 to 3
  2541                           ; switch strategies available:
  2542                           ; Name         Instructions Cycles
  2543                           ; simple_byte           10     6 (average)
  2544                           ; direct_byte           12     9 (fixed)
  2545                           ; jumptable            263     9 (fixed)
  2546                           ;	Chosen strategy is simple_byte
  2547  0309  3A01               	xorlw	1	; case 1
  2548  030A  1903               	skipnz
  2549  030B  2AE9               	goto	l1716
  2550  030C  3A03               	xorlw	3	; case 2
  2551  030D  1903               	skipnz
  2552  030E  2AF4               	goto	l1720
  2553  030F  3A01               	xorlw	1	; case 3
  2554  0310  1903               	skipnz
  2555  0311  2AFE               	goto	l1724
  2556  0312  2B13               	goto	l253
  2557  0313                     l253:	
  2558  0313  0008               	return
  2559  0314                     __end_of_runProtocol:	
  2560                           
  2561                           	psect	text10
  2562  0383                     __ptext10:	
  2563 ;; *************** function _sendButtonInfo *****************
  2564 ;; Defined at:
  2565 ;;		line 91 in file "sysFunc.c"
  2566 ;; Parameters:    Size  Location     Type
  2567 ;;  button          1    wreg     unsigned char 
  2568 ;; Auto vars:     Size  Location     Type
  2569 ;;  button          1   11[BANK0 ] unsigned char 
  2570 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2571 ;; Return value:  Size  Location     Type
  2572 ;;                  1    wreg      void 
  2573 ;; Registers used:
  2574 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2575 ;; Tracked objects:
  2576 ;;		On entry : 0/0
  2577 ;;		On exit  : 0/0
  2578 ;;		Unchanged: 0/0
  2579 ;; Data sizes:     COMMON   BANK0   BANK1
  2580 ;;      Params:         0       0       0
  2581 ;;      Locals:         0       7       0
  2582 ;;      Temps:          0       1       0
  2583 ;;      Totals:         0       8       0
  2584 ;;Total ram usage:        8 bytes
  2585 ;; Hardware stack levels used:    1
  2586 ;; Hardware stack levels required when called:    4
  2587 ;; This function calls:
  2588 ;;		_USARTWriteString
  2589 ;;		_rs485Rx
  2590 ;;		_rs485Tx
  2591 ;; This function is called by:
  2592 ;;		_runProtocol
  2593 ;; This function uses a non-reentrant model
  2594 ;;
  2595                           
  2596                           
  2597                           ;psect for function _sendButtonInfo
  2598  0383                     _sendButtonInfo:	
  2599                           
  2600                           ;incstack = 0
  2601                           ; Regs used in _sendButtonInfo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2602                           ;sendButtonInfo@button stored from wreg
  2603  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2604  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2605  0385  00C8               	movwf	sendButtonInfo@button
  2606                           
  2607                           ;sysFunc.c: 93: uint8_t buffer[6];
  2608                           ;sysFunc.c: 94: buffer[0] = 0xFF;
  2609  0386  30FF               	movlw	255
  2610  0387  00C1               	movwf	??_sendButtonInfo
  2611  0388  0841               	movf	??_sendButtonInfo,w
  2612  0389  00C2               	movwf	sendButtonInfo@buffer
  2613                           
  2614                           ;sysFunc.c: 95: buffer[1] = 0x01;
  2615  038A  01C3               	clrf	sendButtonInfo@buffer+1
  2616  038B  0AC3               	incf	sendButtonInfo@buffer+1,f
  2617                           
  2618                           ;sysFunc.c: 96: buffer[2] = SEND_BUTTON;
  2619  038C  01C4               	clrf	sendButtonInfo@buffer+2
  2620  038D  0AC4               	incf	sendButtonInfo@buffer+2,f
  2621                           
  2622                           ;sysFunc.c: 97: buffer[3] = 0x00;
  2623  038E  01C5               	clrf	sendButtonInfo@buffer+3
  2624                           
  2625                           ;sysFunc.c: 98: buffer[4] = button;
  2626  038F  0848               	movf	sendButtonInfo@button,w
  2627  0390  00C1               	movwf	??_sendButtonInfo
  2628  0391  0841               	movf	??_sendButtonInfo,w
  2629  0392  00C6               	movwf	sendButtonInfo@buffer+4
  2630                           
  2631                           ;sysFunc.c: 99: buffer[5] = 0xFE;
  2632  0393  30FE               	movlw	254
  2633  0394  00C1               	movwf	??_sendButtonInfo
  2634  0395  0841               	movf	??_sendButtonInfo,w
  2635  0396  00C7               	movwf	sendButtonInfo@buffer+5
  2636                           
  2637                           ;sysFunc.c: 101: rs485Tx();
  2638  0397  2487               	fcall	_rs485Tx
  2639                           
  2640                           ;sysFunc.c: 102: USARTWriteString(buffer, sizeof(buffer));
  2641  0398  3042               	movlw	(low (sendButtonInfo@buffer| 0))& (0+255)
  2642  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2643  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2644  039B  00BE               	movwf	USARTWriteString@str
  2645  039C  3000               	movlw	0
  2646  039D  00BF               	movwf	USARTWriteString@str+1
  2647  039E  3006               	movlw	6
  2648  039F  00C1               	movwf	??_sendButtonInfo
  2649  03A0  0841               	movf	??_sendButtonInfo,w
  2650  03A1  00C0               	movwf	USARTWriteString@len
  2651  03A2  23F9               	fcall	_USARTWriteString
  2652                           
  2653                           ;sysFunc.c: 103: rs485Rx();
  2654  03A3  248B               	fcall	_rs485Rx
  2655  03A4  0008               	return
  2656  03A5                     __end_of_sendButtonInfo:	
  2657                           
  2658                           	psect	text11
  2659  0314                     __ptext11:	
  2660 ;; *************** function _resetKeypad *****************
  2661 ;; Defined at:
  2662 ;;		line 127 in file "sysFunc.c"
  2663 ;; Parameters:    Size  Location     Type
  2664 ;;		None
  2665 ;; Auto vars:     Size  Location     Type
  2666 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2667 ;; Return value:  Size  Location     Type
  2668 ;;                  1    wreg      void 
  2669 ;; Registers used:
  2670 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2671 ;; Tracked objects:
  2672 ;;		On entry : 0/0
  2673 ;;		On exit  : 0/0
  2674 ;;		Unchanged: 0/0
  2675 ;; Data sizes:     COMMON   BANK0   BANK1
  2676 ;;      Params:         0       0       0
  2677 ;;      Locals:         0       6       0
  2678 ;;      Temps:          0       1       0
  2679 ;;      Totals:         0       7       0
  2680 ;;Total ram usage:        7 bytes
  2681 ;; Hardware stack levels used:    1
  2682 ;; Hardware stack levels required when called:    4
  2683 ;; This function calls:
  2684 ;;		_USARTWriteString
  2685 ;;		_rs485Rx
  2686 ;;		_rs485Tx
  2687 ;; This function is called by:
  2688 ;;		_runProtocol
  2689 ;; This function uses a non-reentrant model
  2690 ;;
  2691                           
  2692                           
  2693                           ;psect for function _resetKeypad
  2694  0314                     _resetKeypad:	
  2695                           
  2696                           ;sysFunc.c: 129: uint8_t buffer[6];
  2697                           ;sysFunc.c: 131: buffer[0] = 0xFF;
  2698                           
  2699                           ;incstack = 0
  2700                           ; Regs used in _resetKeypad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2701  0314  30FF               	movlw	255
  2702  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2703  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2704  0317  00C1               	movwf	??_resetKeypad
  2705  0318  0841               	movf	??_resetKeypad,w
  2706  0319  00C2               	movwf	resetKeypad@buffer
  2707                           
  2708                           ;sysFunc.c: 132: buffer[1] = 0x01;
  2709  031A  01C3               	clrf	resetKeypad@buffer+1
  2710  031B  0AC3               	incf	resetKeypad@buffer+1,f
  2711                           
  2712                           ;sysFunc.c: 133: buffer[2] = RESET_KEYPAD;
  2713  031C  3003               	movlw	3
  2714  031D  00C1               	movwf	??_resetKeypad
  2715  031E  0841               	movf	??_resetKeypad,w
  2716  031F  00C4               	movwf	resetKeypad@buffer+2
  2717                           
  2718                           ;sysFunc.c: 134: buffer[3] = 0x00;
  2719  0320  01C5               	clrf	resetKeypad@buffer+3
  2720                           
  2721                           ;sysFunc.c: 135: buffer[4] = 0x00;
  2722  0321  01C6               	clrf	resetKeypad@buffer+4
  2723                           
  2724                           ;sysFunc.c: 136: buffer[5] = 0xFE;
  2725  0322  30FE               	movlw	254
  2726  0323  00C1               	movwf	??_resetKeypad
  2727  0324  0841               	movf	??_resetKeypad,w
  2728  0325  00C7               	movwf	resetKeypad@buffer+5
  2729                           
  2730                           ;sysFunc.c: 138: rs485Tx();
  2731  0326  2487               	fcall	_rs485Tx
  2732                           
  2733                           ;sysFunc.c: 139: USARTWriteString(buffer, 6);
  2734  0327  3042               	movlw	(low (resetKeypad@buffer| 0))& (0+255)
  2735  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2736  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2737  032A  00BE               	movwf	USARTWriteString@str
  2738  032B  3000               	movlw	0
  2739  032C  00BF               	movwf	USARTWriteString@str+1
  2740  032D  3006               	movlw	6
  2741  032E  00C1               	movwf	??_resetKeypad
  2742  032F  0841               	movf	??_resetKeypad,w
  2743  0330  00C0               	movwf	USARTWriteString@len
  2744  0331  23F9               	fcall	_USARTWriteString
  2745                           
  2746                           ;sysFunc.c: 140: rs485Rx();
  2747  0332  248B               	fcall	_rs485Rx
  2748                           
  2749                           ;sysFunc.c: 142: keypadState.keyLock = 0;
  2750  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2751  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2752  0335  113B               	bcf	_keypadState,2
  2753                           
  2754                           ;sysFunc.c: 143: keypadState.keyPressIndicator = 0;
  2755  0336  103B               	bcf	_keypadState,0
  2756                           
  2757                           ;sysFunc.c: 144: keypadState.keyPressed = BUTTON_0;
  2758  0337  01BC               	clrf	_keypadState+1
  2759                           
  2760                           ;sysFunc.c: 145: lastKey = BUTTON_0;
  2761  0338  01B3               	clrf	_lastKey
  2762  0339  0008               	return
  2763  033A                     __end_of_resetKeypad:	
  2764                           
  2765                           	psect	text12
  2766  033A                     __ptext12:	
  2767 ;; *************** function _ackButton *****************
  2768 ;; Defined at:
  2769 ;;		line 106 in file "sysFunc.c"
  2770 ;; Parameters:    Size  Location     Type
  2771 ;;		None
  2772 ;; Auto vars:     Size  Location     Type
  2773 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2774 ;; Return value:  Size  Location     Type
  2775 ;;                  1    wreg      void 
  2776 ;; Registers used:
  2777 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2778 ;; Tracked objects:
  2779 ;;		On entry : 0/0
  2780 ;;		On exit  : 0/0
  2781 ;;		Unchanged: 0/0
  2782 ;; Data sizes:     COMMON   BANK0   BANK1
  2783 ;;      Params:         0       0       0
  2784 ;;      Locals:         0       6       0
  2785 ;;      Temps:          0       1       0
  2786 ;;      Totals:         0       7       0
  2787 ;;Total ram usage:        7 bytes
  2788 ;; Hardware stack levels used:    1
  2789 ;; Hardware stack levels required when called:    4
  2790 ;; This function calls:
  2791 ;;		_USARTWriteString
  2792 ;;		_rs485Rx
  2793 ;;		_rs485Tx
  2794 ;; This function is called by:
  2795 ;;		_runProtocol
  2796 ;; This function uses a non-reentrant model
  2797 ;;
  2798                           
  2799                           
  2800                           ;psect for function _ackButton
  2801  033A                     _ackButton:	
  2802                           
  2803                           ;sysFunc.c: 108: uint8_t buffer[6];
  2804                           ;sysFunc.c: 110: buffer[0] = 0xFF;
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _ackButton: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2808  033A  30FF               	movlw	255
  2809  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2810  033C  1303               	bcf	3,6	;RP1=0, select bank0
  2811  033D  00C1               	movwf	??_ackButton
  2812  033E  0841               	movf	??_ackButton,w
  2813  033F  00C2               	movwf	ackButton@buffer
  2814                           
  2815                           ;sysFunc.c: 111: buffer[1] = 0x01;
  2816  0340  01C3               	clrf	ackButton@buffer+1
  2817  0341  0AC3               	incf	ackButton@buffer+1,f
  2818                           
  2819                           ;sysFunc.c: 112: buffer[2] = ACK_BUTTON;
  2820  0342  3002               	movlw	2
  2821  0343  00C1               	movwf	??_ackButton
  2822  0344  0841               	movf	??_ackButton,w
  2823  0345  00C4               	movwf	ackButton@buffer+2
  2824                           
  2825                           ;sysFunc.c: 113: buffer[3] = 0x00;
  2826  0346  01C5               	clrf	ackButton@buffer+3
  2827                           
  2828                           ;sysFunc.c: 114: buffer[4] = 0x00;
  2829  0347  01C6               	clrf	ackButton@buffer+4
  2830                           
  2831                           ;sysFunc.c: 115: buffer[5] = 0xFE;
  2832  0348  30FE               	movlw	254
  2833  0349  00C1               	movwf	??_ackButton
  2834  034A  0841               	movf	??_ackButton,w
  2835  034B  00C7               	movwf	ackButton@buffer+5
  2836                           
  2837                           ;sysFunc.c: 117: rs485Tx();
  2838  034C  2487               	fcall	_rs485Tx
  2839                           
  2840                           ;sysFunc.c: 118: USARTWriteString(buffer, 6);
  2841  034D  3042               	movlw	(low (ackButton@buffer| 0))& (0+255)
  2842  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2843  034F  1303               	bcf	3,6	;RP1=0, select bank0
  2844  0350  00BE               	movwf	USARTWriteString@str
  2845  0351  3000               	movlw	0
  2846  0352  00BF               	movwf	USARTWriteString@str+1
  2847  0353  3006               	movlw	6
  2848  0354  00C1               	movwf	??_ackButton
  2849  0355  0841               	movf	??_ackButton,w
  2850  0356  00C0               	movwf	USARTWriteString@len
  2851  0357  23F9               	fcall	_USARTWriteString
  2852                           
  2853                           ;sysFunc.c: 119: rs485Rx();
  2854  0358  248B               	fcall	_rs485Rx
  2855                           
  2856                           ;sysFunc.c: 121: keypadState.keyLock = 0;
  2857  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2858  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2859  035B  113B               	bcf	_keypadState,2
  2860                           
  2861                           ;sysFunc.c: 122: keypadState.keyPressIndicator = 0;
  2862  035C  103B               	bcf	_keypadState,0
  2863                           
  2864                           ;sysFunc.c: 123: lastKey = BUTTON_0;
  2865  035D  01B3               	clrf	_lastKey
  2866                           
  2867                           ;sysFunc.c: 124: keypadState.keyPressed = BUTTON_0;
  2868  035E  01BC               	clrf	_keypadState+1
  2869  035F  0008               	return
  2870  0360                     __end_of_ackButton:	
  2871                           
  2872                           	psect	text13
  2873  0487                     __ptext13:	
  2874 ;; *************** function _rs485Tx *****************
  2875 ;; Defined at:
  2876 ;;		line 31 in file "sysFunc.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;		None
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;		None
  2881 ;; Return value:  Size  Location     Type
  2882 ;;                  1    wreg      void 
  2883 ;; Registers used:
  2884 ;;		None
  2885 ;; Tracked objects:
  2886 ;;		On entry : 0/0
  2887 ;;		On exit  : 0/0
  2888 ;;		Unchanged: 0/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1
  2890 ;;      Params:         0       0       0
  2891 ;;      Locals:         0       0       0
  2892 ;;      Temps:          0       0       0
  2893 ;;      Totals:         0       0       0
  2894 ;;Total ram usage:        0 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; Hardware stack levels required when called:    2
  2897 ;; This function calls:
  2898 ;;		Nothing
  2899 ;; This function is called by:
  2900 ;;		_main
  2901 ;;		_sendButtonInfo
  2902 ;;		_ackButton
  2903 ;;		_resetKeypad
  2904 ;; This function uses a non-reentrant model
  2905 ;;
  2906                           
  2907                           
  2908                           ;psect for function _rs485Tx
  2909  0487                     _rs485Tx:	
  2910                           
  2911                           ;sysFunc.c: 33: PORTCbits.RC5 = 1;
  2912                           
  2913                           ;incstack = 0
  2914                           ; Regs used in _rs485Tx: []
  2915  0487  1283               	bcf	3,5	;RP0=0, select bank0
  2916  0488  1303               	bcf	3,6	;RP1=0, select bank0
  2917  0489  1687               	bsf	7,5	;volatile
  2918  048A  0008               	return
  2919  048B                     __end_of_rs485Tx:	
  2920                           
  2921                           	psect	text14
  2922  048B                     __ptext14:	
  2923 ;; *************** function _rs485Rx *****************
  2924 ;; Defined at:
  2925 ;;		line 36 in file "sysFunc.c"
  2926 ;; Parameters:    Size  Location     Type
  2927 ;;		None
  2928 ;; Auto vars:     Size  Location     Type
  2929 ;;		None
  2930 ;; Return value:  Size  Location     Type
  2931 ;;                  1    wreg      void 
  2932 ;; Registers used:
  2933 ;;		None
  2934 ;; Tracked objects:
  2935 ;;		On entry : 0/0
  2936 ;;		On exit  : 0/0
  2937 ;;		Unchanged: 0/0
  2938 ;; Data sizes:     COMMON   BANK0   BANK1
  2939 ;;      Params:         0       0       0
  2940 ;;      Locals:         0       0       0
  2941 ;;      Temps:          0       0       0
  2942 ;;      Totals:         0       0       0
  2943 ;;Total ram usage:        0 bytes
  2944 ;; Hardware stack levels used:    1
  2945 ;; Hardware stack levels required when called:    2
  2946 ;; This function calls:
  2947 ;;		Nothing
  2948 ;; This function is called by:
  2949 ;;		_main
  2950 ;;		_gpioInit
  2951 ;;		_sendButtonInfo
  2952 ;;		_ackButton
  2953 ;;		_resetKeypad
  2954 ;; This function uses a non-reentrant model
  2955 ;;
  2956                           
  2957                           
  2958                           ;psect for function _rs485Rx
  2959  048B                     _rs485Rx:	
  2960                           
  2961                           ;sysFunc.c: 38: PORTCbits.RC5 = 0;
  2962                           
  2963                           ;incstack = 0
  2964                           ; Regs used in _rs485Rx: []
  2965  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2966  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2967  048D  1287               	bcf	7,5	;volatile
  2968  048E  0008               	return
  2969  048F                     __end_of_rs485Rx:	
  2970                           
  2971                           	psect	text15
  2972  03A5                     __ptext15:	
  2973 ;; *************** function _USARTReadBuffer *****************
  2974 ;; Defined at:
  2975 ;;		line 205 in file "uart.c"
  2976 ;; Parameters:    Size  Location     Type
  2977 ;;  buff            1    wreg     PTR unsigned char 
  2978 ;;		 -> checkCommandRx@buffer(6), 
  2979 ;;  len             2    2[BANK0 ] unsigned int 
  2980 ;; Auto vars:     Size  Location     Type
  2981 ;;  buff            1    6[BANK0 ] PTR unsigned char 
  2982 ;;		 -> checkCommandRx@buffer(6), 
  2983 ;;  i               2    7[BANK0 ] unsigned int 
  2984 ;; Return value:  Size  Location     Type
  2985 ;;                  1    wreg      void 
  2986 ;; Registers used:
  2987 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2988 ;; Tracked objects:
  2989 ;;		On entry : 0/0
  2990 ;;		On exit  : 0/0
  2991 ;;		Unchanged: 0/0
  2992 ;; Data sizes:     COMMON   BANK0   BANK1
  2993 ;;      Params:         0       2       0
  2994 ;;      Locals:         0       3       0
  2995 ;;      Temps:          0       2       0
  2996 ;;      Totals:         0       7       0
  2997 ;;Total ram usage:        7 bytes
  2998 ;; Hardware stack levels used:    1
  2999 ;; Hardware stack levels required when called:    3
  3000 ;; This function calls:
  3001 ;;		_USARTReadData
  3002 ;; This function is called by:
  3003 ;;		_checkCommandRx
  3004 ;; This function uses a non-reentrant model
  3005 ;;
  3006                           
  3007                           
  3008                           ;psect for function _USARTReadBuffer
  3009  03A5                     _USARTReadBuffer:	
  3010                           
  3011                           ;incstack = 0
  3012                           ; Regs used in _USARTReadBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3013                           ;USARTReadBuffer@buff stored from wreg
  3014  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3015  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3016  03A7  00C3               	movwf	USARTReadBuffer@buff
  3017                           
  3018                           ;uart.c: 207: uint16_t i;
  3019                           ;uart.c: 208: for(i=0;i<len;i++)
  3020  03A8  01C4               	clrf	USARTReadBuffer@i
  3021  03A9  01C5               	clrf	USARTReadBuffer@i+1
  3022  03AA                     l1680:	
  3023  03AA  0840               	movf	USARTReadBuffer@len+1,w
  3024  03AB  0245               	subwf	USARTReadBuffer@i+1,w
  3025  03AC  1D03               	skipz
  3026  03AD  2BB0               	goto	u715
  3027  03AE  083F               	movf	USARTReadBuffer@len,w
  3028  03AF  0244               	subwf	USARTReadBuffer@i,w
  3029  03B0                     u715:	
  3030  03B0  1803               	btfsc	3,0
  3031  03B1  0008               	return
  3032                           
  3033                           ;uart.c: 209: {
  3034                           ;uart.c: 210: buff[i]=USARTReadData();
  3035  03B2  2360               	fcall	_USARTReadData
  3036  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  3037  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  3038  03B5  00C1               	movwf	??_USARTReadBuffer
  3039  03B6  0844               	movf	USARTReadBuffer@i,w
  3040  03B7  0743               	addwf	USARTReadBuffer@buff,w
  3041  03B8  00C2               	movwf	??_USARTReadBuffer+1
  3042  03B9  0842               	movf	??_USARTReadBuffer+1,w
  3043  03BA  0084               	movwf	4
  3044  03BB  0841               	movf	??_USARTReadBuffer,w
  3045  03BC  1383               	bcf	3,7	;select IRP bank0
  3046  03BD  0080               	movwf	0
  3047  03BE  3001               	movlw	1
  3048  03BF  07C4               	addwf	USARTReadBuffer@i,f
  3049  03C0  1803               	skipnc
  3050  03C1  0AC5               	incf	USARTReadBuffer@i+1,f
  3051  03C2  3000               	movlw	0
  3052  03C3  07C5               	addwf	USARTReadBuffer@i+1,f
  3053  03C4  2BAA               	goto	l1680
  3054  03C5                     __end_of_USARTReadBuffer:	
  3055                           
  3056                           	psect	text16
  3057  0360                     __ptext16:	
  3058 ;; *************** function _USARTReadData *****************
  3059 ;; Defined at:
  3060 ;;		line 121 in file "uart.c"
  3061 ;; Parameters:    Size  Location     Type
  3062 ;;		None
  3063 ;; Auto vars:     Size  Location     Type
  3064 ;;  data            1    1[BANK0 ] unsigned char 
  3065 ;; Return value:  Size  Location     Type
  3066 ;;                  1    wreg      unsigned char 
  3067 ;; Registers used:
  3068 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3069 ;; Tracked objects:
  3070 ;;		On entry : 0/0
  3071 ;;		On exit  : 0/0
  3072 ;;		Unchanged: 0/0
  3073 ;; Data sizes:     COMMON   BANK0   BANK1
  3074 ;;      Params:         0       0       0
  3075 ;;      Locals:         0       1       0
  3076 ;;      Temps:          0       1       0
  3077 ;;      Totals:         0       2       0
  3078 ;;Total ram usage:        2 bytes
  3079 ;; Hardware stack levels used:    1
  3080 ;; Hardware stack levels required when called:    2
  3081 ;; This function calls:
  3082 ;;		Nothing
  3083 ;; This function is called by:
  3084 ;;		_USARTReadBuffer
  3085 ;;		_USARTFlushBuffer
  3086 ;; This function uses a non-reentrant model
  3087 ;;
  3088                           
  3089                           
  3090                           ;psect for function _USARTReadData
  3091  0360                     _USARTReadData:	
  3092                           
  3093                           ;uart.c: 123: char data;
  3094                           ;uart.c: 126: if(UQFront==-1)
  3095                           
  3096                           ;incstack = 0
  3097                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
  3098  0360  0A7B               	incf	_UQFront,w	;volatile
  3099  0361  1D03               	btfss	3,2
  3100  0362  2B65               	goto	l1386
  3101                           
  3102                           ;uart.c: 127: return 0;
  3103  0363  3000               	movlw	0
  3104  0364  0008               	return
  3105  0365                     l1386:	
  3106                           
  3107                           ;uart.c: 129: data=URBuff[UQFront];
  3108  0365  087B               	movf	_UQFront,w
  3109  0366  3E20               	addlw	(low (_URBuff| 0))& (0+255)
  3110  0367  0084               	movwf	4
  3111  0368  1383               	bcf	3,7	;select IRP bank0
  3112  0369  0800               	movf	0,w
  3113  036A  1283               	bcf	3,5	;RP0=0, select bank0
  3114  036B  1303               	bcf	3,6	;RP1=0, select bank0
  3115  036C  00BD               	movwf	??_USARTReadData
  3116  036D  083D               	movf	??_USARTReadData,w
  3117  036E  00BE               	movwf	USARTReadData@data
  3118                           
  3119                           ;uart.c: 131: if(UQFront==UQEnd)
  3120  036F  087B               	movf	_UQFront,w	;volatile
  3121  0370  067A               	xorwf	_UQEnd,w	;volatile
  3122  0371  1D03               	skipz
  3123  0372  2B79               	goto	l1392
  3124                           
  3125                           ;uart.c: 132: {
  3126                           ;uart.c: 135: UQFront=UQEnd=-1;
  3127  0373  30FF               	movlw	255
  3128  0374  00FA               	movwf	_UQEnd	;volatile
  3129  0375  00BD               	movwf	??_USARTReadData
  3130  0376  083D               	movf	??_USARTReadData,w
  3131  0377  00FB               	movwf	_UQFront	;volatile
  3132                           
  3133                           ;uart.c: 136: }
  3134  0378  2B81               	goto	l1396
  3135  0379                     l1392:	
  3136                           
  3137                           ;uart.c: 137: else
  3138                           ;uart.c: 138: {
  3139                           ;uart.c: 139: UQFront++;
  3140  0379  3001               	movlw	1
  3141  037A  00BD               	movwf	??_USARTReadData
  3142  037B  083D               	movf	??_USARTReadData,w
  3143  037C  07FB               	addwf	_UQFront,f	;volatile
  3144                           
  3145                           ;uart.c: 141: if(UQFront==12)
  3146  037D  300C               	movlw	12
  3147  037E  067B               	xorwf	_UQFront,w	;volatile
  3148  037F  1903               	btfsc	3,2
  3149                           
  3150                           ;uart.c: 142: UQFront=0;
  3151  0380  01FB               	clrf	_UQFront	;volatile
  3152  0381                     l1396:	
  3153                           
  3154                           ;uart.c: 143: }
  3155                           ;uart.c: 145: return data;
  3156  0381  083E               	movf	USARTReadData@data,w
  3157  0382  0008               	return
  3158  0383                     __end_of_USARTReadData:	
  3159                           
  3160                           	psect	text17
  3161  040F                     __ptext17:	
  3162 ;; *************** function _USARTWriteLine *****************
  3163 ;; Defined at:
  3164 ;;		line 88 in file "uart.c"
  3165 ;; Parameters:    Size  Location     Type
  3166 ;;  str             1    wreg     PTR unsigned char 
  3167 ;;		 -> STR_1(11), 
  3168 ;;  len             1    4[BANK0 ] unsigned char 
  3169 ;; Auto vars:     Size  Location     Type
  3170 ;;  str             1    6[BANK0 ] PTR unsigned char 
  3171 ;;		 -> STR_1(11), 
  3172 ;; Return value:  Size  Location     Type
  3173 ;;                  1    wreg      void 
  3174 ;; Registers used:
  3175 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3176 ;; Tracked objects:
  3177 ;;		On entry : 0/0
  3178 ;;		On exit  : 0/0
  3179 ;;		Unchanged: 0/0
  3180 ;; Data sizes:     COMMON   BANK0   BANK1
  3181 ;;      Params:         0       1       0
  3182 ;;      Locals:         0       1       0
  3183 ;;      Temps:          0       1       0
  3184 ;;      Totals:         0       3       0
  3185 ;;Total ram usage:        3 bytes
  3186 ;; Hardware stack levels used:    1
  3187 ;; Hardware stack levels required when called:    4
  3188 ;; This function calls:
  3189 ;;		_USARTWriteChar
  3190 ;;		_USARTWriteString
  3191 ;; This function is called by:
  3192 ;;		_main
  3193 ;; This function uses a non-reentrant model
  3194 ;;
  3195                           
  3196                           
  3197                           ;psect for function _USARTWriteLine
  3198  040F                     _USARTWriteLine:	
  3199                           
  3200                           ;incstack = 0
  3201                           ; Regs used in _USARTWriteLine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3202                           ;USARTWriteLine@str stored from wreg
  3203  040F  1283               	bcf	3,5	;RP0=0, select bank0
  3204  0410  1303               	bcf	3,6	;RP1=0, select bank0
  3205  0411  00C3               	movwf	USARTWriteLine@str
  3206                           
  3207                           ;uart.c: 90: USARTWriteChar('\r');
  3208  0412  300D               	movlw	13
  3209  0413  2463               	fcall	_USARTWriteChar
  3210                           
  3211                           ;uart.c: 91: USARTWriteChar('\n');
  3212  0414  300A               	movlw	10
  3213  0415  2463               	fcall	_USARTWriteChar
  3214                           
  3215                           ;uart.c: 93: USARTWriteString(str, len);
  3216  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3217  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3218  0418  0843               	movf	USARTWriteLine@str,w
  3219  0419  00BE               	movwf	USARTWriteString@str
  3220  041A  3000               	movlw	0
  3221  041B  1D03               	btfss	3,2
  3222  041C  3080               	movlw	128
  3223  041D  00BF               	movwf	USARTWriteString@str+1
  3224  041E  0841               	movf	USARTWriteLine@len,w
  3225  041F  00C2               	movwf	??_USARTWriteLine
  3226  0420  0842               	movf	??_USARTWriteLine,w
  3227  0421  00C0               	movwf	USARTWriteString@len
  3228  0422  23F9               	fcall	_USARTWriteString
  3229  0423  0008               	return
  3230  0424                     __end_of_USARTWriteLine:	
  3231                           
  3232                           	psect	text18
  3233  03F9                     __ptext18:	
  3234 ;; *************** function _USARTWriteString *****************
  3235 ;; Defined at:
  3236 ;;		line 78 in file "uart.c"
  3237 ;; Parameters:    Size  Location     Type
  3238 ;;  str             2    1[BANK0 ] PTR unsigned char 
  3239 ;;		 -> resetKeypad@buffer(6), ackButton@buffer(6), sendButtonInfo@buffer(6), STR_1(11), 
  3240 ;;  len             1    3[BANK0 ] unsigned char 
  3241 ;; Auto vars:     Size  Location     Type
  3242 ;;		None
  3243 ;; Return value:  Size  Location     Type
  3244 ;;                  1    wreg      void 
  3245 ;; Registers used:
  3246 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3247 ;; Tracked objects:
  3248 ;;		On entry : 0/0
  3249 ;;		On exit  : 0/0
  3250 ;;		Unchanged: 0/0
  3251 ;; Data sizes:     COMMON   BANK0   BANK1
  3252 ;;      Params:         0       3       0
  3253 ;;      Locals:         0       0       0
  3254 ;;      Temps:          0       0       0
  3255 ;;      Totals:         0       3       0
  3256 ;;Total ram usage:        3 bytes
  3257 ;; Hardware stack levels used:    1
  3258 ;; Hardware stack levels required when called:    3
  3259 ;; This function calls:
  3260 ;;		_USARTWriteChar
  3261 ;; This function is called by:
  3262 ;;		_USARTWriteLine
  3263 ;;		_sendButtonInfo
  3264 ;;		_ackButton
  3265 ;;		_resetKeypad
  3266 ;; This function uses a non-reentrant model
  3267 ;;
  3268                           
  3269                           
  3270                           ;psect for function _USARTWriteString
  3271  03F9                     _USARTWriteString:	
  3272  03F9                     l1374:	
  3273                           ;uart.c: 80: while(len)
  3274                           
  3275                           ;incstack = 0
  3276                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3277                           
  3278  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  3279  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  3280  03FB  0840               	movf	USARTWriteString@len,w
  3281  03FC  1903               	btfsc	3,2
  3282  03FD  0008               	return
  3283                           
  3284                           ;uart.c: 81: {
  3285                           ;uart.c: 82: USARTWriteChar(*str);
  3286  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  3287  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  3288  0400  083F               	movf	USARTWriteString@str+1,w
  3289  0401  00FF               	movwf	127
  3290  0402  083E               	movf	USARTWriteString@str,w
  3291  0403  0084               	movwf	4
  3292  0404  23C5               	fcall	stringtab
  3293  0405  2463               	fcall	_USARTWriteChar
  3294                           
  3295                           ;uart.c: 83: str++;
  3296  0406  3001               	movlw	1
  3297  0407  1283               	bcf	3,5	;RP0=0, select bank0
  3298  0408  1303               	bcf	3,6	;RP1=0, select bank0
  3299  0409  07BE               	addwf	USARTWriteString@str,f
  3300  040A  1803               	skipnc
  3301  040B  0ABF               	incf	USARTWriteString@str+1,f
  3302                           
  3303                           ;uart.c: 84: --len;
  3304  040C  3001               	movlw	1
  3305  040D  02C0               	subwf	USARTWriteString@len,f
  3306  040E  2BF9               	goto	l1374
  3307  040F                     __end_of_USARTWriteString:	
  3308                           
  3309                           	psect	text19
  3310  0463                     __ptext19:	
  3311 ;; *************** function _USARTWriteChar *****************
  3312 ;; Defined at:
  3313 ;;		line 72 in file "uart.c"
  3314 ;; Parameters:    Size  Location     Type
  3315 ;;  ch              1    wreg     unsigned char 
  3316 ;; Auto vars:     Size  Location     Type
  3317 ;;  ch              1    0[BANK0 ] unsigned char 
  3318 ;; Return value:  Size  Location     Type
  3319 ;;                  1    wreg      void 
  3320 ;; Registers used:
  3321 ;;		wreg
  3322 ;; Tracked objects:
  3323 ;;		On entry : 0/0
  3324 ;;		On exit  : 0/0
  3325 ;;		Unchanged: 0/0
  3326 ;; Data sizes:     COMMON   BANK0   BANK1
  3327 ;;      Params:         0       0       0
  3328 ;;      Locals:         0       1       0
  3329 ;;      Temps:          0       0       0
  3330 ;;      Totals:         0       1       0
  3331 ;;Total ram usage:        1 bytes
  3332 ;; Hardware stack levels used:    1
  3333 ;; Hardware stack levels required when called:    2
  3334 ;; This function calls:
  3335 ;;		Nothing
  3336 ;; This function is called by:
  3337 ;;		_USARTWriteString
  3338 ;;		_USARTWriteLine
  3339 ;;		_USARTWriteInt
  3340 ;;		_USARTGotoNewLine
  3341 ;; This function uses a non-reentrant model
  3342 ;;
  3343                           
  3344                           
  3345                           ;psect for function _USARTWriteChar
  3346  0463                     _USARTWriteChar:	
  3347                           
  3348                           ;incstack = 0
  3349                           ; Regs used in _USARTWriteChar: [wreg]
  3350                           ;USARTWriteChar@ch stored from wreg
  3351  0463  1283               	bcf	3,5	;RP0=0, select bank0
  3352  0464  1303               	bcf	3,6	;RP1=0, select bank0
  3353  0465  00BD               	movwf	USARTWriteChar@ch
  3354                           
  3355                           ;uart.c: 74: TXREG=ch;
  3356  0466  083D               	movf	USARTWriteChar@ch,w
  3357  0467  0099               	movwf	25	;volatile
  3358  0468                     l81:	
  3359                           ;uart.c: 75: while(!TXSTAbits.TRMT);
  3360                           
  3361  0468  1683               	bsf	3,5	;RP0=1, select bank1
  3362  0469  1303               	bcf	3,6	;RP1=0, select bank1
  3363  046A  1898               	btfsc	24,1	;volatile
  3364  046B  0008               	return
  3365  046C  2C68               	goto	l81
  3366  046D                     __end_of_USARTWriteChar:	
  3367                           
  3368                           	psect	text20
  3369  0424                     __ptext20:	
  3370 ;; *************** function _ISR *****************
  3371 ;; Defined at:
  3372 ;;		line 6 in file "isr.c"
  3373 ;; Parameters:    Size  Location     Type
  3374 ;;		None
  3375 ;; Auto vars:     Size  Location     Type
  3376 ;;		None
  3377 ;; Return value:  Size  Location     Type
  3378 ;;                  1    wreg      void 
  3379 ;; Registers used:
  3380 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3381 ;; Tracked objects:
  3382 ;;		On entry : 0/0
  3383 ;;		On exit  : 0/0
  3384 ;;		Unchanged: 0/0
  3385 ;; Data sizes:     COMMON   BANK0   BANK1
  3386 ;;      Params:         0       0       0
  3387 ;;      Locals:         0       0       0
  3388 ;;      Temps:          5       0       0
  3389 ;;      Totals:         5       0       0
  3390 ;;Total ram usage:        5 bytes
  3391 ;; Hardware stack levels used:    1
  3392 ;; Hardware stack levels required when called:    1
  3393 ;; This function calls:
  3394 ;;		_USARTHandleRxInt
  3395 ;; This function is called by:
  3396 ;;		Interrupt level 1
  3397 ;; This function uses a non-reentrant model
  3398 ;;
  3399                           
  3400                           
  3401                           ;psect for function _ISR
  3402  0424                     _ISR:	
  3403                           
  3404                           ;isr.c: 8: if (PIR1bits.RCIF)
  3405  0424  1E8C               	btfss	12,5	;volatile
  3406  0425  2C2E               	goto	i1l292
  3407                           
  3408                           ;isr.c: 9: {
  3409                           ;isr.c: 10: rxCount++;
  3410  0426  3001               	movlw	1
  3411  0427  00F5               	movwf	??_ISR
  3412  0428  0875               	movf	??_ISR,w
  3413  0429  07B4               	addwf	_rxCount,f
  3414                           
  3415                           ;isr.c: 11: USARTHandleRxInt();
  3416  042A  229C               	fcall	_USARTHandleRxInt
  3417                           
  3418                           ;isr.c: 12: PIR1bits.RCIF = 0;
  3419  042B  1283               	bcf	3,5	;RP0=0, select bank0
  3420  042C  1303               	bcf	3,6	;RP1=0, select bank0
  3421  042D  128C               	bcf	12,5	;volatile
  3422  042E                     i1l292:	
  3423                           ;isr.c: 13: return;
  3424                           
  3425  042E  0879               	movf	??_ISR+4,w
  3426  042F  00FF               	movwf	127
  3427  0430  0878               	movf	??_ISR+3,w
  3428  0431  008A               	movwf	10
  3429  0432  0877               	movf	??_ISR+2,w
  3430  0433  0084               	movwf	4
  3431  0434  0E76               	swapf	(??_ISR+1)^(0+-128),w
  3432  0435  0083               	movwf	3
  3433  0436  0EFE               	swapf	126,f
  3434  0437  0E7E               	swapf	126,w
  3435  0438  0009               	retfie
  3436  0439                     __end_of_ISR:	
  3437                           
  3438                           	psect	intentry
  3439  0004                     __pintentry:	
  3440                           ;incstack = 0
  3441                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3442                           
  3443  0004                     interrupt_function:	
  3444  007E                     saved_w	set	btemp
  3445  0004  00FE               	movwf	btemp
  3446  0005  0E03               	swapf	3,w
  3447  0006  00F6               	movwf	??_ISR+1
  3448  0007  0804               	movf	4,w
  3449  0008  00F7               	movwf	??_ISR+2
  3450  0009  080A               	movf	10,w
  3451  000A  00F8               	movwf	??_ISR+3
  3452  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3453  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3454  000D  087F               	movf	btemp+1,w
  3455  000E  00F9               	movwf	??_ISR+4
  3456  000F  2C24               	ljmp	_ISR
  3457                           
  3458                           	psect	text21
  3459  029C                     __ptext21:	
  3460 ;; *************** function _USARTHandleRxInt *****************
  3461 ;; Defined at:
  3462 ;;		line 96 in file "uart.c"
  3463 ;; Parameters:    Size  Location     Type
  3464 ;;		None
  3465 ;; Auto vars:     Size  Location     Type
  3466 ;;  data            1    4[COMMON] unsigned char 
  3467 ;; Return value:  Size  Location     Type
  3468 ;;                  1    wreg      void 
  3469 ;; Registers used:
  3470 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3471 ;; Tracked objects:
  3472 ;;		On entry : 0/0
  3473 ;;		On exit  : 0/0
  3474 ;;		Unchanged: 0/0
  3475 ;; Data sizes:     COMMON   BANK0   BANK1
  3476 ;;      Params:         0       0       0
  3477 ;;      Locals:         1       0       0
  3478 ;;      Temps:          4       0       0
  3479 ;;      Totals:         5       0       0
  3480 ;;Total ram usage:        5 bytes
  3481 ;; Hardware stack levels used:    1
  3482 ;; This function calls:
  3483 ;;		Nothing
  3484 ;; This function is called by:
  3485 ;;		_ISR
  3486 ;; This function uses a non-reentrant model
  3487 ;;
  3488                           
  3489                           
  3490                           ;psect for function _USARTHandleRxInt
  3491  029C                     _USARTHandleRxInt:	
  3492                           
  3493                           ;uart.c: 100: char data=RCREG;
  3494                           
  3495                           ;incstack = 0
  3496                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
  3497  029C  1283               	bcf	3,5	;RP0=0, select bank0
  3498  029D  1303               	bcf	3,6	;RP1=0, select bank0
  3499  029E  081A               	movf	26,w	;volatile
  3500  029F  00F0               	movwf	??_USARTHandleRxInt
  3501  02A0  0870               	movf	??_USARTHandleRxInt,w
  3502  02A1  00F4               	movwf	USARTHandleRxInt@data
  3503                           
  3504                           ;uart.c: 103: if(((UQEnd==12-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  3505  02A2  300B               	movlw	11
  3506  02A3  067A               	xorwf	_UQEnd,w	;volatile
  3507  02A4  1903               	btfsc	3,2
  3508  02A5  087B               	movf	_UQFront,w	;volatile
  3509  02A6  1903               	btfsc	3,2
  3510  02A7  2ABD               	goto	i1l1744
  3511  02A8  087B               	movf	_UQFront,w	;volatile
  3512  02A9  00F0               	movwf	??_USARTHandleRxInt
  3513  02AA  01F1               	clrf	??_USARTHandleRxInt+1
  3514  02AB  1BF0               	btfsc	??_USARTHandleRxInt,7
  3515  02AC  03F1               	decf	??_USARTHandleRxInt+1,f
  3516  02AD  3001               	movlw	1
  3517  02AE  077A               	addwf	_UQEnd,w	;volatile
  3518  02AF  00F2               	movwf	??_USARTHandleRxInt+2
  3519  02B0  01F3               	clrf	??_USARTHandleRxInt+3
  3520  02B1  1803               	skipnc
  3521  02B2  0AF3               	incf	??_USARTHandleRxInt+3,f
  3522  02B3  1BFA               	btfsc	_UQEnd,7	;volatile
  3523  02B4  03F3               	decf	??_USARTHandleRxInt+3,f
  3524  02B5  0871               	movf	??_USARTHandleRxInt+1,w
  3525  02B6  0673               	xorwf	??_USARTHandleRxInt+3,w
  3526  02B7  1D03               	skipz
  3527  02B8  2ABB               	goto	u78_25
  3528  02B9  0870               	movf	??_USARTHandleRxInt,w
  3529  02BA  0672               	xorwf	??_USARTHandleRxInt+2,w
  3530  02BB                     u78_25:	
  3531  02BB  1D03               	skipz
  3532  02BC  2AC5               	goto	i1l1748
  3533  02BD                     i1l1744:	
  3534                           
  3535                           ;uart.c: 104: {
  3536                           ;uart.c: 106: UQFront++;
  3537  02BD  3001               	movlw	1
  3538  02BE  00F0               	movwf	??_USARTHandleRxInt
  3539  02BF  0870               	movf	??_USARTHandleRxInt,w
  3540  02C0  07FB               	addwf	_UQFront,f	;volatile
  3541                           
  3542                           ;uart.c: 107: if(UQFront==12) UQFront=0;
  3543  02C1  300C               	movlw	12
  3544  02C2  067B               	xorwf	_UQFront,w	;volatile
  3545  02C3  1903               	btfsc	3,2
  3546  02C4  01FB               	clrf	_UQFront	;volatile
  3547  02C5                     i1l1748:	
  3548                           
  3549                           ;uart.c: 108: }
  3550                           ;uart.c: 110: if(UQEnd==12-1)
  3551  02C5  300B               	movlw	11
  3552  02C6  067A               	xorwf	_UQEnd,w	;volatile
  3553  02C7  1D03               	btfss	3,2
  3554  02C8  2ACB               	goto	i1l1752
  3555                           
  3556                           ;uart.c: 111: UQEnd=0;
  3557  02C9  01FA               	clrf	_UQEnd	;volatile
  3558  02CA  2ACF               	goto	i1l1754
  3559  02CB                     i1l1752:	
  3560                           
  3561                           ;uart.c: 112: else
  3562                           ;uart.c: 113: UQEnd++;
  3563  02CB  3001               	movlw	1
  3564  02CC  00F0               	movwf	??_USARTHandleRxInt
  3565  02CD  0870               	movf	??_USARTHandleRxInt,w
  3566  02CE  07FA               	addwf	_UQEnd,f	;volatile
  3567  02CF                     i1l1754:	
  3568                           
  3569                           ;uart.c: 115: URBuff[UQEnd]=data;
  3570  02CF  0874               	movf	USARTHandleRxInt@data,w
  3571  02D0  00F0               	movwf	??_USARTHandleRxInt
  3572  02D1  087A               	movf	_UQEnd,w
  3573  02D2  3E20               	addlw	(low (_URBuff| 0))& (0+255)
  3574  02D3  0084               	movwf	4
  3575  02D4  0870               	movf	??_USARTHandleRxInt,w
  3576  02D5  1383               	bcf	3,7	;select IRP bank0
  3577  02D6  0080               	movwf	0
  3578                           
  3579                           ;uart.c: 117: if(UQFront==-1) UQFront=0;
  3580  02D7  0A7B               	incf	_UQFront,w	;volatile
  3581  02D8  1D03               	btfss	3,2
  3582  02D9  0008               	return
  3583  02DA  01FB               	clrf	_UQFront	;volatile
  3584  02DB  0008               	return
  3585  02DC                     __end_of_USARTHandleRxInt:	
  3586  007E                     btemp	set	126	;btemp
  3587  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         31
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     23      52
    BANK1            32      0       0

Pointer List with Targets:

    runProtocol@commandRecv	PTR struct . size(1) Largest target is 6
		 -> recvCommand(BANK0[6]), 

    sortRxFrame@commandStruct	PTR struct . size(1) Largest target is 6
		 -> recvCommand(BANK0[6]), 

    sortRxFrame@rxBuf	PTR unsigned char  size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    sortRxFrame@command	PTR struct . size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    USARTReadBuffer@buff	PTR unsigned char  size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    USARTWriteLine@str	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    USARTWriteString@str	PTR unsigned char  size(2) Largest target is 11
		 -> resetKeypad@buffer(BANK0[6]), ackButton@buffer(BANK0[6]), sendButtonInfo@buffer(BANK0[6]), STR_1(CODE[11]), 

    getKey@keypadState	PTR struct . size(1) Largest target is 2
		 -> keypadState(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    _main->_checkCommandRx
    _scanKeypad->_getKey
    _controllerInit->_USARTInit
    _checkCommandRx->_runProtocol
    _runProtocol->_sendButtonInfo
    _sendButtonInfo->_USARTWriteString
    _resetKeypad->_USARTWriteString
    _ackButton->_USARTWriteString
    _USARTReadBuffer->_USARTReadData
    _USARTWriteLine->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4085
                                             22 BANK0      1     1      0
                     _USARTWriteLine
                     _checkCommandRx
                     _controllerInit
                            _rs485Rx
                            _rs485Tx
                         _scanKeypad
 ---------------------------------------------------------------------------------
 (1) _scanKeypad                                           1     1      0     775
                                              3 BANK0      1     1      0
                             _getKey
 ---------------------------------------------------------------------------------
 (2) _getKey                                               3     3      0     775
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _controllerInit                                       0     0      0      75
                          _USARTInit
                           _gpioInit
                         _initKeypad
 ---------------------------------------------------------------------------------
 (2) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpioInit                                             0     0      0       0
                            _rs485Rx
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                            3     1      2      75
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _checkCommandRx                                       7     7      0    2597
                                             15 BANK0      7     7      0
                    _USARTReadBuffer
                        _runProtocol
                        _sortRxFrame
 ---------------------------------------------------------------------------------
 (2) _sortRxFrame                                          6     5      1     285
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _runProtocol                                          3     3      0    2068
                                             12 BANK0      3     3      0
                          _ackButton
                        _resetKeypad
                     _sendButtonInfo
 ---------------------------------------------------------------------------------
 (3) _sendButtonInfo                                       8     8      0     658
                                              4 BANK0      8     8      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (3) _resetKeypad                                          7     7      0     636
                                              4 BANK0      7     7      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (3) _ackButton                                            7     7      0     636
                                              4 BANK0      7     7      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (1) _rs485Tx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rs485Rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USARTReadBuffer                                      7     5      2     193
                                              2 BANK0      7     5      2
                      _USARTReadData
 ---------------------------------------------------------------------------------
 (3) _USARTReadData                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTWriteLine                                       3     2      1     638
                                              4 BANK0      3     2      1
                     _USARTWriteChar
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (4) _USARTWriteString                                     3     0      3     492
                                              1 BANK0      3     0      3
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (5) _USARTWriteChar                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  5     5      0      23
                                              5 COMMON     5     5      0
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (7) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTWriteLine
     _USARTWriteChar
     _USARTWriteString
       _USARTWriteChar
   _checkCommandRx
     _USARTReadBuffer
       _USARTReadData
     _runProtocol
       _ackButton
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
       _resetKeypad
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
       _sendButtonInfo
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
     _sortRxFrame
   _controllerInit
     _USARTInit
     _gpioInit
       _rs485Rx
     _initKeypad
   _rs485Rx
   _rs485Tx
   _scanKeypad
     _getKey

 _ISR (ROOT)
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     17      34       4       65.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            20      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
ABS                  0      0      42       7        0.0%
DATA                 0      0      42       8        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sat Aug 19 22:14:00 2017

                        pc 0002                _runProtocol 02DC                __CFG_CP$OFF 0000  
                       l21 0076                         l31 012E                         l40 01C6  
                       l24 00B4                         l16 003A                         l33 014C  
                       l42 01E4                         l26 00D2                         l35 016A  
                       l19 0058                         l28 00F0                         l38 01A8  
                       l81 0468                         l74 0244                         fsr 0004  
       USARTInit@baud_rate 003D                        l253 0313                        l239 0294  
                      _GIE 005F               __CFG_CPD$OFF 0000                        _ISR 0424  
                      u715 03B0             ?_USARTReadData 0070                        fsr0 0004  
              _sortRxFrame 0256    __size_of_controllerInit 000A                        indf 0000  
             __CFG_IESO$ON 0000               __CFG_LVP$OFF 0000                       ?_ISR 0070  
                     l2032 0230                       l2034 0235                       l2036 023A  
                     l2038 023F                       l1508 0094                       l1374 03F9  
                     l1710 0297                       l1550 010E                       l1392 0379  
                     l1720 02F4                       l1386 0365                       l1730 0308  
                     l1706 028F                       l1650 0219                       l1396 0381  
                     l1724 02FE                       l1716 02E9                       l1652 021B  
                     l1636 0202                       l1646 0215                       l1680 03AA  
                     l1648 0217                       l1656 0220                       l1592 0188  
                     l1858 0456                       STR_1 03D5                       _BRGH 04C2  
                     u1207 00BC                       u1217 00DA                       u1307 01EC  
                     u1227 00F8                       u1237 0118                       u1157 0026  
                     u1247 0136                       u1167 0042                       u1257 0154  
                     u1177 0060                       u1267 0172                       u1187 007E  
                     u1277 0192                       u1197 009E                       u1287 01B0  
                     u1297 01CE               __CFG_WRT$OFF 0000     __end_of_USARTWriteChar 046D  
          ?_checkCommandRx 0070     __end_of_USARTWriteLine 0424                       _main 044B  
                     btemp 007E          USARTReadData@data 003E                       start 0010  
            __CFG_MCLRE$ON 0000                      ??_ISR 0075          resetKeypad@buffer 0042  
        ?_USARTHandleRxInt 0070                      ?_main 0070         ??_USARTHandleRxInt 0070  
            __CFG_WDTE$OFF 0000           USARTWriteChar@ch 003D                      i1l292 042E  
                    _RCREG 001A             _sendButtonInfo 0383                      _SPBRG 0099  
                    _PORTB 0006            __end_of_rs485Rx 048F                      _TRISB 0086  
          __end_of_rs485Tx 048B                      u78_25 02BB                      _TXREG 0019  
                    _UQEnd 007A           ?_USARTReadBuffer 003F             __CFG_FCMEN$OFF 0000  
          ackButton@buffer 0042             __CFG_BOREN$OFF 0000                      pclath 000A  
       __size_of_USARTInit 004C            ?_USARTWriteChar 0070            ?_USARTWriteLine 0041  
                    status 0003                      wtemp0 007E            __initialization 0011  
             __end_of_main 0459            ??_USARTReadData 003D     __end_of_sendButtonInfo 03A5  
                   ??_main 0053         USARTReadBuffer@len 003F                     _ANSELH 0189  
                   i1l1752 02CB                     i1l1744 02BD                     i1l1754 02CF  
                   i1l1748 02C5               ?_resetKeypad 0070                     _URBuff 0020  
           __CFG_PWRTE$OFF 0000          USARTWriteLine@len 0041          USARTWriteLine@str 0043  
         __end_of_gpioInit 047F                     _getKey 0019   __end_of_USARTWriteString 040F  
                ??_rs485Rx 003D                  ??_rs485Tx 003D          __end_of_USARTInit 0256  
          ?_sendButtonInfo 0070             _controllerInit 0459                     saved_w 007E  
  __end_of__initialization 0017         __size_of_ackButton 0026             __pcstackCOMMON 0070  
             ?_runProtocol 0070     __end_of_controllerInit 0463               ?_sortRxFrame 003D  
           _OPTION_REGbits 0081           ??_checkCommandRx 004C              _buttonPressed 007D  
               __pbssBANK0 0020                 __pnvCOMMON 007A                 __pmaintext 044B  
                  ?_getKey 0070                 __pintentry 0004        USARTReadBuffer@buff 0043  
          ?_controllerInit 0070          __end_of_ackButton 0360       sendButtonInfo@buffer 0042  
     sendButtonInfo@button 0048           ??_USARTWriteChar 003D           ??_USARTWriteLine 0042  
       USARTWriteInt@F1616 002C  __size_of_USARTHandleRxInt 0040                 __stringtab 03C5  
                ?_gpioInit 0070                    _UQFront 007B   sortRxFrame@commandStruct 003D  
     __size_of_resetKeypad 0026        _currentKeypadStatus 0031          getKey@keypadState 003F  
               _initKeypad 046D            __size_of_getKey 01F1                 _currentKey 007C  
                  _rs485Rx 048B                    _rs485Tx 0487                 _scanKeypad 0439  
                  __ptext1 0439                    __ptext2 0019                    __ptext3 0459  
                  __ptext4 046D                    __ptext5 0476                    __ptext6 020A  
                  __ptext7 03E0                    __ptext8 0256                    __ptext9 02DC  
             __size_of_ISR 0015                    _lastKey 0033                    _rxCount 0034  
                  clrloop0 0480       end_of_initialization 0017                 ??_gpioInit 003D  
 __size_of_USARTReadBuffer 0020                  _RCSTAbits 0018           ??_sendButtonInfo 0041  
        ?_USARTWriteString 003E       __size_of_runProtocol 0038                  _PORTCbits 0007  
    __end_of_USARTReadData 0383         ??_USARTWriteString 0041                  _USARTInit 020A  
                _TRISCbits 0087       __size_of_sortRxFrame 0046                  _TXSTAbits 0098  
              ?_initKeypad 0070           USARTReadBuffer@i 0044             __end_of_getKey 020A  
              ?_scanKeypad 0070        start_initialization 0011                 ?_USARTInit 003D  
              __end_of_ISR 0439           _USARTHandleRxInt 029C     runProtocol@commandRecv 004B  
 __CFG_FOSC$INTRC_NOCLKOUT 0000         sortRxFrame@command 0042          ??_USARTReadBuffer 0041  
         ??_controllerInit 0040                   ??_getKey 003D                __pbssCOMMON 007C  
                ___latbits 0000              __pcstackBANK0 003D                  _ackButton 033A  
      __size_of_initKeypad 0009        __size_of_scanKeypad 0012          __size_of_gpioInit 0009  
                 ?_rs485Rx 0070                   ?_rs485Tx 0070                  __pstrings 03C5  
              ??_USARTInit 003F                 ?_ackButton 0070              ??_resetKeypad 0041  
        interrupt_function 0004                  clear_ram0 047F                   _PIE1bits 008C  
  __size_of_checkCommandRx 0019                   _PIR1bits 000C                __stringbase 03D4  
__size_of_USARTWriteString 0016       checkCommandRx@buffer 004D    __size_of_USARTWriteChar 000A  
  __size_of_USARTWriteLine 0015               ??_initKeypad 003D        __end_of_resetKeypad 033A  
            ??_runProtocol 0049   __end_of_USARTHandleRxInt 02DC               ??_scanKeypad 0040  
         __size_of_rs485Rx 0004           __size_of_rs485Tx 0004         __end_of__stringtab 03D5  
            ??_sortRxFrame 003E                ??_ackButton 0041                   __ptext10 0383  
                 __ptext11 0314                   __ptext20 0424                   __ptext12 033A  
                 __ptext21 029C                   __ptext13 0487                   __ptext14 048B  
                 __ptext15 03A5                   __ptext16 0360                   __ptext17 040F  
                 __ptext18 03F9                   __ptext19 0463                _keypadState 003B  
        __CFG_BOR4V$BOR40V 0000         __end_of_initKeypad 0476            _USARTReadBuffer 03A5  
                 _gpioInit 0476              __size_of_main 000E                _recvCommand 0035  
       __end_of_scanKeypad 044B     __size_of_USARTReadData 0023        __end_of_runProtocol 0314  
               _INTCONbits 000B    __size_of_sendButtonInfo 0022           sortRxFrame@rxBuf 0040  
      __end_of_sortRxFrame 029C                   intlevel1 0000                _resetKeypad 0314  
           _checkCommandRx 03E0                  stringcode 03CF        USARTWriteString@len 0040  
      USARTWriteString@str 003E              _USARTReadData 0360    __end_of_USARTReadBuffer 03C5  
     USARTHandleRxInt@data 0074                   stringdir 03CF                   stringtab 03C5  
       runProtocol@command 004A             sortRxFrame@err 0041           _USARTWriteString 03F9  
   __end_of_checkCommandRx 03F9             _USARTWriteChar 0463             _USARTWriteLine 040F  
