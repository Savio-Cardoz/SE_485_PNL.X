

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Aug 20 23:27:02 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	swtext1,local,class=CONST,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	text19,local,class=CODE,merge=1,delta=2
    33                           	psect	text20,local,class=CODE,merge=1,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	psect	intentry,global,class=CODE,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2
    37                           	dabs	1,0x7E,2
    38  0000                     
    39                           ; Version 1.42
    40                           ; Generated 13/04/2017 GMT
    41                           ; 
    42                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    43                           ; All rights reserved.
    44                           ; 
    45                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    46                           ; 
    47                           ; Redistribution and use in source and binary forms, with or without modification, are
    48                           ; permitted provided that the following conditions are met:
    49                           ; 
    50                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    51                           ;        conditions and the following disclaimer.
    52                           ; 
    53                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    54                           ;        of conditions and the following disclaimer in the documentation and/or other
    55                           ;        materials provided with the distribution.
    56                           ; 
    57                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    58                           ;        software without specific prior written permission.
    59                           ; 
    60                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    61                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    62                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    63                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    64                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    65                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    66                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    67                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    68                           ; 
    69                           ; 
    70                           ; Code-generator required, PIC16F882 Definitions
    71                           ; 
    72                           ; SFR Addresses
    73  0000                     	;# 
    74  0001                     	;# 
    75  0002                     	;# 
    76  0003                     	;# 
    77  0004                     	;# 
    78  0005                     	;# 
    79  0006                     	;# 
    80  0007                     	;# 
    81  0009                     	;# 
    82  000A                     	;# 
    83  000B                     	;# 
    84  000C                     	;# 
    85  000D                     	;# 
    86  000E                     	;# 
    87  000E                     	;# 
    88  000F                     	;# 
    89  0010                     	;# 
    90  0011                     	;# 
    91  0012                     	;# 
    92  0013                     	;# 
    93  0014                     	;# 
    94  0015                     	;# 
    95  0015                     	;# 
    96  0016                     	;# 
    97  0017                     	;# 
    98  0018                     	;# 
    99  0019                     	;# 
   100  001A                     	;# 
   101  001B                     	;# 
   102  001B                     	;# 
   103  001C                     	;# 
   104  001D                     	;# 
   105  001E                     	;# 
   106  001F                     	;# 
   107  0081                     	;# 
   108  0085                     	;# 
   109  0086                     	;# 
   110  0087                     	;# 
   111  0089                     	;# 
   112  008C                     	;# 
   113  008D                     	;# 
   114  008E                     	;# 
   115  008F                     	;# 
   116  0090                     	;# 
   117  0091                     	;# 
   118  0092                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0093                     	;# 
   122  0094                     	;# 
   123  0095                     	;# 
   124  0096                     	;# 
   125  0097                     	;# 
   126  0098                     	;# 
   127  0099                     	;# 
   128  009A                     	;# 
   129  009B                     	;# 
   130  009C                     	;# 
   131  009D                     	;# 
   132  009E                     	;# 
   133  009F                     	;# 
   134  0105                     	;# 
   135  0107                     	;# 
   136  0108                     	;# 
   137  0109                     	;# 
   138  010C                     	;# 
   139  010C                     	;# 
   140  010D                     	;# 
   141  010E                     	;# 
   142  010F                     	;# 
   143  0185                     	;# 
   144  0187                     	;# 
   145  0188                     	;# 
   146  0189                     	;# 
   147  018C                     	;# 
   148  018D                     	;# 
   149  0000                     	;# 
   150  0001                     	;# 
   151  0002                     	;# 
   152  0003                     	;# 
   153  0004                     	;# 
   154  0005                     	;# 
   155  0006                     	;# 
   156  0007                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0089                     	;# 
   188  008C                     	;# 
   189  008D                     	;# 
   190  008E                     	;# 
   191  008F                     	;# 
   192  0090                     	;# 
   193  0091                     	;# 
   194  0092                     	;# 
   195  0093                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0094                     	;# 
   199  0095                     	;# 
   200  0096                     	;# 
   201  0097                     	;# 
   202  0098                     	;# 
   203  0099                     	;# 
   204  009A                     	;# 
   205  009B                     	;# 
   206  009C                     	;# 
   207  009D                     	;# 
   208  009E                     	;# 
   209  009F                     	;# 
   210  0105                     	;# 
   211  0107                     	;# 
   212  0108                     	;# 
   213  0109                     	;# 
   214  010C                     	;# 
   215  010C                     	;# 
   216  010D                     	;# 
   217  010E                     	;# 
   218  010F                     	;# 
   219  0185                     	;# 
   220  0187                     	;# 
   221  0188                     	;# 
   222  0189                     	;# 
   223  018C                     	;# 
   224  018D                     	;# 
   225  0000                     	;# 
   226  0001                     	;# 
   227  0002                     	;# 
   228  0003                     	;# 
   229  0004                     	;# 
   230  0005                     	;# 
   231  0006                     	;# 
   232  0007                     	;# 
   233  0009                     	;# 
   234  000A                     	;# 
   235  000B                     	;# 
   236  000C                     	;# 
   237  000D                     	;# 
   238  000E                     	;# 
   239  000E                     	;# 
   240  000F                     	;# 
   241  0010                     	;# 
   242  0011                     	;# 
   243  0012                     	;# 
   244  0013                     	;# 
   245  0014                     	;# 
   246  0015                     	;# 
   247  0015                     	;# 
   248  0016                     	;# 
   249  0017                     	;# 
   250  0018                     	;# 
   251  0019                     	;# 
   252  001A                     	;# 
   253  001B                     	;# 
   254  001B                     	;# 
   255  001C                     	;# 
   256  001D                     	;# 
   257  001E                     	;# 
   258  001F                     	;# 
   259  0081                     	;# 
   260  0085                     	;# 
   261  0086                     	;# 
   262  0087                     	;# 
   263  0089                     	;# 
   264  008C                     	;# 
   265  008D                     	;# 
   266  008E                     	;# 
   267  008F                     	;# 
   268  0090                     	;# 
   269  0091                     	;# 
   270  0092                     	;# 
   271  0093                     	;# 
   272  0093                     	;# 
   273  0093                     	;# 
   274  0094                     	;# 
   275  0095                     	;# 
   276  0096                     	;# 
   277  0097                     	;# 
   278  0098                     	;# 
   279  0099                     	;# 
   280  009A                     	;# 
   281  009B                     	;# 
   282  009C                     	;# 
   283  009D                     	;# 
   284  009E                     	;# 
   285  009F                     	;# 
   286  0105                     	;# 
   287  0107                     	;# 
   288  0108                     	;# 
   289  0109                     	;# 
   290  010C                     	;# 
   291  010C                     	;# 
   292  010D                     	;# 
   293  010E                     	;# 
   294  010F                     	;# 
   295  0185                     	;# 
   296  0187                     	;# 
   297  0188                     	;# 
   298  0189                     	;# 
   299  018C                     	;# 
   300  018D                     	;# 
   301  0000                     	;# 
   302  0001                     	;# 
   303  0002                     	;# 
   304  0003                     	;# 
   305  0004                     	;# 
   306  0005                     	;# 
   307  0006                     	;# 
   308  0007                     	;# 
   309  0009                     	;# 
   310  000A                     	;# 
   311  000B                     	;# 
   312  000C                     	;# 
   313  000D                     	;# 
   314  000E                     	;# 
   315  000E                     	;# 
   316  000F                     	;# 
   317  0010                     	;# 
   318  0011                     	;# 
   319  0012                     	;# 
   320  0013                     	;# 
   321  0014                     	;# 
   322  0015                     	;# 
   323  0015                     	;# 
   324  0016                     	;# 
   325  0017                     	;# 
   326  0018                     	;# 
   327  0019                     	;# 
   328  001A                     	;# 
   329  001B                     	;# 
   330  001B                     	;# 
   331  001C                     	;# 
   332  001D                     	;# 
   333  001E                     	;# 
   334  001F                     	;# 
   335  0081                     	;# 
   336  0085                     	;# 
   337  0086                     	;# 
   338  0087                     	;# 
   339  0089                     	;# 
   340  008C                     	;# 
   341  008D                     	;# 
   342  008E                     	;# 
   343  008F                     	;# 
   344  0090                     	;# 
   345  0091                     	;# 
   346  0092                     	;# 
   347  0093                     	;# 
   348  0093                     	;# 
   349  0093                     	;# 
   350  0094                     	;# 
   351  0095                     	;# 
   352  0096                     	;# 
   353  0097                     	;# 
   354  0098                     	;# 
   355  0099                     	;# 
   356  009A                     	;# 
   357  009B                     	;# 
   358  009C                     	;# 
   359  009D                     	;# 
   360  009E                     	;# 
   361  009F                     	;# 
   362  0105                     	;# 
   363  0107                     	;# 
   364  0108                     	;# 
   365  0109                     	;# 
   366  010C                     	;# 
   367  010C                     	;# 
   368  010D                     	;# 
   369  010E                     	;# 
   370  010F                     	;# 
   371  0185                     	;# 
   372  0187                     	;# 
   373  0188                     	;# 
   374  0189                     	;# 
   375  018C                     	;# 
   376  018D                     	;# 
   377  0000                     	;# 
   378  0001                     	;# 
   379  0002                     	;# 
   380  0003                     	;# 
   381  0004                     	;# 
   382  0005                     	;# 
   383  0006                     	;# 
   384  0007                     	;# 
   385  0009                     	;# 
   386  000A                     	;# 
   387  000B                     	;# 
   388  000C                     	;# 
   389  000D                     	;# 
   390  000E                     	;# 
   391  000E                     	;# 
   392  000F                     	;# 
   393  0010                     	;# 
   394  0011                     	;# 
   395  0012                     	;# 
   396  0013                     	;# 
   397  0014                     	;# 
   398  0015                     	;# 
   399  0015                     	;# 
   400  0016                     	;# 
   401  0017                     	;# 
   402  0018                     	;# 
   403  0019                     	;# 
   404  001A                     	;# 
   405  001B                     	;# 
   406  001B                     	;# 
   407  001C                     	;# 
   408  001D                     	;# 
   409  001E                     	;# 
   410  001F                     	;# 
   411  0081                     	;# 
   412  0085                     	;# 
   413  0086                     	;# 
   414  0087                     	;# 
   415  0089                     	;# 
   416  008C                     	;# 
   417  008D                     	;# 
   418  008E                     	;# 
   419  008F                     	;# 
   420  0090                     	;# 
   421  0091                     	;# 
   422  0092                     	;# 
   423  0093                     	;# 
   424  0093                     	;# 
   425  0093                     	;# 
   426  0094                     	;# 
   427  0095                     	;# 
   428  0096                     	;# 
   429  0097                     	;# 
   430  0098                     	;# 
   431  0099                     	;# 
   432  009A                     	;# 
   433  009B                     	;# 
   434  009C                     	;# 
   435  009D                     	;# 
   436  009E                     	;# 
   437  009F                     	;# 
   438  0105                     	;# 
   439  0107                     	;# 
   440  0108                     	;# 
   441  0109                     	;# 
   442  010C                     	;# 
   443  010C                     	;# 
   444  010D                     	;# 
   445  010E                     	;# 
   446  010F                     	;# 
   447  0185                     	;# 
   448  0187                     	;# 
   449  0188                     	;# 
   450  0189                     	;# 
   451  018C                     	;# 
   452  018D                     	;# 
   453  0000                     	;# 
   454  0001                     	;# 
   455  0002                     	;# 
   456  0003                     	;# 
   457  0004                     	;# 
   458  0005                     	;# 
   459  0006                     	;# 
   460  0007                     	;# 
   461  0009                     	;# 
   462  000A                     	;# 
   463  000B                     	;# 
   464  000C                     	;# 
   465  000D                     	;# 
   466  000E                     	;# 
   467  000E                     	;# 
   468  000F                     	;# 
   469  0010                     	;# 
   470  0011                     	;# 
   471  0012                     	;# 
   472  0013                     	;# 
   473  0014                     	;# 
   474  0015                     	;# 
   475  0015                     	;# 
   476  0016                     	;# 
   477  0017                     	;# 
   478  0018                     	;# 
   479  0019                     	;# 
   480  001A                     	;# 
   481  001B                     	;# 
   482  001B                     	;# 
   483  001C                     	;# 
   484  001D                     	;# 
   485  001E                     	;# 
   486  001F                     	;# 
   487  0081                     	;# 
   488  0085                     	;# 
   489  0086                     	;# 
   490  0087                     	;# 
   491  0089                     	;# 
   492  008C                     	;# 
   493  008D                     	;# 
   494  008E                     	;# 
   495  008F                     	;# 
   496  0090                     	;# 
   497  0091                     	;# 
   498  0092                     	;# 
   499  0093                     	;# 
   500  0093                     	;# 
   501  0093                     	;# 
   502  0094                     	;# 
   503  0095                     	;# 
   504  0096                     	;# 
   505  0097                     	;# 
   506  0098                     	;# 
   507  0099                     	;# 
   508  009A                     	;# 
   509  009B                     	;# 
   510  009C                     	;# 
   511  009D                     	;# 
   512  009E                     	;# 
   513  009F                     	;# 
   514  0105                     	;# 
   515  0107                     	;# 
   516  0108                     	;# 
   517  0109                     	;# 
   518  010C                     	;# 
   519  010C                     	;# 
   520  010D                     	;# 
   521  010E                     	;# 
   522  010F                     	;# 
   523  0185                     	;# 
   524  0187                     	;# 
   525  0188                     	;# 
   526  0189                     	;# 
   527  018C                     	;# 
   528  018D                     	;# 
   529                           
   530                           	psect	nvCOMMON
   531  007A                     __pnvCOMMON:	
   532  007A                     _UQEnd:	
   533  007A                     	ds	1
   534  007B                     _UQFront:	
   535  007B                     	ds	1
   536  0005                     _PORTA	set	5
   537  000C                     _PIR1bits	set	12
   538  0007                     _PORTCbits	set	7
   539  001A                     _RCREG	set	26
   540  0019                     _TXREG	set	25
   541  000B                     _INTCONbits	set	11
   542  0018                     _RCSTAbits	set	24
   543  0006                     _PORTB	set	6
   544  005F                     _GIE	set	95
   545  0085                     _TRISA	set	133
   546  0087                     _TRISCbits	set	135
   547  0081                     _OPTION_REGbits	set	129
   548  008C                     _PIE1bits	set	140
   549  0098                     _TXSTAbits	set	152
   550  0099                     _SPBRG	set	153
   551  0086                     _TRISB	set	134
   552  04C2                     _BRGH	set	1218
   553  0189                     _ANSELH	set	393
   554                           
   555                           	psect	strings
   556  0401                     __pstrings:	
   557  0401                     stringtab:	
   558  0401                     __stringtab:	
   559                           
   560                           ;	String table - string pointers are 1 byte each
   561  0401  1BFF               	btfsc	btemp+1,7
   562  0402  2C0B               	ljmp	stringcode
   563  0403  1383               	bcf	3,7
   564  0404  187F               	btfsc	btemp+1,0
   565  0405  1783               	bsf	3,7
   566  0406  0800               	movf	0,w
   567  0407  0A84               	incf	4,f
   568  0408  1903               	skipnz
   569  0409  0AFF               	incf	btemp+1,f
   570  040A  0008               	return
   571  040B                     stringcode:	
   572  040B                     stringdir:	
   573  040B  3004               	movlw	high stringdir
   574  040C  008A               	movwf	10
   575  040D  0804               	movf	4,w
   576  040E  0A84               	incf	4,f
   577  040F  0782               	addwf	2,f
   578  0410                     __stringbase:	
   579  0410  3400               	retlw	0
   580  0411                     __end_of__stringtab:	
   581  0411                     STR_1:	
   582  0411  3453               	retlw	83	;'S'
   583  0412  3465               	retlw	101	;'e'
   584  0413  3472               	retlw	114	;'r'
   585  0414  3469               	retlw	105	;'i'
   586  0415  3461               	retlw	97	;'a'
   587  0416  346C               	retlw	108	;'l'
   588  0417  3420               	retlw	32	;' '
   589  0418  344F               	retlw	79	;'O'
   590  0419  344B               	retlw	75	;'K'
   591  041A  3421               	retlw	33	;'!'
   592  041B  3400               	retlw	0
   593                           
   594                           ; #config settings
   595  0000                     
   596                           	psect	cinit
   597  0011                     start_initialization:	
   598  0011                     __initialization:	
   599                           
   600                           ; Clear objects allocated to COMMON
   601  0011  01FC               	clrf	__pbssCOMMON& (0+127)
   602  0012  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   603                           
   604                           ; Clear objects allocated to BANK0
   605  0013  3020               	movlw	low __pbssBANK0
   606  0014  0084               	movwf	4
   607  0015  3040               	movlw	low (__pbssBANK0+32)
   608  0016  24EF               	fcall	clear_ram0
   609  0017                     end_of_initialization:	
   610                           ;End of C runtime variable initialization code
   611                           
   612  0017                     __end_of__initialization:	
   613  0017  0183               	clrf	3
   614  0018  2C1C               	ljmp	_main	;jump to C main() function
   615                           
   616                           	psect	bssCOMMON
   617  007C                     __pbssCOMMON:	
   618  007C                     _currentKey:	
   619  007C                     	ds	1
   620  007D                     _buttonPressed:	
   621  007D                     	ds	1
   622                           
   623                           	psect	bssBANK0
   624  0020                     __pbssBANK0:	
   625  0020                     _URBuff:	
   626  0020                     	ds	12
   627  002C                     USARTWriteInt@F1616:	
   628  002C                     	ds	5
   629  0031                     _led_indication_reg:	
   630  0031                     	ds	2
   631  0033                     _currentKeypadStatus:	
   632  0033                     	ds	2
   633  0035                     _lastKey:	
   634  0035                     	ds	1
   635  0036                     _rxCount:	
   636  0036                     	ds	1
   637  0037                     _status_register:	
   638  0037                     	ds	1
   639  0038                     _recvCommand:	
   640  0038                     	ds	6
   641  003E                     _keypadState:	
   642  003E                     	ds	2
   643                           
   644                           	psect	clrtext
   645  04EF                     clear_ram0:	
   646                           ;	Called with FSR containing the base address, and
   647                           ;	W with the last address+1
   648                           
   649  04EF  0064               	clrwdt	;clear the watchdog before getting into this loop
   650  04F0                     clrloop0:	
   651  04F0  0180               	clrf	0	;clear RAM location pointed to by FSR
   652  04F1  0A84               	incf	4,f	;increment pointer
   653  04F2  0604               	xorwf	4,w	;XOR with final address
   654  04F3  1903               	btfsc	3,2	;have we reached the end yet?
   655  04F4  3400               	retlw	0	;all done for this memory range, return
   656  04F5  0604               	xorwf	4,w	;XOR again to restore value
   657  04F6  2CF0               	goto	clrloop0	;do the next byte
   658                           
   659                           	psect	cstackCOMMON
   660  0070                     __pcstackCOMMON:	
   661  0070                     ?_controllerInit:	
   662  0070                     ?_rs485Tx:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  0070                     ?_rs485Rx:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  0070                     ?_checkCommandRx:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  0070                     ?_scanKeypad:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  0070                     ?_sendButtonInfo:	
   675                           ; 1 bytes @ 0x0
   676                           
   677  0070                     ?_resetKeypad:	
   678                           ; 1 bytes @ 0x0
   679                           
   680  0070                     ?_initKeypad:	
   681                           ; 1 bytes @ 0x0
   682                           
   683  0070                     ?_getKey:	
   684                           ; 1 bytes @ 0x0
   685                           
   686  0070                     ?_USARTWriteChar:	
   687                           ; 1 bytes @ 0x0
   688                           
   689  0070                     ?_USARTHandleRxInt:	
   690                           ; 1 bytes @ 0x0
   691                           
   692  0070                     ??_USARTHandleRxInt:	
   693                           ; 1 bytes @ 0x0
   694                           
   695  0070                     ?_USARTReadData:	
   696                           ; 1 bytes @ 0x0
   697                           
   698  0070                     ?_main:	
   699                           ; 1 bytes @ 0x0
   700                           
   701  0070                     ?_gpioInit:	
   702                           ; 1 bytes @ 0x0
   703                           
   704  0070                     ?_runProtocol:	
   705                           ; 1 bytes @ 0x0
   706                           
   707  0070                     ?_ISR:	
   708                           ; 1 bytes @ 0x0
   709                           
   710                           
   711                           ; 1 bytes @ 0x0
   712  0070                     	ds	4
   713  0074                     USARTHandleRxInt@data:	
   714                           
   715                           ; 1 bytes @ 0x4
   716  0074                     	ds	1
   717  0075                     ??_ISR:	
   718                           
   719                           ; 1 bytes @ 0x5
   720  0075                     	ds	5
   721                           
   722                           	psect	cstackBANK0
   723  0040                     __pcstackBANK0:	
   724  0040                     ??_rs485Tx:	
   725  0040                     ??_rs485Rx:	
   726                           ; 1 bytes @ 0x0
   727                           
   728  0040                     ?_light_led:	
   729                           ; 1 bytes @ 0x0
   730                           
   731  0040                     ??_initKeypad:	
   732                           ; 1 bytes @ 0x0
   733                           
   734  0040                     ??_getKey:	
   735                           ; 1 bytes @ 0x0
   736                           
   737  0040                     ?_USARTInit:	
   738                           ; 1 bytes @ 0x0
   739                           
   740  0040                     ??_USARTWriteChar:	
   741                           ; 1 bytes @ 0x0
   742                           
   743  0040                     ??_USARTReadData:	
   744                           ; 1 bytes @ 0x0
   745                           
   746  0040                     ??_gpioInit:	
   747                           ; 1 bytes @ 0x0
   748                           
   749  0040                     ?_sortRxFrame:	
   750                           ; 1 bytes @ 0x0
   751                           
   752  0040                     USARTWriteChar@ch:	
   753                           ; 1 bytes @ 0x0
   754                           
   755  0040                     sortRxFrame@commandStruct:	
   756                           ; 1 bytes @ 0x0
   757                           
   758  0040                     USARTInit@baud_rate:	
   759                           ; 1 bytes @ 0x0
   760                           
   761  0040                     light_led@led_register:	
   762                           ; 2 bytes @ 0x0
   763                           
   764                           
   765                           ; 2 bytes @ 0x0
   766  0040                     	ds	1
   767  0041                     ?_USARTWriteString:	
   768  0041                     ??_sortRxFrame:	
   769                           ; 1 bytes @ 0x1
   770                           
   771  0041                     USARTReadData@data:	
   772                           ; 1 bytes @ 0x1
   773                           
   774  0041                     USARTWriteString@str:	
   775                           ; 1 bytes @ 0x1
   776                           
   777                           
   778                           ; 2 bytes @ 0x1
   779  0041                     	ds	1
   780  0042                     ??_USARTInit:	
   781  0042                     ?_USARTReadBuffer:	
   782                           ; 1 bytes @ 0x2
   783                           
   784  0042                     getKey@keypadState:	
   785                           ; 1 bytes @ 0x2
   786                           
   787  0042                     light_led@LED_EN:	
   788                           ; 1 bytes @ 0x2
   789                           
   790  0042                     USARTReadBuffer@len:	
   791                           ; 1 bytes @ 0x2
   792                           
   793                           
   794                           ; 2 bytes @ 0x2
   795  0042                     	ds	1
   796  0043                     ??_controllerInit:	
   797  0043                     ??_scanKeypad:	
   798                           ; 1 bytes @ 0x3
   799                           
   800  0043                     ??_light_led:	
   801                           ; 1 bytes @ 0x3
   802                           
   803  0043                     USARTWriteString@len:	
   804                           ; 1 bytes @ 0x3
   805                           
   806  0043                     sortRxFrame@rxBuf:	
   807                           ; 1 bytes @ 0x3
   808                           
   809                           
   810                           ; 1 bytes @ 0x3
   811  0043                     	ds	1
   812  0044                     ??_sendButtonInfo:	
   813  0044                     ?_ackButton:	
   814                           ; 1 bytes @ 0x4
   815                           
   816  0044                     ??_resetKeypad:	
   817                           ; 1 bytes @ 0x4
   818                           
   819  0044                     ??_USARTWriteString:	
   820                           ; 1 bytes @ 0x4
   821                           
   822  0044                     ?_USARTWriteLine:	
   823                           ; 1 bytes @ 0x4
   824                           
   825  0044                     ??_USARTReadBuffer:	
   826                           ; 1 bytes @ 0x4
   827                           
   828  0044                     USARTWriteLine@len:	
   829                           ; 1 bytes @ 0x4
   830                           
   831  0044                     sortRxFrame@err:	
   832                           ; 1 bytes @ 0x4
   833                           
   834  0044                     light_led@i:	
   835                           ; 1 bytes @ 0x4
   836                           
   837  0044                     ackButton@valid_indicator:	
   838                           ; 1 bytes @ 0x4
   839                           
   840                           
   841                           ; 2 bytes @ 0x4
   842  0044                     	ds	1
   843  0045                     ??_USARTWriteLine:	
   844  0045                     sortRxFrame@command:	
   845                           ; 1 bytes @ 0x5
   846                           
   847  0045                     sendButtonInfo@buffer:	
   848                           ; 1 bytes @ 0x5
   849                           
   850  0045                     resetKeypad@buffer:	
   851                           ; 6 bytes @ 0x5
   852                           
   853                           
   854                           ; 6 bytes @ 0x5
   855  0045                     	ds	1
   856  0046                     ??_ackButton:	
   857  0046                     USARTWriteLine@str:	
   858                           ; 1 bytes @ 0x6
   859                           
   860  0046                     USARTReadBuffer@buff:	
   861                           ; 1 bytes @ 0x6
   862                           
   863                           
   864                           ; 1 bytes @ 0x6
   865  0046                     	ds	1
   866  0047                     USARTReadBuffer@i:	
   867  0047                     ackButton@buffer:	
   868                           ; 2 bytes @ 0x7
   869                           
   870                           
   871                           ; 6 bytes @ 0x7
   872  0047                     	ds	4
   873  004B                     sendButtonInfo@button:	
   874                           
   875                           ; 1 bytes @ 0xB
   876  004B                     	ds	2
   877  004D                     ??_runProtocol:	
   878                           
   879                           ; 1 bytes @ 0xD
   880  004D                     	ds	1
   881  004E                     runProtocol@command:	
   882                           
   883                           ; 1 bytes @ 0xE
   884  004E                     	ds	1
   885  004F                     runProtocol@commandRecv:	
   886                           
   887                           ; 1 bytes @ 0xF
   888  004F                     	ds	1
   889  0050                     ??_checkCommandRx:	
   890                           
   891                           ; 1 bytes @ 0x10
   892  0050                     	ds	1
   893  0051                     checkCommandRx@buffer:	
   894                           
   895                           ; 6 bytes @ 0x11
   896  0051                     	ds	6
   897  0057                     ??_main:	
   898                           
   899                           ; 1 bytes @ 0x17
   900  0057                     	ds	1
   901                           
   902                           	psect	maintext
   903  041C                     __pmaintext:	
   904 ;;
   905 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   906 ;;
   907 ;; *************** function _main *****************
   908 ;; Defined at:
   909 ;;		line 35 in file "main.c"
   910 ;; Parameters:    Size  Location     Type
   911 ;;		None
   912 ;; Auto vars:     Size  Location     Type
   913 ;;		None
   914 ;; Return value:  Size  Location     Type
   915 ;;                  1    wreg      void 
   916 ;; Registers used:
   917 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   918 ;; Tracked objects:
   919 ;;		On entry : B00/0
   920 ;;		On exit  : 0/0
   921 ;;		Unchanged: 0/0
   922 ;; Data sizes:     COMMON   BANK0   BANK1
   923 ;;      Params:         0       0       0
   924 ;;      Locals:         0       0       0
   925 ;;      Temps:          0       1       0
   926 ;;      Totals:         0       1       0
   927 ;;Total ram usage:        1 bytes
   928 ;; Hardware stack levels required when called:    7
   929 ;; This function calls:
   930 ;;		_USARTWriteLine
   931 ;;		_checkCommandRx
   932 ;;		_controllerInit
   933 ;;		_light_led
   934 ;;		_rs485Rx
   935 ;;		_rs485Tx
   936 ;;		_scanKeypad
   937 ;; This function is called by:
   938 ;;		Startup code after reset
   939 ;; This function uses a non-reentrant model
   940 ;;
   941                           
   942                           
   943                           ;psect for function _main
   944  041C                     _main:	
   945                           
   946                           ;main.c: 37: controllerInit();
   947                           
   948                           ;incstack = 0
   949                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   950  041C  24C9               	fcall	_controllerInit
   951                           
   952                           ;main.c: 40: rs485Tx();
   953  041D  24F7               	fcall	_rs485Tx
   954                           
   955                           ;main.c: 41: USARTWriteLine("Serial OK!", 10);
   956  041E  300A               	movlw	10
   957  041F  1283               	bcf	3,5	;RP0=0, select bank0
   958  0420  1303               	bcf	3,6	;RP1=0, select bank0
   959  0421  00D7               	movwf	??_main
   960  0422  0857               	movf	??_main,w
   961  0423  00C4               	movwf	USARTWriteLine@len
   962  0424  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   963  0425  247D               	fcall	_USARTWriteLine
   964                           
   965                           ;main.c: 42: rs485Rx();
   966  0426  24FB               	fcall	_rs485Rx
   967  0427                     l1997:	
   968                           ;main.c: 47: while(1)
   969                           
   970                           
   971                           ;main.c: 48: {
   972                           ;main.c: 49: checkCommandRx();
   973  0427  2436               	fcall	_checkCommandRx
   974                           
   975                           ;main.c: 50: scanKeypad();
   976  0428  24A7               	fcall	_scanKeypad
   977                           
   978                           ;main.c: 51: light_led(led_indication_reg, (status_register & 0x01));
   979  0429  1283               	bcf	3,5	;RP0=0, select bank0
   980  042A  1303               	bcf	3,6	;RP1=0, select bank0
   981  042B  0832               	movf	_led_indication_reg+1,w	;volatile
   982  042C  00C1               	movwf	light_led@led_register+1
   983  042D  0831               	movf	_led_indication_reg,w	;volatile
   984  042E  00C0               	movwf	light_led@led_register
   985  042F  0837               	movf	_status_register,w
   986  0430  3901               	andlw	1
   987  0431  00D7               	movwf	??_main
   988  0432  0857               	movf	??_main,w
   989  0433  00C2               	movwf	light_led@LED_EN
   990  0434  244F               	fcall	_light_led
   991  0435  2C27               	goto	l1997
   992  0436                     __end_of_main:	
   993                           
   994                           	psect	text1
   995  04A7                     __ptext1:	
   996 ;; *************** function _scanKeypad *****************
   997 ;; Defined at:
   998 ;;		line 232 in file "sysFunc.c"
   999 ;; Parameters:    Size  Location     Type
  1000 ;;		None
  1001 ;; Auto vars:     Size  Location     Type
  1002 ;;		None
  1003 ;; Return value:  Size  Location     Type
  1004 ;;                  1    wreg      unsigned char 
  1005 ;; Registers used:
  1006 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1007 ;; Tracked objects:
  1008 ;;		On entry : 0/0
  1009 ;;		On exit  : 0/0
  1010 ;;		Unchanged: 0/0
  1011 ;; Data sizes:     COMMON   BANK0   BANK1
  1012 ;;      Params:         0       0       0
  1013 ;;      Locals:         0       0       0
  1014 ;;      Temps:          0       1       0
  1015 ;;      Totals:         0       1       0
  1016 ;;Total ram usage:        1 bytes
  1017 ;; Hardware stack levels used:    1
  1018 ;; Hardware stack levels required when called:    3
  1019 ;; This function calls:
  1020 ;;		_getKey
  1021 ;; This function is called by:
  1022 ;;		_main
  1023 ;; This function uses a non-reentrant model
  1024 ;;
  1025                           
  1026                           
  1027                           ;psect for function _scanKeypad
  1028  04A7                     _scanKeypad:	
  1029                           
  1030                           ;sysFunc.c: 234: if(!keypadState.keyPressIndicator && !keypadState.keyLock)
  1031                           
  1032                           ;incstack = 0
  1033                           ; Regs used in _scanKeypad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1034  04A7  1283               	bcf	3,5	;RP0=0, select bank0
  1035  04A8  1303               	bcf	3,6	;RP1=0, select bank0
  1036  04A9  183E               	btfsc	_keypadState,0
  1037  04AA  0008               	return
  1038  04AB  193E               	btfsc	_keypadState,2
  1039  04AC  0008               	return
  1040                           
  1041                           ;sysFunc.c: 235: {
  1042                           ;sysFunc.c: 236: getKey(&keypadState);
  1043  04AD  303E               	movlw	(low (_keypadState| 0))& (0+255)
  1044  04AE  2019               	fcall	_getKey
  1045                           
  1046                           ;sysFunc.c: 238: if(keypadState.keyPressIndicator)
  1047  04AF  1283               	bcf	3,5	;RP0=0, select bank0
  1048  04B0  1303               	bcf	3,6	;RP1=0, select bank0
  1049  04B1  1C3E               	btfss	_keypadState,0
  1050  04B2  0008               	return
  1051                           
  1052                           ;sysFunc.c: 239: {
  1053                           ;sysFunc.c: 240: lastKey = keypadState.keyPressed;
  1054  04B3  083F               	movf	_keypadState+1,w
  1055  04B4  00C3               	movwf	??_scanKeypad
  1056  04B5  0843               	movf	??_scanKeypad,w
  1057  04B6  00B5               	movwf	_lastKey
  1058                           
  1059                           ;sysFunc.c: 241: keypadState.keyLock = 1;
  1060  04B7  153E               	bsf	_keypadState,2
  1061                           
  1062                           ;sysFunc.c: 242: return 0;
  1063                           ;	Return value of _scanKeypad is never used
  1064  04B8  0008               	return
  1065  04B9                     __end_of_scanKeypad:	
  1066                           ;sysFunc.c: 243: }
  1067                           ;sysFunc.c: 244: }
  1068                           ;sysFunc.c: 245: return 1;
  1069                           ;	Return value of _scanKeypad is never used
  1070                           
  1071                           
  1072                           	psect	text2
  1073  0019                     __ptext2:	
  1074 ;; *************** function _getKey *****************
  1075 ;; Defined at:
  1076 ;;		line 30 in file "Keypad4X4.c"
  1077 ;; Parameters:    Size  Location     Type
  1078 ;;  keypadState     1    wreg     PTR struct .
  1079 ;;		 -> keypadState(2), 
  1080 ;; Auto vars:     Size  Location     Type
  1081 ;;  keypadState     1    2[BANK0 ] PTR struct .
  1082 ;;		 -> keypadState(2), 
  1083 ;; Return value:  Size  Location     Type
  1084 ;;                  1    wreg      void 
  1085 ;; Registers used:
  1086 ;;		wreg, fsr0l, fsr0h, status,2
  1087 ;; Tracked objects:
  1088 ;;		On entry : 0/0
  1089 ;;		On exit  : 0/0
  1090 ;;		Unchanged: 0/0
  1091 ;; Data sizes:     COMMON   BANK0   BANK1
  1092 ;;      Params:         0       0       0
  1093 ;;      Locals:         0       1       0
  1094 ;;      Temps:          0       2       0
  1095 ;;      Totals:         0       3       0
  1096 ;;Total ram usage:        3 bytes
  1097 ;; Hardware stack levels used:    1
  1098 ;; Hardware stack levels required when called:    2
  1099 ;; This function calls:
  1100 ;;		Nothing
  1101 ;; This function is called by:
  1102 ;;		_scanKeypad
  1103 ;; This function uses a non-reentrant model
  1104 ;;
  1105                           
  1106                           
  1107                           ;psect for function _getKey
  1108  0019                     _getKey:	
  1109                           
  1110                           ;incstack = 0
  1111                           ; Regs used in _getKey: [wreg-fsr0h+status,2]
  1112                           ;getKey@keypadState stored from wreg
  1113  0019  1283               	bcf	3,5	;RP0=0, select bank0
  1114  001A  1303               	bcf	3,6	;RP1=0, select bank0
  1115  001B  00C2               	movwf	getKey@keypadState
  1116                           
  1117                           ;Keypad4X4.c: 33: PORTB = 0xFE;
  1118  001C  30FE               	movlw	254
  1119  001D  0086               	movwf	6	;volatile
  1120                           
  1121                           ;Keypad4X4.c: 34: if ((PORTB & 0x10) == 0x00)
  1122  001E  1A06               	btfsc	6,4	;volatile
  1123  001F  283A               	goto	l16
  1124                           
  1125                           ;Keypad4X4.c: 35: {
  1126                           ;Keypad4X4.c: 36: _delay((unsigned long)((100)*(4000000/4000.0)));
  1127  0020  3082               	movlw	130
  1128  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1129  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1130  0023  00C1               	movwf	??_getKey+1
  1131  0024  30DD               	movlw	221
  1132  0025  00C0               	movwf	??_getKey
  1133  0026                     u1277:	
  1134  0026  0BC0               	decfsz	??_getKey,f
  1135  0027  2826               	goto	u1277
  1136  0028  0BC1               	decfsz	??_getKey+1,f
  1137  0029  2826               	goto	u1277
  1138  002A  0000               	nop
  1139                           
  1140                           ;Keypad4X4.c: 37: buttonPressed = BUTTON_1;
  1141  002B  01FD               	clrf	_buttonPressed
  1142  002C  0AFD               	incf	_buttonPressed,f
  1143                           
  1144                           ;Keypad4X4.c: 38: keypadState->keyPressIndicator = 1;
  1145  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1146  002E  1303               	bcf	3,6	;RP1=0, select bank0
  1147  002F  0842               	movf	getKey@keypadState,w
  1148  0030  0084               	movwf	4
  1149  0031  1383               	bcf	3,7	;select IRP bank0
  1150  0032  1400               	bsf	0,0
  1151                           
  1152                           ;Keypad4X4.c: 39: keypadState->keyPressed = buttonPressed;
  1153  0033  087D               	movf	_buttonPressed,w
  1154  0034  00C0               	movwf	??_getKey
  1155  0035  0A42               	incf	getKey@keypadState,w
  1156  0036  0084               	movwf	4
  1157  0037  0840               	movf	??_getKey,w
  1158  0038  0080               	movwf	0
  1159                           
  1160                           ;Keypad4X4.c: 40: return;
  1161  0039  0008               	return
  1162  003A                     l16:	
  1163                           ;Keypad4X4.c: 41: }
  1164                           
  1165                           
  1166                           ;Keypad4X4.c: 43: else if ((PORTB & 0x20) == 0x00)
  1167  003A  1A86               	btfsc	6,5	;volatile
  1168  003B  2858               	goto	l19
  1169                           
  1170                           ;Keypad4X4.c: 44: {
  1171                           ;Keypad4X4.c: 45: _delay((unsigned long)((100)*(4000000/4000.0)));
  1172  003C  3082               	movlw	130
  1173  003D  1283               	bcf	3,5	;RP0=0, select bank0
  1174  003E  1303               	bcf	3,6	;RP1=0, select bank0
  1175  003F  00C1               	movwf	??_getKey+1
  1176  0040  30DD               	movlw	221
  1177  0041  00C0               	movwf	??_getKey
  1178  0042                     u1287:	
  1179  0042  0BC0               	decfsz	??_getKey,f
  1180  0043  2842               	goto	u1287
  1181  0044  0BC1               	decfsz	??_getKey+1,f
  1182  0045  2842               	goto	u1287
  1183  0046  0000               	nop
  1184                           
  1185                           ;Keypad4X4.c: 46: buttonPressed = BUTTON_2;
  1186  0047  3002               	movlw	2
  1187  0048  1283               	bcf	3,5	;RP0=0, select bank0
  1188  0049  1303               	bcf	3,6	;RP1=0, select bank0
  1189  004A  00C0               	movwf	??_getKey
  1190  004B  0840               	movf	??_getKey,w
  1191  004C  00FD               	movwf	_buttonPressed
  1192                           
  1193                           ;Keypad4X4.c: 47: keypadState->keyPressIndicator = 1;
  1194  004D  0842               	movf	getKey@keypadState,w
  1195  004E  0084               	movwf	4
  1196  004F  1383               	bcf	3,7	;select IRP bank0
  1197  0050  1400               	bsf	0,0
  1198                           
  1199                           ;Keypad4X4.c: 48: keypadState->keyPressed = buttonPressed;
  1200  0051  087D               	movf	_buttonPressed,w
  1201  0052  00C0               	movwf	??_getKey
  1202  0053  0A42               	incf	getKey@keypadState,w
  1203  0054  0084               	movwf	4
  1204  0055  0840               	movf	??_getKey,w
  1205  0056  0080               	movwf	0
  1206                           
  1207                           ;Keypad4X4.c: 49: return;
  1208  0057  0008               	return
  1209  0058                     l19:	
  1210                           ;Keypad4X4.c: 50: }
  1211                           
  1212                           
  1213                           ;Keypad4X4.c: 52: else if ((PORTB & 0x40) == 0x00)
  1214  0058  1B06               	btfsc	6,6	;volatile
  1215  0059  2876               	goto	l21
  1216                           
  1217                           ;Keypad4X4.c: 53: {
  1218                           ;Keypad4X4.c: 54: _delay((unsigned long)((100)*(4000000/4000.0)));
  1219  005A  3082               	movlw	130
  1220  005B  1283               	bcf	3,5	;RP0=0, select bank0
  1221  005C  1303               	bcf	3,6	;RP1=0, select bank0
  1222  005D  00C1               	movwf	??_getKey+1
  1223  005E  30DD               	movlw	221
  1224  005F  00C0               	movwf	??_getKey
  1225  0060                     u1297:	
  1226  0060  0BC0               	decfsz	??_getKey,f
  1227  0061  2860               	goto	u1297
  1228  0062  0BC1               	decfsz	??_getKey+1,f
  1229  0063  2860               	goto	u1297
  1230  0064  0000               	nop
  1231                           
  1232                           ;Keypad4X4.c: 55: buttonPressed = BUTTON_3;
  1233  0065  3003               	movlw	3
  1234  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0068  00C0               	movwf	??_getKey
  1237  0069  0840               	movf	??_getKey,w
  1238  006A  00FD               	movwf	_buttonPressed
  1239                           
  1240                           ;Keypad4X4.c: 56: keypadState->keyPressIndicator = 1;
  1241  006B  0842               	movf	getKey@keypadState,w
  1242  006C  0084               	movwf	4
  1243  006D  1383               	bcf	3,7	;select IRP bank0
  1244  006E  1400               	bsf	0,0
  1245                           
  1246                           ;Keypad4X4.c: 57: keypadState->keyPressed = buttonPressed;
  1247  006F  087D               	movf	_buttonPressed,w
  1248  0070  00C0               	movwf	??_getKey
  1249  0071  0A42               	incf	getKey@keypadState,w
  1250  0072  0084               	movwf	4
  1251  0073  0840               	movf	??_getKey,w
  1252  0074  0080               	movwf	0
  1253                           
  1254                           ;Keypad4X4.c: 58: return;
  1255  0075  0008               	return
  1256  0076                     l21:	
  1257                           ;Keypad4X4.c: 59: }
  1258                           
  1259                           
  1260                           ;Keypad4X4.c: 61: else if ((PORTB & 0x80) == 0x00)
  1261  0076  1B86               	btfsc	6,7	;volatile
  1262  0077  2894               	goto	l1629
  1263                           
  1264                           ;Keypad4X4.c: 62: {
  1265                           ;Keypad4X4.c: 63: _delay((unsigned long)((100)*(4000000/4000.0)));
  1266  0078  3082               	movlw	130
  1267  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1268  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1269  007B  00C1               	movwf	??_getKey+1
  1270  007C  30DD               	movlw	221
  1271  007D  00C0               	movwf	??_getKey
  1272  007E                     u1307:	
  1273  007E  0BC0               	decfsz	??_getKey,f
  1274  007F  287E               	goto	u1307
  1275  0080  0BC1               	decfsz	??_getKey+1,f
  1276  0081  287E               	goto	u1307
  1277  0082  0000               	nop
  1278                           
  1279                           ;Keypad4X4.c: 64: buttonPressed = BUTTON_4;
  1280  0083  3004               	movlw	4
  1281  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1282  0085  1303               	bcf	3,6	;RP1=0, select bank0
  1283  0086  00C0               	movwf	??_getKey
  1284  0087  0840               	movf	??_getKey,w
  1285  0088  00FD               	movwf	_buttonPressed
  1286                           
  1287                           ;Keypad4X4.c: 65: keypadState->keyPressIndicator = 1;
  1288  0089  0842               	movf	getKey@keypadState,w
  1289  008A  0084               	movwf	4
  1290  008B  1383               	bcf	3,7	;select IRP bank0
  1291  008C  1400               	bsf	0,0
  1292                           
  1293                           ;Keypad4X4.c: 66: keypadState->keyPressed = buttonPressed;
  1294  008D  087D               	movf	_buttonPressed,w
  1295  008E  00C0               	movwf	??_getKey
  1296  008F  0A42               	incf	getKey@keypadState,w
  1297  0090  0084               	movwf	4
  1298  0091  0840               	movf	??_getKey,w
  1299  0092  0080               	movwf	0
  1300                           
  1301                           ;Keypad4X4.c: 67: return;
  1302  0093  0008               	return
  1303  0094                     l1629:	
  1304                           
  1305                           ;Keypad4X4.c: 68: }
  1306                           ;Keypad4X4.c: 70: PORTB = 0xFD;
  1307  0094  30FD               	movlw	253
  1308  0095  0086               	movwf	6	;volatile
  1309                           
  1310                           ;Keypad4X4.c: 71: if ((PORTB & 0x10) == 0x00)
  1311  0096  1A06               	btfsc	6,4	;volatile
  1312  0097  28B4               	goto	l24
  1313                           
  1314                           ;Keypad4X4.c: 72: {
  1315                           ;Keypad4X4.c: 73: _delay((unsigned long)((100)*(4000000/4000.0)));
  1316  0098  3082               	movlw	130
  1317  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1318  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1319  009B  00C1               	movwf	??_getKey+1
  1320  009C  30DD               	movlw	221
  1321  009D  00C0               	movwf	??_getKey
  1322  009E                     u1317:	
  1323  009E  0BC0               	decfsz	??_getKey,f
  1324  009F  289E               	goto	u1317
  1325  00A0  0BC1               	decfsz	??_getKey+1,f
  1326  00A1  289E               	goto	u1317
  1327  00A2  0000               	nop
  1328                           
  1329                           ;Keypad4X4.c: 74: buttonPressed = BUTTON_5;
  1330  00A3  3005               	movlw	5
  1331  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1332  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1333  00A6  00C0               	movwf	??_getKey
  1334  00A7  0840               	movf	??_getKey,w
  1335  00A8  00FD               	movwf	_buttonPressed
  1336                           
  1337                           ;Keypad4X4.c: 75: keypadState->keyPressIndicator = 1;
  1338  00A9  0842               	movf	getKey@keypadState,w
  1339  00AA  0084               	movwf	4
  1340  00AB  1383               	bcf	3,7	;select IRP bank0
  1341  00AC  1400               	bsf	0,0
  1342                           
  1343                           ;Keypad4X4.c: 76: keypadState->keyPressed = buttonPressed;
  1344  00AD  087D               	movf	_buttonPressed,w
  1345  00AE  00C0               	movwf	??_getKey
  1346  00AF  0A42               	incf	getKey@keypadState,w
  1347  00B0  0084               	movwf	4
  1348  00B1  0840               	movf	??_getKey,w
  1349  00B2  0080               	movwf	0
  1350                           
  1351                           ;Keypad4X4.c: 77: return;
  1352  00B3  0008               	return
  1353  00B4                     l24:	
  1354                           ;Keypad4X4.c: 78: }
  1355                           
  1356                           
  1357                           ;Keypad4X4.c: 80: else if ((PORTB & 0x20) == 0x00)
  1358  00B4  1A86               	btfsc	6,5	;volatile
  1359  00B5  28D2               	goto	l26
  1360                           
  1361                           ;Keypad4X4.c: 81: {
  1362                           ;Keypad4X4.c: 82: _delay((unsigned long)((100)*(4000000/4000.0)));
  1363  00B6  3082               	movlw	130
  1364  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1365  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1366  00B9  00C1               	movwf	??_getKey+1
  1367  00BA  30DD               	movlw	221
  1368  00BB  00C0               	movwf	??_getKey
  1369  00BC                     u1327:	
  1370  00BC  0BC0               	decfsz	??_getKey,f
  1371  00BD  28BC               	goto	u1327
  1372  00BE  0BC1               	decfsz	??_getKey+1,f
  1373  00BF  28BC               	goto	u1327
  1374  00C0  0000               	nop
  1375                           
  1376                           ;Keypad4X4.c: 83: buttonPressed = BUTTON_6;
  1377  00C1  3006               	movlw	6
  1378  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1379  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1380  00C4  00C0               	movwf	??_getKey
  1381  00C5  0840               	movf	??_getKey,w
  1382  00C6  00FD               	movwf	_buttonPressed
  1383                           
  1384                           ;Keypad4X4.c: 84: keypadState->keyPressIndicator = 1;
  1385  00C7  0842               	movf	getKey@keypadState,w
  1386  00C8  0084               	movwf	4
  1387  00C9  1383               	bcf	3,7	;select IRP bank0
  1388  00CA  1400               	bsf	0,0
  1389                           
  1390                           ;Keypad4X4.c: 85: keypadState->keyPressed = buttonPressed;
  1391  00CB  087D               	movf	_buttonPressed,w
  1392  00CC  00C0               	movwf	??_getKey
  1393  00CD  0A42               	incf	getKey@keypadState,w
  1394  00CE  0084               	movwf	4
  1395  00CF  0840               	movf	??_getKey,w
  1396  00D0  0080               	movwf	0
  1397                           
  1398                           ;Keypad4X4.c: 86: return;
  1399  00D1  0008               	return
  1400  00D2                     l26:	
  1401                           ;Keypad4X4.c: 87: }
  1402                           
  1403                           
  1404                           ;Keypad4X4.c: 89: else if ((PORTB & 0x40) == 0x00)
  1405  00D2  1B06               	btfsc	6,6	;volatile
  1406  00D3  28F0               	goto	l28
  1407                           
  1408                           ;Keypad4X4.c: 90: {
  1409                           ;Keypad4X4.c: 91: _delay((unsigned long)((100)*(4000000/4000.0)));
  1410  00D4  3082               	movlw	130
  1411  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1412  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1413  00D7  00C1               	movwf	??_getKey+1
  1414  00D8  30DD               	movlw	221
  1415  00D9  00C0               	movwf	??_getKey
  1416  00DA                     u1337:	
  1417  00DA  0BC0               	decfsz	??_getKey,f
  1418  00DB  28DA               	goto	u1337
  1419  00DC  0BC1               	decfsz	??_getKey+1,f
  1420  00DD  28DA               	goto	u1337
  1421  00DE  0000               	nop
  1422                           
  1423                           ;Keypad4X4.c: 92: buttonPressed = BUTTON_7;
  1424  00DF  3007               	movlw	7
  1425  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1426  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1427  00E2  00C0               	movwf	??_getKey
  1428  00E3  0840               	movf	??_getKey,w
  1429  00E4  00FD               	movwf	_buttonPressed
  1430                           
  1431                           ;Keypad4X4.c: 93: keypadState->keyPressIndicator = 1;
  1432  00E5  0842               	movf	getKey@keypadState,w
  1433  00E6  0084               	movwf	4
  1434  00E7  1383               	bcf	3,7	;select IRP bank0
  1435  00E8  1400               	bsf	0,0
  1436                           
  1437                           ;Keypad4X4.c: 94: keypadState->keyPressed = buttonPressed;
  1438  00E9  087D               	movf	_buttonPressed,w
  1439  00EA  00C0               	movwf	??_getKey
  1440  00EB  0A42               	incf	getKey@keypadState,w
  1441  00EC  0084               	movwf	4
  1442  00ED  0840               	movf	??_getKey,w
  1443  00EE  0080               	movwf	0
  1444                           
  1445                           ;Keypad4X4.c: 95: return;
  1446  00EF  0008               	return
  1447  00F0                     l28:	
  1448                           ;Keypad4X4.c: 96: }
  1449                           
  1450                           
  1451                           ;Keypad4X4.c: 98: else if ((PORTB & 0x80) == 0x00)
  1452  00F0  1B86               	btfsc	6,7	;volatile
  1453  00F1  290E               	goto	l1671
  1454                           
  1455                           ;Keypad4X4.c: 99: {
  1456                           ;Keypad4X4.c: 100: _delay((unsigned long)((100)*(4000000/4000.0)));
  1457  00F2  3082               	movlw	130
  1458  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1459  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1460  00F5  00C1               	movwf	??_getKey+1
  1461  00F6  30DD               	movlw	221
  1462  00F7  00C0               	movwf	??_getKey
  1463  00F8                     u1347:	
  1464  00F8  0BC0               	decfsz	??_getKey,f
  1465  00F9  28F8               	goto	u1347
  1466  00FA  0BC1               	decfsz	??_getKey+1,f
  1467  00FB  28F8               	goto	u1347
  1468  00FC  0000               	nop
  1469                           
  1470                           ;Keypad4X4.c: 101: buttonPressed = BUTTON_8;
  1471  00FD  3008               	movlw	8
  1472  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1473  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1474  0100  00C0               	movwf	??_getKey
  1475  0101  0840               	movf	??_getKey,w
  1476  0102  00FD               	movwf	_buttonPressed
  1477                           
  1478                           ;Keypad4X4.c: 102: keypadState->keyPressIndicator = 1;
  1479  0103  0842               	movf	getKey@keypadState,w
  1480  0104  0084               	movwf	4
  1481  0105  1383               	bcf	3,7	;select IRP bank0
  1482  0106  1400               	bsf	0,0
  1483                           
  1484                           ;Keypad4X4.c: 103: keypadState->keyPressed = buttonPressed;
  1485  0107  087D               	movf	_buttonPressed,w
  1486  0108  00C0               	movwf	??_getKey
  1487  0109  0A42               	incf	getKey@keypadState,w
  1488  010A  0084               	movwf	4
  1489  010B  0840               	movf	??_getKey,w
  1490  010C  0080               	movwf	0
  1491                           
  1492                           ;Keypad4X4.c: 104: return;
  1493  010D  0008               	return
  1494  010E                     l1671:	
  1495                           
  1496                           ;Keypad4X4.c: 105: }
  1497                           ;Keypad4X4.c: 107: PORTB = 0xFB;
  1498  010E  30FB               	movlw	251
  1499  010F  0086               	movwf	6	;volatile
  1500                           
  1501                           ;Keypad4X4.c: 108: if ((PORTB & 0x10) == 0x00)
  1502  0110  1A06               	btfsc	6,4	;volatile
  1503  0111  292E               	goto	l31
  1504                           
  1505                           ;Keypad4X4.c: 109: {
  1506                           ;Keypad4X4.c: 110: _delay((unsigned long)((100)*(4000000/4000.0)));
  1507  0112  3082               	movlw	130
  1508  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1509  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1510  0115  00C1               	movwf	??_getKey+1
  1511  0116  30DD               	movlw	221
  1512  0117  00C0               	movwf	??_getKey
  1513  0118                     u1357:	
  1514  0118  0BC0               	decfsz	??_getKey,f
  1515  0119  2918               	goto	u1357
  1516  011A  0BC1               	decfsz	??_getKey+1,f
  1517  011B  2918               	goto	u1357
  1518  011C  0000               	nop
  1519                           
  1520                           ;Keypad4X4.c: 111: buttonPressed = BUTTON_9;
  1521  011D  3009               	movlw	9
  1522  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1523  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1524  0120  00C0               	movwf	??_getKey
  1525  0121  0840               	movf	??_getKey,w
  1526  0122  00FD               	movwf	_buttonPressed
  1527                           
  1528                           ;Keypad4X4.c: 112: keypadState->keyPressIndicator = 1;
  1529  0123  0842               	movf	getKey@keypadState,w
  1530  0124  0084               	movwf	4
  1531  0125  1383               	bcf	3,7	;select IRP bank0
  1532  0126  1400               	bsf	0,0
  1533                           
  1534                           ;Keypad4X4.c: 113: keypadState->keyPressed = buttonPressed;
  1535  0127  087D               	movf	_buttonPressed,w
  1536  0128  00C0               	movwf	??_getKey
  1537  0129  0A42               	incf	getKey@keypadState,w
  1538  012A  0084               	movwf	4
  1539  012B  0840               	movf	??_getKey,w
  1540  012C  0080               	movwf	0
  1541                           
  1542                           ;Keypad4X4.c: 114: return;
  1543  012D  0008               	return
  1544  012E                     l31:	
  1545                           ;Keypad4X4.c: 115: }
  1546                           
  1547                           
  1548                           ;Keypad4X4.c: 117: else if ((PORTB & 0x20) == 0x00)
  1549  012E  1A86               	btfsc	6,5	;volatile
  1550  012F  294C               	goto	l33
  1551                           
  1552                           ;Keypad4X4.c: 118: {
  1553                           ;Keypad4X4.c: 119: _delay((unsigned long)((100)*(4000000/4000.0)));
  1554  0130  3082               	movlw	130
  1555  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1557  0133  00C1               	movwf	??_getKey+1
  1558  0134  30DD               	movlw	221
  1559  0135  00C0               	movwf	??_getKey
  1560  0136                     u1367:	
  1561  0136  0BC0               	decfsz	??_getKey,f
  1562  0137  2936               	goto	u1367
  1563  0138  0BC1               	decfsz	??_getKey+1,f
  1564  0139  2936               	goto	u1367
  1565  013A  0000               	nop
  1566                           
  1567                           ;Keypad4X4.c: 120: buttonPressed = BUTTON_10;
  1568  013B  300A               	movlw	10
  1569  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1570  013D  1303               	bcf	3,6	;RP1=0, select bank0
  1571  013E  00C0               	movwf	??_getKey
  1572  013F  0840               	movf	??_getKey,w
  1573  0140  00FD               	movwf	_buttonPressed
  1574                           
  1575                           ;Keypad4X4.c: 121: keypadState->keyPressIndicator = 1;
  1576  0141  0842               	movf	getKey@keypadState,w
  1577  0142  0084               	movwf	4
  1578  0143  1383               	bcf	3,7	;select IRP bank0
  1579  0144  1400               	bsf	0,0
  1580                           
  1581                           ;Keypad4X4.c: 122: keypadState->keyPressed = buttonPressed;
  1582  0145  087D               	movf	_buttonPressed,w
  1583  0146  00C0               	movwf	??_getKey
  1584  0147  0A42               	incf	getKey@keypadState,w
  1585  0148  0084               	movwf	4
  1586  0149  0840               	movf	??_getKey,w
  1587  014A  0080               	movwf	0
  1588                           
  1589                           ;Keypad4X4.c: 123: return;
  1590  014B  0008               	return
  1591  014C                     l33:	
  1592                           ;Keypad4X4.c: 124: }
  1593                           
  1594                           
  1595                           ;Keypad4X4.c: 126: else if ((PORTB & 0x40) == 0x00)
  1596  014C  1B06               	btfsc	6,6	;volatile
  1597  014D  296A               	goto	l35
  1598                           
  1599                           ;Keypad4X4.c: 127: {
  1600                           ;Keypad4X4.c: 128: _delay((unsigned long)((100)*(4000000/4000.0)));
  1601  014E  3082               	movlw	130
  1602  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1603  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1604  0151  00C1               	movwf	??_getKey+1
  1605  0152  30DD               	movlw	221
  1606  0153  00C0               	movwf	??_getKey
  1607  0154                     u1377:	
  1608  0154  0BC0               	decfsz	??_getKey,f
  1609  0155  2954               	goto	u1377
  1610  0156  0BC1               	decfsz	??_getKey+1,f
  1611  0157  2954               	goto	u1377
  1612  0158  0000               	nop
  1613                           
  1614                           ;Keypad4X4.c: 129: buttonPressed = BUTTON_11;
  1615  0159  300B               	movlw	11
  1616  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1617  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1618  015C  00C0               	movwf	??_getKey
  1619  015D  0840               	movf	??_getKey,w
  1620  015E  00FD               	movwf	_buttonPressed
  1621                           
  1622                           ;Keypad4X4.c: 130: keypadState->keyPressIndicator = 1;
  1623  015F  0842               	movf	getKey@keypadState,w
  1624  0160  0084               	movwf	4
  1625  0161  1383               	bcf	3,7	;select IRP bank0
  1626  0162  1400               	bsf	0,0
  1627                           
  1628                           ;Keypad4X4.c: 131: keypadState->keyPressed = buttonPressed;
  1629  0163  087D               	movf	_buttonPressed,w
  1630  0164  00C0               	movwf	??_getKey
  1631  0165  0A42               	incf	getKey@keypadState,w
  1632  0166  0084               	movwf	4
  1633  0167  0840               	movf	??_getKey,w
  1634  0168  0080               	movwf	0
  1635                           
  1636                           ;Keypad4X4.c: 132: return;
  1637  0169  0008               	return
  1638  016A                     l35:	
  1639                           ;Keypad4X4.c: 133: }
  1640                           
  1641                           
  1642                           ;Keypad4X4.c: 135: else if ((PORTB & 0x80) == 0x00)
  1643  016A  1B86               	btfsc	6,7	;volatile
  1644  016B  2988               	goto	l1713
  1645                           
  1646                           ;Keypad4X4.c: 136: {
  1647                           ;Keypad4X4.c: 137: _delay((unsigned long)((100)*(4000000/4000.0)));
  1648  016C  3082               	movlw	130
  1649  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1650  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1651  016F  00C1               	movwf	??_getKey+1
  1652  0170  30DD               	movlw	221
  1653  0171  00C0               	movwf	??_getKey
  1654  0172                     u1387:	
  1655  0172  0BC0               	decfsz	??_getKey,f
  1656  0173  2972               	goto	u1387
  1657  0174  0BC1               	decfsz	??_getKey+1,f
  1658  0175  2972               	goto	u1387
  1659  0176  0000               	nop
  1660                           
  1661                           ;Keypad4X4.c: 138: buttonPressed = BUTTON_12;
  1662  0177  300C               	movlw	12
  1663  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1664  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1665  017A  00C0               	movwf	??_getKey
  1666  017B  0840               	movf	??_getKey,w
  1667  017C  00FD               	movwf	_buttonPressed
  1668                           
  1669                           ;Keypad4X4.c: 139: keypadState->keyPressIndicator = 1;
  1670  017D  0842               	movf	getKey@keypadState,w
  1671  017E  0084               	movwf	4
  1672  017F  1383               	bcf	3,7	;select IRP bank0
  1673  0180  1400               	bsf	0,0
  1674                           
  1675                           ;Keypad4X4.c: 140: keypadState->keyPressed = buttonPressed;
  1676  0181  087D               	movf	_buttonPressed,w
  1677  0182  00C0               	movwf	??_getKey
  1678  0183  0A42               	incf	getKey@keypadState,w
  1679  0184  0084               	movwf	4
  1680  0185  0840               	movf	??_getKey,w
  1681  0186  0080               	movwf	0
  1682                           
  1683                           ;Keypad4X4.c: 141: return;
  1684  0187  0008               	return
  1685  0188                     l1713:	
  1686                           
  1687                           ;Keypad4X4.c: 142: }
  1688                           ;Keypad4X4.c: 144: PORTB = 0xF7;
  1689  0188  30F7               	movlw	247
  1690  0189  0086               	movwf	6	;volatile
  1691                           
  1692                           ;Keypad4X4.c: 145: if ((PORTB & 0x10) == 0x00)
  1693  018A  1A06               	btfsc	6,4	;volatile
  1694  018B  29A8               	goto	l38
  1695                           
  1696                           ;Keypad4X4.c: 146: {
  1697                           ;Keypad4X4.c: 147: _delay((unsigned long)((100)*(4000000/4000.0)));
  1698  018C  3082               	movlw	130
  1699  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1700  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1701  018F  00C1               	movwf	??_getKey+1
  1702  0190  30DD               	movlw	221
  1703  0191  00C0               	movwf	??_getKey
  1704  0192                     u1397:	
  1705  0192  0BC0               	decfsz	??_getKey,f
  1706  0193  2992               	goto	u1397
  1707  0194  0BC1               	decfsz	??_getKey+1,f
  1708  0195  2992               	goto	u1397
  1709  0196  0000               	nop
  1710                           
  1711                           ;Keypad4X4.c: 148: buttonPressed = BUTTON_13;
  1712  0197  300D               	movlw	13
  1713  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1714  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1715  019A  00C0               	movwf	??_getKey
  1716  019B  0840               	movf	??_getKey,w
  1717  019C  00FD               	movwf	_buttonPressed
  1718                           
  1719                           ;Keypad4X4.c: 149: keypadState->keyPressIndicator = 1;
  1720  019D  0842               	movf	getKey@keypadState,w
  1721  019E  0084               	movwf	4
  1722  019F  1383               	bcf	3,7	;select IRP bank0
  1723  01A0  1400               	bsf	0,0
  1724                           
  1725                           ;Keypad4X4.c: 150: keypadState->keyPressed = buttonPressed;
  1726  01A1  087D               	movf	_buttonPressed,w
  1727  01A2  00C0               	movwf	??_getKey
  1728  01A3  0A42               	incf	getKey@keypadState,w
  1729  01A4  0084               	movwf	4
  1730  01A5  0840               	movf	??_getKey,w
  1731  01A6  0080               	movwf	0
  1732                           
  1733                           ;Keypad4X4.c: 152: }
  1734                           
  1735                           ;Keypad4X4.c: 151: return;
  1736  01A7  0008               	return
  1737  01A8                     l38:	
  1738                           
  1739                           ;Keypad4X4.c: 154: else if ((PORTB & 0x20) == 0x00)
  1740  01A8  1A86               	btfsc	6,5	;volatile
  1741  01A9  29C6               	goto	l40
  1742                           
  1743                           ;Keypad4X4.c: 155: {
  1744                           ;Keypad4X4.c: 156: _delay((unsigned long)((100)*(4000000/4000.0)));
  1745  01AA  3082               	movlw	130
  1746  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1747  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1748  01AD  00C1               	movwf	??_getKey+1
  1749  01AE  30DD               	movlw	221
  1750  01AF  00C0               	movwf	??_getKey
  1751  01B0                     u1407:	
  1752  01B0  0BC0               	decfsz	??_getKey,f
  1753  01B1  29B0               	goto	u1407
  1754  01B2  0BC1               	decfsz	??_getKey+1,f
  1755  01B3  29B0               	goto	u1407
  1756  01B4  0000               	nop
  1757                           
  1758                           ;Keypad4X4.c: 157: buttonPressed = BUTTON_14;
  1759  01B5  300E               	movlw	14
  1760  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1761  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1762  01B8  00C0               	movwf	??_getKey
  1763  01B9  0840               	movf	??_getKey,w
  1764  01BA  00FD               	movwf	_buttonPressed
  1765                           
  1766                           ;Keypad4X4.c: 158: keypadState->keyPressIndicator = 1;
  1767  01BB  0842               	movf	getKey@keypadState,w
  1768  01BC  0084               	movwf	4
  1769  01BD  1383               	bcf	3,7	;select IRP bank0
  1770  01BE  1400               	bsf	0,0
  1771                           
  1772                           ;Keypad4X4.c: 159: keypadState->keyPressed = buttonPressed;
  1773  01BF  087D               	movf	_buttonPressed,w
  1774  01C0  00C0               	movwf	??_getKey
  1775  01C1  0A42               	incf	getKey@keypadState,w
  1776  01C2  0084               	movwf	4
  1777  01C3  0840               	movf	??_getKey,w
  1778  01C4  0080               	movwf	0
  1779                           
  1780                           ;Keypad4X4.c: 161: }
  1781                           
  1782                           ;Keypad4X4.c: 160: return;
  1783  01C5  0008               	return
  1784  01C6                     l40:	
  1785                           
  1786                           ;Keypad4X4.c: 163: else if ((PORTB & 0x40) == 0x00)
  1787  01C6  1B06               	btfsc	6,6	;volatile
  1788  01C7  29E4               	goto	l42
  1789                           
  1790                           ;Keypad4X4.c: 164: {
  1791                           ;Keypad4X4.c: 165: _delay((unsigned long)((100)*(4000000/4000.0)));
  1792  01C8  3082               	movlw	130
  1793  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1794  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1795  01CB  00C1               	movwf	??_getKey+1
  1796  01CC  30DD               	movlw	221
  1797  01CD  00C0               	movwf	??_getKey
  1798  01CE                     u1417:	
  1799  01CE  0BC0               	decfsz	??_getKey,f
  1800  01CF  29CE               	goto	u1417
  1801  01D0  0BC1               	decfsz	??_getKey+1,f
  1802  01D1  29CE               	goto	u1417
  1803  01D2  0000               	nop
  1804                           
  1805                           ;Keypad4X4.c: 166: buttonPressed = BUTTON_15;
  1806  01D3  300F               	movlw	15
  1807  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1808  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1809  01D6  00C0               	movwf	??_getKey
  1810  01D7  0840               	movf	??_getKey,w
  1811  01D8  00FD               	movwf	_buttonPressed
  1812                           
  1813                           ;Keypad4X4.c: 167: keypadState->keyPressIndicator = 1;
  1814  01D9  0842               	movf	getKey@keypadState,w
  1815  01DA  0084               	movwf	4
  1816  01DB  1383               	bcf	3,7	;select IRP bank0
  1817  01DC  1400               	bsf	0,0
  1818                           
  1819                           ;Keypad4X4.c: 168: keypadState->keyPressed = buttonPressed;
  1820  01DD  087D               	movf	_buttonPressed,w
  1821  01DE  00C0               	movwf	??_getKey
  1822  01DF  0A42               	incf	getKey@keypadState,w
  1823  01E0  0084               	movwf	4
  1824  01E1  0840               	movf	??_getKey,w
  1825  01E2  0080               	movwf	0
  1826                           
  1827                           ;Keypad4X4.c: 170: }
  1828                           
  1829                           ;Keypad4X4.c: 169: return;
  1830  01E3  0008               	return
  1831  01E4                     l42:	
  1832                           
  1833                           ;Keypad4X4.c: 172: else if ((PORTB & 0x80) == 0x00)
  1834  01E4  1B86               	btfsc	6,7	;volatile
  1835  01E5  2A02               	goto	l1757
  1836                           
  1837                           ;Keypad4X4.c: 173: {
  1838                           ;Keypad4X4.c: 174: _delay((unsigned long)((100)*(4000000/4000.0)));
  1839  01E6  3082               	movlw	130
  1840  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1841  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1842  01E9  00C1               	movwf	??_getKey+1
  1843  01EA  30DD               	movlw	221
  1844  01EB  00C0               	movwf	??_getKey
  1845  01EC                     u1427:	
  1846  01EC  0BC0               	decfsz	??_getKey,f
  1847  01ED  29EC               	goto	u1427
  1848  01EE  0BC1               	decfsz	??_getKey+1,f
  1849  01EF  29EC               	goto	u1427
  1850  01F0  0000               	nop
  1851                           
  1852                           ;Keypad4X4.c: 175: buttonPressed = BUTTON_16;
  1853  01F1  3010               	movlw	16
  1854  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1855  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1856  01F4  00C0               	movwf	??_getKey
  1857  01F5  0840               	movf	??_getKey,w
  1858  01F6  00FD               	movwf	_buttonPressed
  1859                           
  1860                           ;Keypad4X4.c: 176: keypadState->keyPressIndicator = 1;
  1861  01F7  0842               	movf	getKey@keypadState,w
  1862  01F8  0084               	movwf	4
  1863  01F9  1383               	bcf	3,7	;select IRP bank0
  1864  01FA  1400               	bsf	0,0
  1865                           
  1866                           ;Keypad4X4.c: 177: keypadState->keyPressed = buttonPressed;
  1867  01FB  087D               	movf	_buttonPressed,w
  1868  01FC  00C0               	movwf	??_getKey
  1869  01FD  0A42               	incf	getKey@keypadState,w
  1870  01FE  0084               	movwf	4
  1871  01FF  0840               	movf	??_getKey,w
  1872  0200  0080               	movwf	0
  1873                           
  1874                           ;Keypad4X4.c: 179: }
  1875                           
  1876                           ;Keypad4X4.c: 178: return;
  1877  0201  0008               	return
  1878  0202                     l1757:	
  1879                           
  1880                           ;Keypad4X4.c: 181: else {
  1881                           ;Keypad4X4.c: 182: keypadState->keyPressIndicator = 0;
  1882  0202  0842               	movf	getKey@keypadState,w
  1883  0203  0084               	movwf	4
  1884  0204  1383               	bcf	3,7	;select IRP bank0
  1885  0205  1000               	bcf	0,0
  1886                           
  1887                           ;Keypad4X4.c: 183: keypadState->keyPressed = BUTTON_0;
  1888  0206  0A42               	incf	getKey@keypadState,w
  1889  0207  0084               	movwf	4
  1890  0208  0180               	clrf	0
  1891                           
  1892                           ;Keypad4X4.c: 184: return;
  1893  0209  0008               	return
  1894  020A                     __end_of_getKey:	
  1895                           
  1896                           	psect	text3
  1897  044F                     __ptext3:	
  1898 ;; *************** function _light_led *****************
  1899 ;; Defined at:
  1900 ;;		line 18 in file "led_control.c"
  1901 ;; Parameters:    Size  Location     Type
  1902 ;;  led_register    2    0[BANK0 ] unsigned int 
  1903 ;;  LED_EN          1    2[BANK0 ] unsigned char 
  1904 ;; Auto vars:     Size  Location     Type
  1905 ;;  i               1    4[BANK0 ] unsigned char 
  1906 ;; Return value:  Size  Location     Type
  1907 ;;                  1    wreg      void 
  1908 ;; Registers used:
  1909 ;;		wreg, status,2, status,0
  1910 ;; Tracked objects:
  1911 ;;		On entry : 0/0
  1912 ;;		On exit  : 0/0
  1913 ;;		Unchanged: 0/0
  1914 ;; Data sizes:     COMMON   BANK0   BANK1
  1915 ;;      Params:         0       3       0
  1916 ;;      Locals:         0       1       0
  1917 ;;      Temps:          0       1       0
  1918 ;;      Totals:         0       5       0
  1919 ;;Total ram usage:        5 bytes
  1920 ;; Hardware stack levels used:    1
  1921 ;; Hardware stack levels required when called:    2
  1922 ;; This function calls:
  1923 ;;		Nothing
  1924 ;; This function is called by:
  1925 ;;		_main
  1926 ;; This function uses a non-reentrant model
  1927 ;;
  1928                           
  1929                           
  1930                           ;psect for function _light_led
  1931  044F                     _light_led:	
  1932                           
  1933                           ;led_control.c: 20: uint8_t i;
  1934                           ;led_control.c: 21: if(LED_EN && led_register)
  1935                           
  1936                           ;incstack = 0
  1937                           ; Regs used in _light_led: [wreg+status,2+status,0]
  1938  044F  1283               	bcf	3,5	;RP0=0, select bank0
  1939  0450  1303               	bcf	3,6	;RP1=0, select bank0
  1940  0451  0842               	movf	light_led@LED_EN,w
  1941  0452  1903               	btfsc	3,2
  1942  0453  0008               	return
  1943  0454  0840               	movf	light_led@led_register,w
  1944  0455  0441               	iorwf	light_led@led_register+1,w
  1945  0456  1903               	btfsc	3,2
  1946  0457  0008               	return
  1947                           
  1948                           ;led_control.c: 22: {
  1949                           ;led_control.c: 23: ((volatile _io_reg*)&PORTA)->bit4 = 1;
  1950  0458  1605               	bsf	5,4	;volatile
  1951                           
  1952                           ;led_control.c: 24: for(i = 0; i < 16; i++)
  1953  0459  01C4               	clrf	light_led@i
  1954  045A                     L1:	
  1955  045A  3010               	movlw	16
  1956  045B  0244               	subwf	light_led@i,w
  1957  045C  1803               	btfsc	3,0
  1958  045D  0008               	return
  1959                           
  1960                           ;led_control.c: 25: {
  1961                           ;led_control.c: 26: if(led_register & 0x0001)
  1962  045E  1C40               	btfss	light_led@led_register,0
  1963  045F  2C62               	goto	l1927
  1964                           
  1965                           ;led_control.c: 27: {
  1966                           ;led_control.c: 28: PORTA = i;
  1967  0460  0844               	movf	light_led@i,w
  1968  0461  0085               	movwf	5	;volatile
  1969  0462                     l1927:	
  1970  0462  3001               	movlw	1
  1971  0463  00C3               	movwf	??_light_led
  1972  0464  0843               	movf	??_light_led,w
  1973  0465  07C4               	addwf	light_led@i,f
  1974  0466  2C5A               	goto	L1
  1975  0467                     __end_of_light_led:	
  1976                           
  1977                           	psect	text4
  1978  04C9                     __ptext4:	
  1979 ;; *************** function _controllerInit *****************
  1980 ;; Defined at:
  1981 ;;		line 223 in file "sysFunc.c"
  1982 ;; Parameters:    Size  Location     Type
  1983 ;;		None
  1984 ;; Auto vars:     Size  Location     Type
  1985 ;;		None
  1986 ;; Return value:  Size  Location     Type
  1987 ;;                  1    wreg      void 
  1988 ;; Registers used:
  1989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1990 ;; Tracked objects:
  1991 ;;		On entry : 0/0
  1992 ;;		On exit  : 0/0
  1993 ;;		Unchanged: 0/0
  1994 ;; Data sizes:     COMMON   BANK0   BANK1
  1995 ;;      Params:         0       0       0
  1996 ;;      Locals:         0       0       0
  1997 ;;      Temps:          0       0       0
  1998 ;;      Totals:         0       0       0
  1999 ;;Total ram usage:        0 bytes
  2000 ;; Hardware stack levels used:    1
  2001 ;; Hardware stack levels required when called:    4
  2002 ;; This function calls:
  2003 ;;		_USARTInit
  2004 ;;		_gpioInit
  2005 ;;		_initKeypad
  2006 ;; This function is called by:
  2007 ;;		_main
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011                           
  2012                           ;psect for function _controllerInit
  2013  04C9                     _controllerInit:	
  2014                           
  2015                           ;sysFunc.c: 225: gpioInit();
  2016                           
  2017                           ;incstack = 0
  2018                           ; Regs used in _controllerInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2019  04C9  24E6               	fcall	_gpioInit
  2020                           
  2021                           ;sysFunc.c: 226: USARTInit(9600);
  2022  04CA  3080               	movlw	128
  2023  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2024  04CC  1303               	bcf	3,6	;RP1=0, select bank0
  2025  04CD  00C0               	movwf	USARTInit@baud_rate
  2026  04CE  3025               	movlw	37
  2027  04CF  00C1               	movwf	USARTInit@baud_rate+1
  2028  04D0  2263               	fcall	_USARTInit
  2029                           
  2030                           ;sysFunc.c: 227: initKeypad();
  2031  04D1  24DD               	fcall	_initKeypad
  2032  04D2  0008               	return
  2033  04D3                     __end_of_controllerInit:	
  2034                           ;sysFunc.c: 229: return;
  2035                           
  2036                           
  2037                           	psect	text5
  2038  04DD                     __ptext5:	
  2039 ;; *************** function _initKeypad *****************
  2040 ;; Defined at:
  2041 ;;		line 18 in file "Keypad4X4.c"
  2042 ;; Parameters:    Size  Location     Type
  2043 ;;		None
  2044 ;; Auto vars:     Size  Location     Type
  2045 ;;		None
  2046 ;; Return value:  Size  Location     Type
  2047 ;;                  1    wreg      void 
  2048 ;; Registers used:
  2049 ;;		wreg
  2050 ;; Tracked objects:
  2051 ;;		On entry : 0/0
  2052 ;;		On exit  : 0/0
  2053 ;;		Unchanged: 0/0
  2054 ;; Data sizes:     COMMON   BANK0   BANK1
  2055 ;;      Params:         0       0       0
  2056 ;;      Locals:         0       0       0
  2057 ;;      Temps:          0       0       0
  2058 ;;      Totals:         0       0       0
  2059 ;;Total ram usage:        0 bytes
  2060 ;; Hardware stack levels used:    1
  2061 ;; Hardware stack levels required when called:    2
  2062 ;; This function calls:
  2063 ;;		Nothing
  2064 ;; This function is called by:
  2065 ;;		_controllerInit
  2066 ;; This function uses a non-reentrant model
  2067 ;;
  2068                           
  2069                           
  2070                           ;psect for function _initKeypad
  2071  04DD                     _initKeypad:	
  2072                           
  2073                           ;Keypad4X4.c: 20: TRISB = 0xF0;
  2074                           
  2075                           ;incstack = 0
  2076                           ; Regs used in _initKeypad: [wreg]
  2077  04DD  30F0               	movlw	240
  2078  04DE  1683               	bsf	3,5	;RP0=1, select bank1
  2079  04DF  1303               	bcf	3,6	;RP1=0, select bank1
  2080  04E0  0086               	movwf	6	;volatile
  2081                           
  2082                           ;Keypad4X4.c: 21: PORTB = 0xFF;
  2083  04E1  30FF               	movlw	255
  2084  04E2  1283               	bcf	3,5	;RP0=0, select bank0
  2085  04E3  1303               	bcf	3,6	;RP1=0, select bank0
  2086  04E4  0086               	movwf	6	;volatile
  2087  04E5  0008               	return
  2088  04E6                     __end_of_initKeypad:	
  2089                           
  2090                           	psect	text6
  2091  04E6                     __ptext6:	
  2092 ;; *************** function _gpioInit *****************
  2093 ;; Defined at:
  2094 ;;		line 19 in file "sysFunc.c"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		status,2, status,0, pclath, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMMON   BANK0   BANK1
  2108 ;;      Params:         0       0       0
  2109 ;;      Locals:         0       0       0
  2110 ;;      Temps:          0       0       0
  2111 ;;      Totals:         0       0       0
  2112 ;;Total ram usage:        0 bytes
  2113 ;; Hardware stack levels used:    1
  2114 ;; Hardware stack levels required when called:    3
  2115 ;; This function calls:
  2116 ;;		_rs485Rx
  2117 ;; This function is called by:
  2118 ;;		_controllerInit
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122                           
  2123                           ;psect for function _gpioInit
  2124  04E6                     _gpioInit:	
  2125                           
  2126                           ;sysFunc.c: 21: ANSELH = 0x00;
  2127                           
  2128                           ;incstack = 0
  2129                           ; Regs used in _gpioInit: [status,2+status,0+pclath+cstack]
  2130  04E6  1683               	bsf	3,5	;RP0=1, select bank3
  2131  04E7  1703               	bsf	3,6	;RP1=1, select bank3
  2132  04E8  0189               	clrf	9	;volatile
  2133                           
  2134                           ;sysFunc.c: 22: OPTION_REGbits.nRBPU = 0;
  2135  04E9  1683               	bsf	3,5	;RP0=1, select bank1
  2136  04EA  1303               	bcf	3,6	;RP1=0, select bank1
  2137  04EB  1381               	bcf	1,7	;volatile
  2138                           
  2139                           ;sysFunc.c: 23: TRISCbits.TRISC5 = 0;
  2140  04EC  1287               	bcf	7,5	;volatile
  2141                           
  2142                           ;sysFunc.c: 24: rs485Rx();
  2143  04ED  24FB               	fcall	_rs485Rx
  2144  04EE  0008               	return
  2145  04EF                     __end_of_gpioInit:	
  2146                           
  2147                           	psect	text7
  2148  0263                     __ptext7:	
  2149 ;; *************** function _USARTInit *****************
  2150 ;; Defined at:
  2151 ;;		line 31 in file "uart.c"
  2152 ;; Parameters:    Size  Location     Type
  2153 ;;  baud_rate       2    0[BANK0 ] unsigned int 
  2154 ;; Auto vars:     Size  Location     Type
  2155 ;;		None
  2156 ;; Return value:  Size  Location     Type
  2157 ;;                  1    wreg      void 
  2158 ;; Registers used:
  2159 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2160 ;; Tracked objects:
  2161 ;;		On entry : 0/0
  2162 ;;		On exit  : 0/0
  2163 ;;		Unchanged: 0/0
  2164 ;; Data sizes:     COMMON   BANK0   BANK1
  2165 ;;      Params:         0       2       0
  2166 ;;      Locals:         0       0       0
  2167 ;;      Temps:          0       1       0
  2168 ;;      Totals:         0       3       0
  2169 ;;Total ram usage:        3 bytes
  2170 ;; Hardware stack levels used:    1
  2171 ;; Hardware stack levels required when called:    2
  2172 ;; This function calls:
  2173 ;;		Nothing
  2174 ;; This function is called by:
  2175 ;;		_controllerInit
  2176 ;; This function uses a non-reentrant model
  2177 ;;
  2178                           
  2179                           
  2180                           ;psect for function _USARTInit
  2181  0263                     _USARTInit:	
  2182                           
  2183                           ;uart.c: 34: UQFront=UQEnd=-1;
  2184                           
  2185                           ;incstack = 0
  2186                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  2187  0263  30FF               	movlw	255
  2188  0264  00FA               	movwf	_UQEnd	;volatile
  2189  0265  1283               	bcf	3,5	;RP0=0, select bank0
  2190  0266  1303               	bcf	3,6	;RP1=0, select bank0
  2191  0267  00C2               	movwf	??_USARTInit
  2192  0268  0842               	movf	??_USARTInit,w
  2193  0269  00FB               	movwf	_UQFront	;volatile
  2194                           
  2195                           ;uart.c: 37: BRGH = 1;
  2196  026A  1683               	bsf	3,5	;RP0=1, select bank1
  2197  026B  1303               	bcf	3,6	;RP1=0, select bank1
  2198  026C  1518               	bsf	24,2	;volatile
  2199                           
  2200                           ;uart.c: 38: switch(baud_rate)
  2201  026D  2A79               	goto	l1777
  2202  026E                     l1767:	
  2203                           ;uart.c: 39: {
  2204                           ;uart.c: 40: case 9600:
  2205                           
  2206                           
  2207                           ;uart.c: 41: SPBRG=25;
  2208  026E  3019               	movlw	25
  2209  026F  2A75               	goto	L4
  2210  0270                     l1769:	
  2211                           ;uart.c: 43: case 19200:
  2212                           
  2213                           ;uart.c: 42: break;
  2214                           
  2215                           
  2216                           ;uart.c: 44: SPBRG=64;
  2217  0270  3040               	movlw	64
  2218  0271  2A75               	goto	L4
  2219  0272                     l1771:	
  2220                           ;uart.c: 46: case 28800:
  2221                           
  2222                           ;uart.c: 45: break;
  2223                           
  2224                           
  2225                           ;uart.c: 47: SPBRG=42;
  2226  0272  302A               	movlw	42
  2227  0273  2A75               	goto	L4
  2228  0274                     l1773:	
  2229                           ;uart.c: 49: case 33600:
  2230                           
  2231                           ;uart.c: 48: break;
  2232                           
  2233                           
  2234                           ;uart.c: 50: SPBRG=36;
  2235  0274  3024               	movlw	36
  2236  0275                     L4:	
  2237  0275  1683               	bsf	3,5	;RP0=1, select bank1
  2238  0276  1303               	bcf	3,6	;RP1=0, select bank1
  2239  0277  0099               	movwf	25	;volatile
  2240                           
  2241                           ;uart.c: 52: }
  2242                           
  2243                           ;uart.c: 51: break;
  2244  0278  2A9D               	goto	l74
  2245  0279                     l1777:	
  2246                           
  2247                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  2248                           ; Switch size 1, requested type "space"
  2249                           ; Number of cases is 4, Range of values is 37 to 131
  2250                           ; switch strategies available:
  2251                           ; Name         Instructions Cycles
  2252                           ; simple_byte           13     7 (average)
  2253                           ; direct_byte          104     9 (fixed)
  2254                           ; jumptable            263     9 (fixed)
  2255                           ;	Chosen strategy is simple_byte
  2256  0279  1283               	bcf	3,5	;RP0=0, select bank0
  2257  027A  1303               	bcf	3,6	;RP1=0, select bank0
  2258  027B  0841               	movf	USARTInit@baud_rate+1,w
  2259  027C  3A25               	xorlw	37	; case 37
  2260  027D  1903               	skipnz
  2261  027E  2A89               	goto	l2193
  2262  027F  3A6E               	xorlw	110	; case 75
  2263  0280  1903               	skipnz
  2264  0281  2A8E               	goto	l2195
  2265  0282  3A3B               	xorlw	59	; case 112
  2266  0283  1903               	skipnz
  2267  0284  2A93               	goto	l2197
  2268  0285  3AF3               	xorlw	243	; case 131
  2269  0286  1903               	skipnz
  2270  0287  2A98               	goto	l2199
  2271  0288  2A9D               	goto	l74
  2272  0289                     l2193:	
  2273                           
  2274                           ; Switch size 1, requested type "space"
  2275                           ; Number of cases is 1, Range of values is 128 to 128
  2276                           ; switch strategies available:
  2277                           ; Name         Instructions Cycles
  2278                           ; simple_byte            4     3 (average)
  2279                           ; direct_byte           10     9 (fixed)
  2280                           ; jumptable            263     9 (fixed)
  2281                           ;	Chosen strategy is simple_byte
  2282  0289  0840               	movf	USARTInit@baud_rate,w
  2283  028A  3A80               	xorlw	128	; case 128
  2284  028B  1903               	skipnz
  2285  028C  2A6E               	goto	l1767
  2286  028D  2A9D               	goto	l74
  2287  028E                     l2195:	
  2288                           
  2289                           ; Switch size 1, requested type "space"
  2290                           ; Number of cases is 1, Range of values is 0 to 0
  2291                           ; switch strategies available:
  2292                           ; Name         Instructions Cycles
  2293                           ; simple_byte            4     3 (average)
  2294                           ; direct_byte            7     6 (fixed)
  2295                           ; jumptable            260     6 (fixed)
  2296                           ;	Chosen strategy is simple_byte
  2297  028E  0840               	movf	USARTInit@baud_rate,w
  2298  028F  3A00               	xorlw	0	; case 0
  2299  0290  1903               	skipnz
  2300  0291  2A70               	goto	l1769
  2301  0292  2A9D               	goto	l74
  2302  0293                     l2197:	
  2303                           
  2304                           ; Switch size 1, requested type "space"
  2305                           ; Number of cases is 1, Range of values is 128 to 128
  2306                           ; switch strategies available:
  2307                           ; Name         Instructions Cycles
  2308                           ; simple_byte            4     3 (average)
  2309                           ; direct_byte           10     9 (fixed)
  2310                           ; jumptable            263     9 (fixed)
  2311                           ;	Chosen strategy is simple_byte
  2312  0293  0840               	movf	USARTInit@baud_rate,w
  2313  0294  3A80               	xorlw	128	; case 128
  2314  0295  1903               	skipnz
  2315  0296  2A72               	goto	l1771
  2316  0297  2A9D               	goto	l74
  2317  0298                     l2199:	
  2318                           
  2319                           ; Switch size 1, requested type "space"
  2320                           ; Number of cases is 1, Range of values is 64 to 64
  2321                           ; switch strategies available:
  2322                           ; Name         Instructions Cycles
  2323                           ; simple_byte            4     3 (average)
  2324                           ; direct_byte           10     9 (fixed)
  2325                           ; jumptable            263     9 (fixed)
  2326                           ;	Chosen strategy is simple_byte
  2327  0298  0840               	movf	USARTInit@baud_rate,w
  2328  0299  3A40               	xorlw	64	; case 64
  2329  029A  1903               	skipnz
  2330  029B  2A74               	goto	l1773
  2331  029C  2A9D               	goto	l74
  2332  029D                     l74:	
  2333                           
  2334                           ;uart.c: 54: TXSTAbits.TX9=0;
  2335  029D  1683               	bsf	3,5	;RP0=1, select bank1
  2336  029E  1303               	bcf	3,6	;RP1=0, select bank1
  2337  029F  1318               	bcf	24,6	;volatile
  2338                           
  2339                           ;uart.c: 55: TXSTAbits.TXEN=1;
  2340  02A0  1698               	bsf	24,5	;volatile
  2341                           
  2342                           ;uart.c: 56: TXSTAbits.SYNC=0;
  2343  02A1  1218               	bcf	24,4	;volatile
  2344                           
  2345                           ;uart.c: 57: TXSTAbits.BRGH=1;
  2346  02A2  1518               	bsf	24,2	;volatile
  2347                           
  2348                           ;uart.c: 60: RCSTAbits.SPEN=1;
  2349  02A3  1283               	bcf	3,5	;RP0=0, select bank0
  2350  02A4  1303               	bcf	3,6	;RP1=0, select bank0
  2351  02A5  1798               	bsf	24,7	;volatile
  2352                           
  2353                           ;uart.c: 61: RCSTAbits.RX9=0;
  2354  02A6  1318               	bcf	24,6	;volatile
  2355                           
  2356                           ;uart.c: 62: RCSTAbits.CREN=1;
  2357  02A7  1618               	bsf	24,4	;volatile
  2358                           
  2359                           ;uart.c: 63: RCSTAbits.ADDEN=0;
  2360  02A8  1198               	bcf	24,3	;volatile
  2361                           
  2362                           ;uart.c: 66: PIE1bits.RCIE=1;
  2363  02A9  1683               	bsf	3,5	;RP0=1, select bank1
  2364  02AA  1303               	bcf	3,6	;RP1=0, select bank1
  2365  02AB  168C               	bsf	12,5	;volatile
  2366                           
  2367                           ;uart.c: 67: INTCONbits.PEIE=1;
  2368  02AC  170B               	bsf	11,6	;volatile
  2369                           
  2370                           ;uart.c: 69: (GIE = 1);
  2371  02AD  178B               	bsf	11,7	;volatile
  2372  02AE  0008               	return
  2373  02AF                     __end_of_USARTInit:	
  2374                           
  2375                           	psect	text8
  2376  0436                     __ptext8:	
  2377 ;; *************** function _checkCommandRx *****************
  2378 ;; Defined at:
  2379 ;;		line 248 in file "sysFunc.c"
  2380 ;; Parameters:    Size  Location     Type
  2381 ;;		None
  2382 ;; Auto vars:     Size  Location     Type
  2383 ;;  buffer          6   17[BANK0 ] unsigned char [6]
  2384 ;; Return value:  Size  Location     Type
  2385 ;;                  1    wreg      void 
  2386 ;; Registers used:
  2387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2388 ;; Tracked objects:
  2389 ;;		On entry : 0/0
  2390 ;;		On exit  : 0/0
  2391 ;;		Unchanged: 0/0
  2392 ;; Data sizes:     COMMON   BANK0   BANK1
  2393 ;;      Params:         0       0       0
  2394 ;;      Locals:         0       6       0
  2395 ;;      Temps:          0       1       0
  2396 ;;      Totals:         0       7       0
  2397 ;;Total ram usage:        7 bytes
  2398 ;; Hardware stack levels used:    1
  2399 ;; Hardware stack levels required when called:    6
  2400 ;; This function calls:
  2401 ;;		_USARTReadBuffer
  2402 ;;		_runProtocol
  2403 ;;		_sortRxFrame
  2404 ;; This function is called by:
  2405 ;;		_main
  2406 ;; This function uses a non-reentrant model
  2407 ;;
  2408                           
  2409                           
  2410                           ;psect for function _checkCommandRx
  2411  0436                     _checkCommandRx:	
  2412                           
  2413                           ;sysFunc.c: 250: uint8_t buffer[6];
  2414                           ;sysFunc.c: 252: if(rxCount >= (12 / 2))
  2415                           
  2416                           ;incstack = 0
  2417                           ; Regs used in _checkCommandRx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2418  0436  3006               	movlw	6
  2419  0437  1283               	bcf	3,5	;RP0=0, select bank0
  2420  0438  1303               	bcf	3,6	;RP1=0, select bank0
  2421  0439  0236               	subwf	_rxCount,w
  2422  043A  1C03               	skipc
  2423  043B  0008               	return
  2424                           
  2425                           ;sysFunc.c: 253: {
  2426                           ;sysFunc.c: 254: USARTReadBuffer(buffer, sizeof(buffer));
  2427  043C  3006               	movlw	6
  2428  043D  00C2               	movwf	USARTReadBuffer@len
  2429  043E  3000               	movlw	0
  2430  043F  00C3               	movwf	USARTReadBuffer@len+1
  2431  0440  3051               	movlw	(low (checkCommandRx@buffer| 0))& (0+255)
  2432  0441  23E1               	fcall	_USARTReadBuffer
  2433                           
  2434                           ;sysFunc.c: 255: rxCount -= (12 / 2);
  2435  0442  3006               	movlw	6
  2436  0443  1283               	bcf	3,5	;RP0=0, select bank0
  2437  0444  1303               	bcf	3,6	;RP1=0, select bank0
  2438  0445  02B6               	subwf	_rxCount,f
  2439                           
  2440                           ;sysFunc.c: 256: sortRxFrame(buffer, &recvCommand);
  2441  0446  3038               	movlw	(low (_recvCommand| 0))& (0+255)
  2442  0447  00D0               	movwf	??_checkCommandRx
  2443  0448  0850               	movf	??_checkCommandRx,w
  2444  0449  00C0               	movwf	sortRxFrame@commandStruct
  2445  044A  3051               	movlw	(low (checkCommandRx@buffer| 0))& (0+255)
  2446  044B  22AF               	fcall	_sortRxFrame
  2447                           
  2448                           ;sysFunc.c: 257: runProtocol(&recvCommand);
  2449  044C  3038               	movlw	(low (_recvCommand| 0))& (0+255)
  2450  044D  22F5               	fcall	_runProtocol
  2451  044E  0008               	return
  2452  044F                     __end_of_checkCommandRx:	
  2453                           
  2454                           	psect	text9
  2455  02AF                     __ptext9:	
  2456 ;; *************** function _sortRxFrame *****************
  2457 ;; Defined at:
  2458 ;;		line 49 in file "sysFunc.c"
  2459 ;; Parameters:    Size  Location     Type
  2460 ;;  rxBuf           1    wreg     PTR unsigned char 
  2461 ;;		 -> checkCommandRx@buffer(6), 
  2462 ;;  commandStruc    1    0[BANK0 ] PTR struct .
  2463 ;;		 -> recvCommand(6), 
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;  rxBuf           1    3[BANK0 ] PTR unsigned char 
  2466 ;;		 -> checkCommandRx@buffer(6), 
  2467 ;;  command         1    5[BANK0 ] PTR struct .
  2468 ;;		 -> checkCommandRx@buffer(6), 
  2469 ;;  err             1    4[BANK0 ] enum E1716
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      enum E1716
  2472 ;; Registers used:
  2473 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1
  2479 ;;      Params:         0       1       0
  2480 ;;      Locals:         0       3       0
  2481 ;;      Temps:          0       2       0
  2482 ;;      Totals:         0       6       0
  2483 ;;Total ram usage:        6 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    2
  2486 ;; This function calls:
  2487 ;;		Nothing
  2488 ;; This function is called by:
  2489 ;;		_checkCommandRx
  2490 ;; This function uses a non-reentrant model
  2491 ;;
  2492                           
  2493                           
  2494                           ;psect for function _sortRxFrame
  2495  02AF                     _sortRxFrame:	
  2496                           
  2497                           ;incstack = 0
  2498                           ; Regs used in _sortRxFrame: [wreg-fsr0h+status,2+status,0]
  2499                           ;sortRxFrame@rxBuf stored from wreg
  2500  02AF  1283               	bcf	3,5	;RP0=0, select bank0
  2501  02B0  1303               	bcf	3,6	;RP1=0, select bank0
  2502  02B1  00C3               	movwf	sortRxFrame@rxBuf
  2503                           
  2504                           ;sysFunc.c: 51: err_t err;
  2505                           ;sysFunc.c: 52: command_t *command;
  2506                           ;sysFunc.c: 53: command = rxBuf;
  2507  02B2  0843               	movf	sortRxFrame@rxBuf,w
  2508  02B3  00C1               	movwf	??_sortRxFrame
  2509  02B4  0841               	movf	??_sortRxFrame,w
  2510  02B5  00C5               	movwf	sortRxFrame@command
  2511                           
  2512                           ;sysFunc.c: 54: if(command->startByte == 0xFF)
  2513  02B6  0845               	movf	sortRxFrame@command,w
  2514  02B7  0084               	movwf	4
  2515  02B8  1383               	bcf	3,7	;select IRP bank0
  2516  02B9  0A00               	incf	0,w
  2517  02BA  1D03               	btfss	3,2
  2518  02BB  2AF0               	goto	l1831
  2519                           
  2520                           ;sysFunc.c: 55: if(command->panelId == 0x01)
  2521  02BC  0A45               	incf	sortRxFrame@command,w
  2522  02BD  0084               	movwf	4
  2523  02BE  0300               	decf	0,w
  2524  02BF  1D03               	btfss	3,2
  2525  02C0  2AED               	goto	l249
  2526                           
  2527                           ;sysFunc.c: 56: if(command->endByte == 0xFE)
  2528  02C1  0845               	movf	sortRxFrame@command,w
  2529  02C2  3E05               	addlw	5
  2530  02C3  0084               	movwf	4
  2531  02C4  30FE               	movlw	254
  2532  02C5  0600               	xorwf	0,w
  2533  02C6  1D03               	btfss	3,2
  2534  02C7  2AE8               	goto	l1827
  2535                           
  2536                           ;sysFunc.c: 57: {
  2537                           ;sysFunc.c: 58: commandStruct->commandType = command->commandType;
  2538  02C8  0845               	movf	sortRxFrame@command,w
  2539  02C9  3E02               	addlw	2
  2540  02CA  0084               	movwf	4
  2541  02CB  0800               	movf	0,w
  2542  02CC  397F               	andlw	127
  2543  02CD  00C1               	movwf	??_sortRxFrame
  2544  02CE  0840               	movf	sortRxFrame@commandStruct,w
  2545  02CF  3E02               	addlw	2
  2546  02D0  0084               	movwf	4
  2547  02D1  0800               	movf	0,w
  2548  02D2  0641               	xorwf	??_sortRxFrame,w
  2549  02D3  3980               	andlw	-128
  2550  02D4  0641               	xorwf	??_sortRxFrame,w
  2551  02D5  0080               	movwf	0
  2552                           
  2553                           ;sysFunc.c: 59: commandStruct->param = command->param;
  2554  02D6  0845               	movf	sortRxFrame@command,w
  2555  02D7  3E03               	addlw	3
  2556  02D8  0084               	movwf	4
  2557  02D9  0800               	movf	0,w
  2558  02DA  00C1               	movwf	??_sortRxFrame
  2559  02DB  0A84               	incf	4,f
  2560  02DC  0800               	movf	0,w
  2561  02DD  00C2               	movwf	??_sortRxFrame+1
  2562  02DE  0840               	movf	sortRxFrame@commandStruct,w
  2563  02DF  3E03               	addlw	3
  2564  02E0  0084               	movwf	4
  2565  02E1  0841               	movf	??_sortRxFrame,w
  2566  02E2  0080               	movwf	0
  2567  02E3  0A84               	incf	4,f
  2568  02E4  0842               	movf	??_sortRxFrame+1,w
  2569  02E5  0080               	movwf	0
  2570                           
  2571                           ;sysFunc.c: 60: err = ERR_OK;
  2572  02E6  01C4               	clrf	sortRxFrame@err
  2573                           
  2574                           ;sysFunc.c: 62: }
  2575                           
  2576                           ;sysFunc.c: 61: return err;
  2577                           ;	Return value of _sortRxFrame is never used
  2578  02E7  0008               	return
  2579  02E8                     l1827:	
  2580                           
  2581                           ;sysFunc.c: 63: else { err = ERR_END; return err;}
  2582  02E8  3004               	movlw	4
  2583  02E9  00C1               	movwf	??_sortRxFrame
  2584  02EA  0841               	movf	??_sortRxFrame,w
  2585  02EB  00C4               	movwf	sortRxFrame@err
  2586                           
  2587                           ;	Return value of _sortRxFrame is never used
  2588  02EC  0008               	return
  2589  02ED                     l249:	
  2590                           
  2591                           ;sysFunc.c: 64: else { err = ERR_ID; return err;}
  2592  02ED  01C4               	clrf	sortRxFrame@err
  2593  02EE  0AC4               	incf	sortRxFrame@err,f
  2594                           
  2595                           ;	Return value of _sortRxFrame is never used
  2596  02EF  0008               	return
  2597  02F0                     l1831:	
  2598                           
  2599                           ;sysFunc.c: 65: else { err = ERR_STRT; return err;}
  2600  02F0  3003               	movlw	3
  2601  02F1  00C1               	movwf	??_sortRxFrame
  2602  02F2  0841               	movf	??_sortRxFrame,w
  2603  02F3  00C4               	movwf	sortRxFrame@err
  2604                           
  2605                           ;	Return value of _sortRxFrame is never used
  2606  02F4  0008               	return
  2607  02F5                     __end_of_sortRxFrame:	
  2608                           
  2609                           	psect	text10
  2610  02F5                     __ptext10:	
  2611 ;; *************** function _runProtocol *****************
  2612 ;; Defined at:
  2613 ;;		line 68 in file "sysFunc.c"
  2614 ;; Parameters:    Size  Location     Type
  2615 ;;  commandRecv     1    wreg     PTR struct .
  2616 ;;		 -> recvCommand(6), 
  2617 ;; Auto vars:     Size  Location     Type
  2618 ;;  commandRecv     1   15[BANK0 ] PTR struct .
  2619 ;;		 -> recvCommand(6), 
  2620 ;;  command         1   14[BANK0 ] unsigned char 
  2621 ;; Return value:  Size  Location     Type
  2622 ;;                  1    wreg      void 
  2623 ;; Registers used:
  2624 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2625 ;; Tracked objects:
  2626 ;;		On entry : 0/0
  2627 ;;		On exit  : 0/0
  2628 ;;		Unchanged: 0/0
  2629 ;; Data sizes:     COMMON   BANK0   BANK1
  2630 ;;      Params:         0       0       0
  2631 ;;      Locals:         0       2       0
  2632 ;;      Temps:          0       1       0
  2633 ;;      Totals:         0       3       0
  2634 ;;Total ram usage:        3 bytes
  2635 ;; Hardware stack levels used:    1
  2636 ;; Hardware stack levels required when called:    5
  2637 ;; This function calls:
  2638 ;;		_ackButton
  2639 ;;		_resetKeypad
  2640 ;;		_sendButtonInfo
  2641 ;; This function is called by:
  2642 ;;		_checkCommandRx
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645                           
  2646                           
  2647                           ;psect for function _runProtocol
  2648  02F5                     _runProtocol:	
  2649                           
  2650                           ;incstack = 0
  2651                           ; Regs used in _runProtocol: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2652                           ;runProtocol@commandRecv stored from wreg
  2653  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  2654  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  2655  02F7  00CF               	movwf	runProtocol@commandRecv
  2656                           
  2657                           ;sysFunc.c: 70: uint8_t command = commandRecv->commandType;
  2658  02F8  084F               	movf	runProtocol@commandRecv,w
  2659  02F9  3E02               	addlw	2
  2660  02FA  0084               	movwf	4
  2661  02FB  1383               	bcf	3,7	;select IRP bank0
  2662  02FC  0800               	movf	0,w
  2663  02FD  397F               	andlw	127
  2664  02FE  00CD               	movwf	??_runProtocol
  2665  02FF  084D               	movf	??_runProtocol,w
  2666  0300  00CE               	movwf	runProtocol@command
  2667                           
  2668                           ;sysFunc.c: 71: switch(command){
  2669  0301  2B29               	goto	l1851
  2670  0302                     l1837:	
  2671                           ;sysFunc.c: 72: case SEND_BUTTON:
  2672                           
  2673                           
  2674                           ;sysFunc.c: 73: sendButtonInfo(lastKey);
  2675  0302  0835               	movf	_lastKey,w
  2676  0303  23BF               	fcall	_sendButtonInfo
  2677                           
  2678                           ;sysFunc.c: 74: commandRecv->commandType = COMMAND_NULL;
  2679  0304  1283               	bcf	3,5	;RP0=0, select bank0
  2680  0305  1303               	bcf	3,6	;RP1=0, select bank0
  2681  0306  084F               	movf	runProtocol@commandRecv,w
  2682  0307  3E02               	addlw	2
  2683  0308  0084               	movwf	4
  2684  0309  3080               	movlw	-128
  2685  030A  1383               	bcf	3,7	;select IRP bank0
  2686  030B  0580               	andwf	0,f
  2687                           
  2688                           ;sysFunc.c: 75: break;
  2689  030C  0008               	return
  2690  030D                     l1841:	
  2691                           ;sysFunc.c: 77: case ACK_BUTTON:
  2692                           
  2693                           
  2694                           ;sysFunc.c: 78: ackButton(commandRecv->param);
  2695  030D  084F               	movf	runProtocol@commandRecv,w
  2696  030E  3E03               	addlw	3
  2697  030F  0084               	movwf	4
  2698  0310  0800               	movf	0,w
  2699  0311  00C4               	movwf	ackButton@valid_indicator
  2700  0312  0A84               	incf	4,f
  2701  0313  0800               	movf	0,w
  2702  0314  00C5               	movwf	ackButton@valid_indicator+1
  2703  0315  220A               	fcall	_ackButton
  2704                           
  2705                           ;sysFunc.c: 79: commandRecv->commandType = COMMAND_NULL;
  2706  0316  1283               	bcf	3,5	;RP0=0, select bank0
  2707  0317  1303               	bcf	3,6	;RP1=0, select bank0
  2708  0318  084F               	movf	runProtocol@commandRecv,w
  2709  0319  3E02               	addlw	2
  2710  031A  0084               	movwf	4
  2711  031B  3080               	movlw	-128
  2712  031C  1383               	bcf	3,7	;select IRP bank0
  2713  031D  0580               	andwf	0,f
  2714                           
  2715                           ;sysFunc.c: 80: break;
  2716  031E  0008               	return
  2717  031F                     l1845:	
  2718                           ;sysFunc.c: 82: case RESET_KEYPAD:
  2719                           
  2720                           
  2721                           ;sysFunc.c: 83: resetKeypad();
  2722  031F  2375               	fcall	_resetKeypad
  2723                           
  2724                           ;sysFunc.c: 84: commandRecv->commandType = COMMAND_NULL;
  2725  0320  1283               	bcf	3,5	;RP0=0, select bank0
  2726  0321  1303               	bcf	3,6	;RP1=0, select bank0
  2727  0322  084F               	movf	runProtocol@commandRecv,w
  2728  0323  3E02               	addlw	2
  2729  0324  0084               	movwf	4
  2730  0325  3080               	movlw	-128
  2731  0326  1383               	bcf	3,7	;select IRP bank0
  2732  0327  0580               	andwf	0,f
  2733                           
  2734                           ;sysFunc.c: 89: }
  2735                           
  2736                           ;sysFunc.c: 88: break;
  2737                           
  2738                           ;sysFunc.c: 87: default:
  2739                           
  2740                           ;sysFunc.c: 85: break;
  2741  0328  0008               	return
  2742  0329                     l1851:	
  2743  0329  084E               	movf	runProtocol@command,w
  2744                           
  2745                           ; Switch size 1, requested type "space"
  2746                           ; Number of cases is 3, Range of values is 1 to 3
  2747                           ; switch strategies available:
  2748                           ; Name         Instructions Cycles
  2749                           ; simple_byte           10     6 (average)
  2750                           ; direct_byte           12     9 (fixed)
  2751                           ; jumptable            263     9 (fixed)
  2752                           ;	Chosen strategy is simple_byte
  2753  032A  3A01               	xorlw	1	; case 1
  2754  032B  1903               	skipnz
  2755  032C  2B02               	goto	l1837
  2756  032D  3A03               	xorlw	3	; case 2
  2757  032E  1903               	skipnz
  2758  032F  2B0D               	goto	l1841
  2759  0330  3A01               	xorlw	1	; case 3
  2760  0331  1903               	skipnz
  2761  0332  2B1F               	goto	l1845
  2762  0333  2B34               	goto	l263
  2763  0334                     l263:	
  2764  0334  0008               	return
  2765  0335                     __end_of_runProtocol:	
  2766                           
  2767                           	psect	text11
  2768  03BF                     __ptext11:	
  2769 ;; *************** function _sendButtonInfo *****************
  2770 ;; Defined at:
  2771 ;;		line 92 in file "sysFunc.c"
  2772 ;; Parameters:    Size  Location     Type
  2773 ;;  button          1    wreg     unsigned char 
  2774 ;; Auto vars:     Size  Location     Type
  2775 ;;  button          1   11[BANK0 ] unsigned char 
  2776 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2777 ;; Return value:  Size  Location     Type
  2778 ;;                  1    wreg      void 
  2779 ;; Registers used:
  2780 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2781 ;; Tracked objects:
  2782 ;;		On entry : 0/0
  2783 ;;		On exit  : 0/0
  2784 ;;		Unchanged: 0/0
  2785 ;; Data sizes:     COMMON   BANK0   BANK1
  2786 ;;      Params:         0       0       0
  2787 ;;      Locals:         0       7       0
  2788 ;;      Temps:          0       1       0
  2789 ;;      Totals:         0       8       0
  2790 ;;Total ram usage:        8 bytes
  2791 ;; Hardware stack levels used:    1
  2792 ;; Hardware stack levels required when called:    4
  2793 ;; This function calls:
  2794 ;;		_USARTWriteString
  2795 ;;		_rs485Rx
  2796 ;;		_rs485Tx
  2797 ;; This function is called by:
  2798 ;;		_runProtocol
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801                           
  2802                           
  2803                           ;psect for function _sendButtonInfo
  2804  03BF                     _sendButtonInfo:	
  2805                           
  2806                           ;incstack = 0
  2807                           ; Regs used in _sendButtonInfo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2808                           ;sendButtonInfo@button stored from wreg
  2809  03BF  1283               	bcf	3,5	;RP0=0, select bank0
  2810  03C0  1303               	bcf	3,6	;RP1=0, select bank0
  2811  03C1  00CB               	movwf	sendButtonInfo@button
  2812                           
  2813                           ;sysFunc.c: 94: uint8_t buffer[6];
  2814                           ;sysFunc.c: 95: buffer[0] = 0xFF;
  2815  03C2  30FF               	movlw	255
  2816  03C3  00C4               	movwf	??_sendButtonInfo
  2817  03C4  0844               	movf	??_sendButtonInfo,w
  2818  03C5  00C5               	movwf	sendButtonInfo@buffer
  2819                           
  2820                           ;sysFunc.c: 96: buffer[1] = 0x01;
  2821  03C6  01C6               	clrf	sendButtonInfo@buffer+1
  2822  03C7  0AC6               	incf	sendButtonInfo@buffer+1,f
  2823                           
  2824                           ;sysFunc.c: 97: buffer[2] = SEND_BUTTON;
  2825  03C8  01C7               	clrf	sendButtonInfo@buffer+2
  2826  03C9  0AC7               	incf	sendButtonInfo@buffer+2,f
  2827                           
  2828                           ;sysFunc.c: 98: buffer[3] = 0x00;
  2829  03CA  01C8               	clrf	sendButtonInfo@buffer+3
  2830                           
  2831                           ;sysFunc.c: 99: buffer[4] = button;
  2832  03CB  084B               	movf	sendButtonInfo@button,w
  2833  03CC  00C4               	movwf	??_sendButtonInfo
  2834  03CD  0844               	movf	??_sendButtonInfo,w
  2835  03CE  00C9               	movwf	sendButtonInfo@buffer+4
  2836                           
  2837                           ;sysFunc.c: 100: buffer[5] = 0xFE;
  2838  03CF  30FE               	movlw	254
  2839  03D0  00C4               	movwf	??_sendButtonInfo
  2840  03D1  0844               	movf	??_sendButtonInfo,w
  2841  03D2  00CA               	movwf	sendButtonInfo@buffer+5
  2842                           
  2843                           ;sysFunc.c: 102: rs485Tx();
  2844  03D3  24F7               	fcall	_rs485Tx
  2845                           
  2846                           ;sysFunc.c: 103: USARTWriteString(buffer, sizeof(buffer));
  2847  03D4  3045               	movlw	(low (sendButtonInfo@buffer| 0))& (0+255)
  2848  03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2849  03D6  1303               	bcf	3,6	;RP1=0, select bank0
  2850  03D7  00C1               	movwf	USARTWriteString@str
  2851  03D8  3000               	movlw	0
  2852  03D9  00C2               	movwf	USARTWriteString@str+1
  2853  03DA  3006               	movlw	6
  2854  03DB  00C4               	movwf	??_sendButtonInfo
  2855  03DC  0844               	movf	??_sendButtonInfo,w
  2856  03DD  00C3               	movwf	USARTWriteString@len
  2857  03DE  2467               	fcall	_USARTWriteString
  2858                           
  2859                           ;sysFunc.c: 104: rs485Rx();
  2860  03DF  24FB               	fcall	_rs485Rx
  2861  03E0  0008               	return
  2862  03E1                     __end_of_sendButtonInfo:	
  2863                           
  2864                           	psect	text12
  2865  0375                     __ptext12:	
  2866 ;; *************** function _resetKeypad *****************
  2867 ;; Defined at:
  2868 ;;		line 200 in file "sysFunc.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;		None
  2871 ;; Auto vars:     Size  Location     Type
  2872 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2873 ;; Return value:  Size  Location     Type
  2874 ;;                  1    wreg      void 
  2875 ;; Registers used:
  2876 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2877 ;; Tracked objects:
  2878 ;;		On entry : 0/0
  2879 ;;		On exit  : 0/0
  2880 ;;		Unchanged: 0/0
  2881 ;; Data sizes:     COMMON   BANK0   BANK1
  2882 ;;      Params:         0       0       0
  2883 ;;      Locals:         0       6       0
  2884 ;;      Temps:          0       1       0
  2885 ;;      Totals:         0       7       0
  2886 ;;Total ram usage:        7 bytes
  2887 ;; Hardware stack levels used:    1
  2888 ;; Hardware stack levels required when called:    4
  2889 ;; This function calls:
  2890 ;;		_USARTWriteString
  2891 ;;		_rs485Rx
  2892 ;;		_rs485Tx
  2893 ;; This function is called by:
  2894 ;;		_runProtocol
  2895 ;; This function uses a non-reentrant model
  2896 ;;
  2897                           
  2898                           
  2899                           ;psect for function _resetKeypad
  2900  0375                     _resetKeypad:	
  2901                           
  2902                           ;sysFunc.c: 202: uint8_t buffer[6];
  2903                           ;sysFunc.c: 204: buffer[0] = 0xFF;
  2904                           
  2905                           ;incstack = 0
  2906                           ; Regs used in _resetKeypad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2907  0375  30FF               	movlw	255
  2908  0376  1283               	bcf	3,5	;RP0=0, select bank0
  2909  0377  1303               	bcf	3,6	;RP1=0, select bank0
  2910  0378  00C4               	movwf	??_resetKeypad
  2911  0379  0844               	movf	??_resetKeypad,w
  2912  037A  00C5               	movwf	resetKeypad@buffer
  2913                           
  2914                           ;sysFunc.c: 205: buffer[1] = 0x01;
  2915  037B  01C6               	clrf	resetKeypad@buffer+1
  2916  037C  0AC6               	incf	resetKeypad@buffer+1,f
  2917                           
  2918                           ;sysFunc.c: 206: buffer[2] = RESET_KEYPAD;
  2919  037D  3003               	movlw	3
  2920  037E  00C4               	movwf	??_resetKeypad
  2921  037F  0844               	movf	??_resetKeypad,w
  2922  0380  00C7               	movwf	resetKeypad@buffer+2
  2923                           
  2924                           ;sysFunc.c: 207: buffer[3] = 0x00;
  2925  0381  01C8               	clrf	resetKeypad@buffer+3
  2926                           
  2927                           ;sysFunc.c: 208: buffer[4] = 0x00;
  2928  0382  01C9               	clrf	resetKeypad@buffer+4
  2929                           
  2930                           ;sysFunc.c: 209: buffer[5] = 0xFE;
  2931  0383  30FE               	movlw	254
  2932  0384  00C4               	movwf	??_resetKeypad
  2933  0385  0844               	movf	??_resetKeypad,w
  2934  0386  00CA               	movwf	resetKeypad@buffer+5
  2935                           
  2936                           ;sysFunc.c: 211: rs485Tx();
  2937  0387  24F7               	fcall	_rs485Tx
  2938                           
  2939                           ;sysFunc.c: 212: USARTWriteString(buffer, 6);
  2940  0388  3045               	movlw	(low (resetKeypad@buffer| 0))& (0+255)
  2941  0389  1283               	bcf	3,5	;RP0=0, select bank0
  2942  038A  1303               	bcf	3,6	;RP1=0, select bank0
  2943  038B  00C1               	movwf	USARTWriteString@str
  2944  038C  3000               	movlw	0
  2945  038D  00C2               	movwf	USARTWriteString@str+1
  2946  038E  3006               	movlw	6
  2947  038F  00C4               	movwf	??_resetKeypad
  2948  0390  0844               	movf	??_resetKeypad,w
  2949  0391  00C3               	movwf	USARTWriteString@len
  2950  0392  2467               	fcall	_USARTWriteString
  2951                           
  2952                           ;sysFunc.c: 213: rs485Rx();
  2953  0393  24FB               	fcall	_rs485Rx
  2954                           
  2955                           ;sysFunc.c: 215: keypadState.keyLock = 0;
  2956  0394  1283               	bcf	3,5	;RP0=0, select bank0
  2957  0395  1303               	bcf	3,6	;RP1=0, select bank0
  2958  0396  113E               	bcf	_keypadState,2
  2959                           
  2960                           ;sysFunc.c: 216: keypadState.keyPressIndicator = 0;
  2961  0397  103E               	bcf	_keypadState,0
  2962                           
  2963                           ;sysFunc.c: 217: keypadState.keyPressed = BUTTON_0;
  2964  0398  01BF               	clrf	_keypadState+1
  2965                           
  2966                           ;sysFunc.c: 218: lastKey = BUTTON_0;
  2967  0399  01B5               	clrf	_lastKey
  2968                           
  2969                           ;sysFunc.c: 220: ((volatile _io_reg*)&status_register)->bit0 = 0;
  2970  039A  1037               	bcf	_status_register,0	;volatile
  2971  039B  0008               	return
  2972  039C                     __end_of_resetKeypad:	
  2973                           
  2974                           	psect	text13
  2975  020A                     __ptext13:	
  2976 ;; *************** function _ackButton *****************
  2977 ;; Defined at:
  2978 ;;		line 107 in file "sysFunc.c"
  2979 ;; Parameters:    Size  Location     Type
  2980 ;;  valid_indica    2    4[BANK0 ] unsigned int 
  2981 ;; Auto vars:     Size  Location     Type
  2982 ;;  buffer          6    7[BANK0 ] unsigned char [6]
  2983 ;; Return value:  Size  Location     Type
  2984 ;;                  1    wreg      void 
  2985 ;; Registers used:
  2986 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2987 ;; Tracked objects:
  2988 ;;		On entry : 0/0
  2989 ;;		On exit  : 0/0
  2990 ;;		Unchanged: 0/0
  2991 ;; Data sizes:     COMMON   BANK0   BANK1
  2992 ;;      Params:         0       2       0
  2993 ;;      Locals:         0       6       0
  2994 ;;      Temps:          0       1       0
  2995 ;;      Totals:         0       9       0
  2996 ;;Total ram usage:        9 bytes
  2997 ;; Hardware stack levels used:    1
  2998 ;; Hardware stack levels required when called:    4
  2999 ;; This function calls:
  3000 ;;		_USARTWriteString
  3001 ;;		_rs485Rx
  3002 ;;		_rs485Tx
  3003 ;; This function is called by:
  3004 ;;		_runProtocol
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _ackButton
  3010  020A                     _ackButton:	
  3011                           
  3012                           ;sysFunc.c: 109: uint8_t buffer[6];
  3013                           ;sysFunc.c: 111: buffer[0] = 0xFF;
  3014                           
  3015                           ;incstack = 0
  3016                           ; Regs used in _ackButton: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3017  020A  30FF               	movlw	255
  3018  020B  1283               	bcf	3,5	;RP0=0, select bank0
  3019  020C  1303               	bcf	3,6	;RP1=0, select bank0
  3020  020D  00C6               	movwf	??_ackButton
  3021  020E  0846               	movf	??_ackButton,w
  3022  020F  00C7               	movwf	ackButton@buffer
  3023                           
  3024                           ;sysFunc.c: 112: buffer[1] = 0x01;
  3025  0210  01C8               	clrf	ackButton@buffer+1
  3026  0211  0AC8               	incf	ackButton@buffer+1,f
  3027                           
  3028                           ;sysFunc.c: 113: buffer[2] = ACK_BUTTON;
  3029  0212  3002               	movlw	2
  3030  0213  00C6               	movwf	??_ackButton
  3031  0214  0846               	movf	??_ackButton,w
  3032  0215  00C9               	movwf	ackButton@buffer+2
  3033                           
  3034                           ;sysFunc.c: 114: buffer[3] = 0x00;
  3035  0216  01CA               	clrf	ackButton@buffer+3
  3036                           
  3037                           ;sysFunc.c: 115: buffer[4] = 0x00;
  3038  0217  01CB               	clrf	ackButton@buffer+4
  3039                           
  3040                           ;sysFunc.c: 116: buffer[5] = 0xFE;
  3041  0218  30FE               	movlw	254
  3042  0219  00C6               	movwf	??_ackButton
  3043  021A  0846               	movf	??_ackButton,w
  3044  021B  00CC               	movwf	ackButton@buffer+5
  3045                           
  3046                           ;sysFunc.c: 118: rs485Tx();
  3047  021C  24F7               	fcall	_rs485Tx
  3048                           
  3049                           ;sysFunc.c: 119: USARTWriteString(buffer, 6);
  3050  021D  3047               	movlw	(low (ackButton@buffer| 0))& (0+255)
  3051  021E  1283               	bcf	3,5	;RP0=0, select bank0
  3052  021F  1303               	bcf	3,6	;RP1=0, select bank0
  3053  0220  00C1               	movwf	USARTWriteString@str
  3054  0221  3000               	movlw	0
  3055  0222  00C2               	movwf	USARTWriteString@str+1
  3056  0223  3006               	movlw	6
  3057  0224  00C6               	movwf	??_ackButton
  3058  0225  0846               	movf	??_ackButton,w
  3059  0226  00C3               	movwf	USARTWriteString@len
  3060  0227  2467               	fcall	_USARTWriteString
  3061                           
  3062                           ;sysFunc.c: 120: rs485Rx();
  3063  0228  24FB               	fcall	_rs485Rx
  3064                           
  3065                           ;sysFunc.c: 122: keypadState.keyLock = 0;
  3066  0229  1283               	bcf	3,5	;RP0=0, select bank0
  3067  022A  1303               	bcf	3,6	;RP1=0, select bank0
  3068  022B  113E               	bcf	_keypadState,2
  3069                           
  3070                           ;sysFunc.c: 123: keypadState.keyPressIndicator = 0;
  3071  022C  103E               	bcf	_keypadState,0
  3072                           
  3073                           ;sysFunc.c: 124: keypadState.keyPressed = BUTTON_0;
  3074  022D  01BF               	clrf	_keypadState+1
  3075                           
  3076                           ;sysFunc.c: 126: if(valid_indicator)
  3077  022E  0844               	movf	ackButton@valid_indicator,w
  3078  022F  0445               	iorwf	ackButton@valid_indicator+1,w
  3079  0230  1D03               	btfss	3,2
  3080  0231  2A53               	goto	l1551
  3081  0232  2A61               	goto	l1553
  3082  0233                     l271:	
  3083                           ;sysFunc.c: 129: {
  3084                           ;sysFunc.c: 130: case BUTTON_1:
  3085                           
  3086                           ;sysFunc.c: 127: {
  3087                           ;sysFunc.c: 128: switch(lastKey)
  3088                           
  3089                           
  3090                           ;sysFunc.c: 131: ((volatile _io16_reg*)&led_indication_reg)->bit0 = 1;
  3091  0233  1431               	bsf	_led_indication_reg,0	;volatile
  3092                           
  3093                           ;sysFunc.c: 132: break;
  3094  0234  2A61               	goto	l1553
  3095  0235                     l273:	
  3096                           ;sysFunc.c: 134: case BUTTON_2:
  3097                           
  3098                           
  3099                           ;sysFunc.c: 135: ((volatile _io16_reg*)&led_indication_reg)->bit1 = 1;
  3100  0235  14B1               	bsf	_led_indication_reg,1	;volatile
  3101                           
  3102                           ;sysFunc.c: 136: break;
  3103  0236  2A61               	goto	l1553
  3104  0237                     l274:	
  3105                           ;sysFunc.c: 138: case BUTTON_3:
  3106                           
  3107                           
  3108                           ;sysFunc.c: 139: ((volatile _io16_reg*)&led_indication_reg)->bit2 = 1;
  3109  0237  1531               	bsf	_led_indication_reg,2	;volatile
  3110                           
  3111                           ;sysFunc.c: 140: break;
  3112  0238  2A61               	goto	l1553
  3113  0239                     l275:	
  3114                           ;sysFunc.c: 142: case BUTTON_4:
  3115                           
  3116                           
  3117                           ;sysFunc.c: 143: ((volatile _io16_reg*)&led_indication_reg)->bit3 = 1;
  3118  0239  15B1               	bsf	_led_indication_reg,3	;volatile
  3119                           
  3120                           ;sysFunc.c: 144: break;
  3121  023A  2A61               	goto	l1553
  3122  023B                     l276:	
  3123                           ;sysFunc.c: 146: case BUTTON_5:
  3124                           
  3125                           
  3126                           ;sysFunc.c: 147: ((volatile _io16_reg*)&led_indication_reg)->bit4 = 1;
  3127  023B  1631               	bsf	_led_indication_reg,4	;volatile
  3128                           
  3129                           ;sysFunc.c: 148: break;
  3130  023C  2A61               	goto	l1553
  3131  023D                     l277:	
  3132                           ;sysFunc.c: 150: case BUTTON_6:
  3133                           
  3134                           
  3135                           ;sysFunc.c: 151: ((volatile _io16_reg*)&led_indication_reg)->bit5 = 1;
  3136  023D  16B1               	bsf	_led_indication_reg,5	;volatile
  3137                           
  3138                           ;sysFunc.c: 152: break;
  3139  023E  2A61               	goto	l1553
  3140  023F                     l278:	
  3141                           ;sysFunc.c: 154: case BUTTON_7:
  3142                           
  3143                           
  3144                           ;sysFunc.c: 155: ((volatile _io16_reg*)&led_indication_reg)->bit6 = 1;
  3145  023F  1731               	bsf	_led_indication_reg,6	;volatile
  3146                           
  3147                           ;sysFunc.c: 156: break;
  3148  0240  2A61               	goto	l1553
  3149  0241                     l279:	
  3150                           ;sysFunc.c: 158: case BUTTON_8:
  3151                           
  3152                           
  3153                           ;sysFunc.c: 159: ((volatile _io16_reg*)&led_indication_reg)->bit7 = 1;
  3154  0241  17B1               	bsf	_led_indication_reg,7	;volatile
  3155                           
  3156                           ;sysFunc.c: 160: break;
  3157  0242  2A61               	goto	l1553
  3158  0243                     l280:	
  3159                           ;sysFunc.c: 162: case BUTTON_9:
  3160                           
  3161                           
  3162                           ;sysFunc.c: 163: ((volatile _io16_reg*)&led_indication_reg)->bit8 = 1;
  3163  0243  1432               	bsf	_led_indication_reg+1,0	;volatile
  3164                           
  3165                           ;sysFunc.c: 164: break;
  3166  0244  2A61               	goto	l1553
  3167  0245                     l281:	
  3168                           ;sysFunc.c: 166: case BUTTON_10:
  3169                           
  3170                           
  3171                           ;sysFunc.c: 167: ((volatile _io16_reg*)&led_indication_reg)->bit9 = 1;
  3172  0245  14B2               	bsf	_led_indication_reg+1,1	;volatile
  3173                           
  3174                           ;sysFunc.c: 168: break;
  3175  0246  2A61               	goto	l1553
  3176  0247                     l282:	
  3177                           ;sysFunc.c: 170: case BUTTON_11:
  3178                           
  3179                           
  3180                           ;sysFunc.c: 171: ((volatile _io16_reg*)&led_indication_reg)->bit10 = 1;
  3181  0247  1532               	bsf	_led_indication_reg+1,2	;volatile
  3182                           
  3183                           ;sysFunc.c: 172: break;
  3184  0248  2A61               	goto	l1553
  3185  0249                     l283:	
  3186                           ;sysFunc.c: 174: case BUTTON_12:
  3187                           
  3188                           
  3189                           ;sysFunc.c: 175: ((volatile _io16_reg*)&led_indication_reg)->bit11 = 1;
  3190  0249  15B2               	bsf	_led_indication_reg+1,3	;volatile
  3191                           
  3192                           ;sysFunc.c: 176: break;
  3193  024A  2A61               	goto	l1553
  3194  024B                     l284:	
  3195                           ;sysFunc.c: 178: case BUTTON_13:
  3196                           
  3197                           
  3198                           ;sysFunc.c: 179: ((volatile _io16_reg*)&led_indication_reg)->bit12 = 1;
  3199  024B  1632               	bsf	_led_indication_reg+1,4	;volatile
  3200                           
  3201                           ;sysFunc.c: 180: break;
  3202  024C  2A61               	goto	l1553
  3203  024D                     l285:	
  3204                           ;sysFunc.c: 182: case BUTTON_14:
  3205                           
  3206                           
  3207                           ;sysFunc.c: 183: ((volatile _io16_reg*)&led_indication_reg)->bit13 = 1;
  3208  024D  16B2               	bsf	_led_indication_reg+1,5	;volatile
  3209                           
  3210                           ;sysFunc.c: 184: break;
  3211  024E  2A61               	goto	l1553
  3212  024F                     l286:	
  3213                           ;sysFunc.c: 186: case BUTTON_15:
  3214                           
  3215                           
  3216                           ;sysFunc.c: 187: ((volatile _io16_reg*)&led_indication_reg)->bit14 = 1;
  3217  024F  1732               	bsf	_led_indication_reg+1,6	;volatile
  3218                           
  3219                           ;sysFunc.c: 188: break;
  3220  0250  2A61               	goto	l1553
  3221  0251                     l287:	
  3222                           ;sysFunc.c: 190: case BUTTON_16:
  3223                           
  3224                           
  3225                           ;sysFunc.c: 191: ((volatile _io16_reg*)&led_indication_reg)->bit15 = 1;
  3226  0251  17B2               	bsf	_led_indication_reg+1,7	;volatile
  3227                           
  3228                           ;sysFunc.c: 193: }
  3229                           
  3230                           ;sysFunc.c: 192: break;
  3231  0252  2A61               	goto	l1553
  3232  0253                     l1551:	
  3233  0253  0835               	movf	_lastKey,w
  3234                           
  3235                           ; Switch size 1, requested type "space"
  3236                           ; Number of cases is 16, Range of values is 1 to 16
  3237                           ; switch strategies available:
  3238                           ; Name         Instructions Cycles
  3239                           ; direct_byte           25     9 (fixed)
  3240                           ; simple_byte           49    25 (average)
  3241                           ; jumptable            263     9 (fixed)
  3242                           ;	Chosen strategy is direct_byte
  3243  0254  3EFF               	addlw	-1
  3244  0255  1C03               	skipc
  3245  0256  2A61               	goto	l1553
  3246  0257  0084               	movwf	4
  3247  0258  3010               	movlw	16
  3248  0259  0204               	subwf	4,w
  3249  025A  1803               	skipnc
  3250  025B  2A61               	goto	l1553
  3251  025C  3004               	movlw	high S2201
  3252  025D  008A               	movwf	10
  3253  025E  30B9               	movlw	low S2201
  3254  025F  0704               	addwf	4,w
  3255  0260  0082               	movwf	2
  3256  0261                     l1553:	
  3257                           
  3258                           ;sysFunc.c: 194: }
  3259                           ;sysFunc.c: 196: lastKey = BUTTON_0;
  3260  0261  01B5               	clrf	_lastKey
  3261  0262  0008               	return
  3262  0263                     __end_of_ackButton:	
  3263                           
  3264                           	psect	swtext1
  3265  04B9                     __pswtext1:	
  3266  04B9                     S2201:	
  3267  04B9  2A33               	ljmp	l271
  3268  04BA  2A35               	ljmp	l273
  3269  04BB  2A37               	ljmp	l274
  3270  04BC  2A39               	ljmp	l275
  3271  04BD  2A3B               	ljmp	l276
  3272  04BE  2A3D               	ljmp	l277
  3273  04BF  2A3F               	ljmp	l278
  3274  04C0  2A41               	ljmp	l279
  3275  04C1  2A43               	ljmp	l280
  3276  04C2  2A45               	ljmp	l281
  3277  04C3  2A47               	ljmp	l282
  3278  04C4  2A49               	ljmp	l283
  3279  04C5  2A4B               	ljmp	l284
  3280  04C6  2A4D               	ljmp	l285
  3281  04C7  2A4F               	ljmp	l286
  3282  04C8  2A51               	ljmp	l287
  3283                           
  3284                           	psect	text14
  3285  04F7                     __ptext14:	
  3286 ;; *************** function _rs485Tx *****************
  3287 ;; Defined at:
  3288 ;;		line 32 in file "sysFunc.c"
  3289 ;; Parameters:    Size  Location     Type
  3290 ;;		None
  3291 ;; Auto vars:     Size  Location     Type
  3292 ;;		None
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  1    wreg      void 
  3295 ;; Registers used:
  3296 ;;		None
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMMON   BANK0   BANK1
  3302 ;;      Params:         0       0       0
  3303 ;;      Locals:         0       0       0
  3304 ;;      Temps:          0       0       0
  3305 ;;      Totals:         0       0       0
  3306 ;;Total ram usage:        0 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; Hardware stack levels required when called:    2
  3309 ;; This function calls:
  3310 ;;		Nothing
  3311 ;; This function is called by:
  3312 ;;		_main
  3313 ;;		_sendButtonInfo
  3314 ;;		_ackButton
  3315 ;;		_resetKeypad
  3316 ;; This function uses a non-reentrant model
  3317 ;;
  3318                           
  3319                           
  3320                           ;psect for function _rs485Tx
  3321  04F7                     _rs485Tx:	
  3322                           
  3323                           ;sysFunc.c: 34: PORTCbits.RC5 = 1;
  3324                           
  3325                           ;incstack = 0
  3326                           ; Regs used in _rs485Tx: []
  3327  04F7  1283               	bcf	3,5	;RP0=0, select bank0
  3328  04F8  1303               	bcf	3,6	;RP1=0, select bank0
  3329  04F9  1687               	bsf	7,5	;volatile
  3330  04FA  0008               	return
  3331  04FB                     __end_of_rs485Tx:	
  3332                           
  3333                           	psect	text15
  3334  04FB                     __ptext15:	
  3335 ;; *************** function _rs485Rx *****************
  3336 ;; Defined at:
  3337 ;;		line 37 in file "sysFunc.c"
  3338 ;; Parameters:    Size  Location     Type
  3339 ;;		None
  3340 ;; Auto vars:     Size  Location     Type
  3341 ;;		None
  3342 ;; Return value:  Size  Location     Type
  3343 ;;                  1    wreg      void 
  3344 ;; Registers used:
  3345 ;;		None
  3346 ;; Tracked objects:
  3347 ;;		On entry : 0/0
  3348 ;;		On exit  : 0/0
  3349 ;;		Unchanged: 0/0
  3350 ;; Data sizes:     COMMON   BANK0   BANK1
  3351 ;;      Params:         0       0       0
  3352 ;;      Locals:         0       0       0
  3353 ;;      Temps:          0       0       0
  3354 ;;      Totals:         0       0       0
  3355 ;;Total ram usage:        0 bytes
  3356 ;; Hardware stack levels used:    1
  3357 ;; Hardware stack levels required when called:    2
  3358 ;; This function calls:
  3359 ;;		Nothing
  3360 ;; This function is called by:
  3361 ;;		_main
  3362 ;;		_gpioInit
  3363 ;;		_sendButtonInfo
  3364 ;;		_ackButton
  3365 ;;		_resetKeypad
  3366 ;; This function uses a non-reentrant model
  3367 ;;
  3368                           
  3369                           
  3370                           ;psect for function _rs485Rx
  3371  04FB                     _rs485Rx:	
  3372                           
  3373                           ;sysFunc.c: 39: PORTCbits.RC5 = 0;
  3374                           
  3375                           ;incstack = 0
  3376                           ; Regs used in _rs485Rx: []
  3377  04FB  1283               	bcf	3,5	;RP0=0, select bank0
  3378  04FC  1303               	bcf	3,6	;RP1=0, select bank0
  3379  04FD  1287               	bcf	7,5	;volatile
  3380  04FE  0008               	return
  3381  04FF                     __end_of_rs485Rx:	
  3382                           
  3383                           	psect	text16
  3384  03E1                     __ptext16:	
  3385 ;; *************** function _USARTReadBuffer *****************
  3386 ;; Defined at:
  3387 ;;		line 205 in file "uart.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;  buff            1    wreg     PTR unsigned char 
  3390 ;;		 -> checkCommandRx@buffer(6), 
  3391 ;;  len             2    2[BANK0 ] unsigned int 
  3392 ;; Auto vars:     Size  Location     Type
  3393 ;;  buff            1    6[BANK0 ] PTR unsigned char 
  3394 ;;		 -> checkCommandRx@buffer(6), 
  3395 ;;  i               2    7[BANK0 ] unsigned int 
  3396 ;; Return value:  Size  Location     Type
  3397 ;;                  1    wreg      void 
  3398 ;; Registers used:
  3399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3400 ;; Tracked objects:
  3401 ;;		On entry : 0/0
  3402 ;;		On exit  : 0/0
  3403 ;;		Unchanged: 0/0
  3404 ;; Data sizes:     COMMON   BANK0   BANK1
  3405 ;;      Params:         0       2       0
  3406 ;;      Locals:         0       3       0
  3407 ;;      Temps:          0       2       0
  3408 ;;      Totals:         0       7       0
  3409 ;;Total ram usage:        7 bytes
  3410 ;; Hardware stack levels used:    1
  3411 ;; Hardware stack levels required when called:    3
  3412 ;; This function calls:
  3413 ;;		_USARTReadData
  3414 ;; This function is called by:
  3415 ;;		_checkCommandRx
  3416 ;; This function uses a non-reentrant model
  3417 ;;
  3418                           
  3419                           
  3420                           ;psect for function _USARTReadBuffer
  3421  03E1                     _USARTReadBuffer:	
  3422                           
  3423                           ;incstack = 0
  3424                           ; Regs used in _USARTReadBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3425                           ;USARTReadBuffer@buff stored from wreg
  3426  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  3427  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  3428  03E3  00C6               	movwf	USARTReadBuffer@buff
  3429                           
  3430                           ;uart.c: 207: uint16_t i;
  3431                           ;uart.c: 208: for(i=0;i<len;i++)
  3432  03E4  01C7               	clrf	USARTReadBuffer@i
  3433  03E5  01C8               	clrf	USARTReadBuffer@i+1
  3434  03E6                     l1801:	
  3435  03E6  0843               	movf	USARTReadBuffer@len+1,w
  3436  03E7  0248               	subwf	USARTReadBuffer@i+1,w
  3437  03E8  1D03               	skipz
  3438  03E9  2BEC               	goto	u785
  3439  03EA  0842               	movf	USARTReadBuffer@len,w
  3440  03EB  0247               	subwf	USARTReadBuffer@i,w
  3441  03EC                     u785:	
  3442  03EC  1803               	btfsc	3,0
  3443  03ED  0008               	return
  3444                           
  3445                           ;uart.c: 209: {
  3446                           ;uart.c: 210: buff[i]=USARTReadData();
  3447  03EE  239C               	fcall	_USARTReadData
  3448  03EF  1283               	bcf	3,5	;RP0=0, select bank0
  3449  03F0  1303               	bcf	3,6	;RP1=0, select bank0
  3450  03F1  00C4               	movwf	??_USARTReadBuffer
  3451  03F2  0847               	movf	USARTReadBuffer@i,w
  3452  03F3  0746               	addwf	USARTReadBuffer@buff,w
  3453  03F4  00C5               	movwf	??_USARTReadBuffer+1
  3454  03F5  0845               	movf	??_USARTReadBuffer+1,w
  3455  03F6  0084               	movwf	4
  3456  03F7  0844               	movf	??_USARTReadBuffer,w
  3457  03F8  1383               	bcf	3,7	;select IRP bank0
  3458  03F9  0080               	movwf	0
  3459  03FA  3001               	movlw	1
  3460  03FB  07C7               	addwf	USARTReadBuffer@i,f
  3461  03FC  1803               	skipnc
  3462  03FD  0AC8               	incf	USARTReadBuffer@i+1,f
  3463  03FE  3000               	movlw	0
  3464  03FF  07C8               	addwf	USARTReadBuffer@i+1,f
  3465  0400  2BE6               	goto	l1801
  3466  0401                     __end_of_USARTReadBuffer:	
  3467                           
  3468                           	psect	text17
  3469  039C                     __ptext17:	
  3470 ;; *************** function _USARTReadData *****************
  3471 ;; Defined at:
  3472 ;;		line 121 in file "uart.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;  data            1    1[BANK0 ] unsigned char 
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      unsigned char 
  3479 ;; Registers used:
  3480 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMMON   BANK0   BANK1
  3486 ;;      Params:         0       0       0
  3487 ;;      Locals:         0       1       0
  3488 ;;      Temps:          0       1       0
  3489 ;;      Totals:         0       2       0
  3490 ;;Total ram usage:        2 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; Hardware stack levels required when called:    2
  3493 ;; This function calls:
  3494 ;;		Nothing
  3495 ;; This function is called by:
  3496 ;;		_USARTReadBuffer
  3497 ;;		_USARTFlushBuffer
  3498 ;; This function uses a non-reentrant model
  3499 ;;
  3500                           
  3501                           
  3502                           ;psect for function _USARTReadData
  3503  039C                     _USARTReadData:	
  3504                           
  3505                           ;uart.c: 123: char data;
  3506                           ;uart.c: 126: if(UQFront==-1)
  3507                           
  3508                           ;incstack = 0
  3509                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
  3510  039C  0A7B               	incf	_UQFront,w	;volatile
  3511  039D  1D03               	btfss	3,2
  3512  039E  2BA1               	goto	l1493
  3513                           
  3514                           ;uart.c: 127: return 0;
  3515  039F  3000               	movlw	0
  3516  03A0  0008               	return
  3517  03A1                     l1493:	
  3518                           
  3519                           ;uart.c: 129: data=URBuff[UQFront];
  3520  03A1  087B               	movf	_UQFront,w
  3521  03A2  3E20               	addlw	(low (_URBuff| 0))& (0+255)
  3522  03A3  0084               	movwf	4
  3523  03A4  1383               	bcf	3,7	;select IRP bank0
  3524  03A5  0800               	movf	0,w
  3525  03A6  1283               	bcf	3,5	;RP0=0, select bank0
  3526  03A7  1303               	bcf	3,6	;RP1=0, select bank0
  3527  03A8  00C0               	movwf	??_USARTReadData
  3528  03A9  0840               	movf	??_USARTReadData,w
  3529  03AA  00C1               	movwf	USARTReadData@data
  3530                           
  3531                           ;uart.c: 131: if(UQFront==UQEnd)
  3532  03AB  087B               	movf	_UQFront,w	;volatile
  3533  03AC  067A               	xorwf	_UQEnd,w	;volatile
  3534  03AD  1D03               	skipz
  3535  03AE  2BB5               	goto	l1499
  3536                           
  3537                           ;uart.c: 132: {
  3538                           ;uart.c: 135: UQFront=UQEnd=-1;
  3539  03AF  30FF               	movlw	255
  3540  03B0  00FA               	movwf	_UQEnd	;volatile
  3541  03B1  00C0               	movwf	??_USARTReadData
  3542  03B2  0840               	movf	??_USARTReadData,w
  3543  03B3  00FB               	movwf	_UQFront	;volatile
  3544                           
  3545                           ;uart.c: 136: }
  3546  03B4  2BBD               	goto	l1503
  3547  03B5                     l1499:	
  3548                           
  3549                           ;uart.c: 137: else
  3550                           ;uart.c: 138: {
  3551                           ;uart.c: 139: UQFront++;
  3552  03B5  3001               	movlw	1
  3553  03B6  00C0               	movwf	??_USARTReadData
  3554  03B7  0840               	movf	??_USARTReadData,w
  3555  03B8  07FB               	addwf	_UQFront,f	;volatile
  3556                           
  3557                           ;uart.c: 141: if(UQFront==12)
  3558  03B9  300C               	movlw	12
  3559  03BA  067B               	xorwf	_UQFront,w	;volatile
  3560  03BB  1903               	btfsc	3,2
  3561                           
  3562                           ;uart.c: 142: UQFront=0;
  3563  03BC  01FB               	clrf	_UQFront	;volatile
  3564  03BD                     l1503:	
  3565                           
  3566                           ;uart.c: 143: }
  3567                           ;uart.c: 145: return data;
  3568  03BD  0841               	movf	USARTReadData@data,w
  3569  03BE  0008               	return
  3570  03BF                     __end_of_USARTReadData:	
  3571                           
  3572                           	psect	text18
  3573  047D                     __ptext18:	
  3574 ;; *************** function _USARTWriteLine *****************
  3575 ;; Defined at:
  3576 ;;		line 88 in file "uart.c"
  3577 ;; Parameters:    Size  Location     Type
  3578 ;;  str             1    wreg     PTR unsigned char 
  3579 ;;		 -> STR_1(11), 
  3580 ;;  len             1    4[BANK0 ] unsigned char 
  3581 ;; Auto vars:     Size  Location     Type
  3582 ;;  str             1    6[BANK0 ] PTR unsigned char 
  3583 ;;		 -> STR_1(11), 
  3584 ;; Return value:  Size  Location     Type
  3585 ;;                  1    wreg      void 
  3586 ;; Registers used:
  3587 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3588 ;; Tracked objects:
  3589 ;;		On entry : 0/0
  3590 ;;		On exit  : 0/0
  3591 ;;		Unchanged: 0/0
  3592 ;; Data sizes:     COMMON   BANK0   BANK1
  3593 ;;      Params:         0       1       0
  3594 ;;      Locals:         0       1       0
  3595 ;;      Temps:          0       1       0
  3596 ;;      Totals:         0       3       0
  3597 ;;Total ram usage:        3 bytes
  3598 ;; Hardware stack levels used:    1
  3599 ;; Hardware stack levels required when called:    4
  3600 ;; This function calls:
  3601 ;;		_USARTWriteChar
  3602 ;;		_USARTWriteString
  3603 ;; This function is called by:
  3604 ;;		_main
  3605 ;; This function uses a non-reentrant model
  3606 ;;
  3607                           
  3608                           
  3609                           ;psect for function _USARTWriteLine
  3610  047D                     _USARTWriteLine:	
  3611                           
  3612                           ;incstack = 0
  3613                           ; Regs used in _USARTWriteLine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3614                           ;USARTWriteLine@str stored from wreg
  3615  047D  1283               	bcf	3,5	;RP0=0, select bank0
  3616  047E  1303               	bcf	3,6	;RP1=0, select bank0
  3617  047F  00C6               	movwf	USARTWriteLine@str
  3618                           
  3619                           ;uart.c: 90: USARTWriteChar('\r');
  3620  0480  300D               	movlw	13
  3621  0481  24D3               	fcall	_USARTWriteChar
  3622                           
  3623                           ;uart.c: 91: USARTWriteChar('\n');
  3624  0482  300A               	movlw	10
  3625  0483  24D3               	fcall	_USARTWriteChar
  3626                           
  3627                           ;uart.c: 93: USARTWriteString(str, len);
  3628  0484  1283               	bcf	3,5	;RP0=0, select bank0
  3629  0485  1303               	bcf	3,6	;RP1=0, select bank0
  3630  0486  0846               	movf	USARTWriteLine@str,w
  3631  0487  00C1               	movwf	USARTWriteString@str
  3632  0488  3000               	movlw	0
  3633  0489  1D03               	btfss	3,2
  3634  048A  3080               	movlw	128
  3635  048B  00C2               	movwf	USARTWriteString@str+1
  3636  048C  0844               	movf	USARTWriteLine@len,w
  3637  048D  00C5               	movwf	??_USARTWriteLine
  3638  048E  0845               	movf	??_USARTWriteLine,w
  3639  048F  00C3               	movwf	USARTWriteString@len
  3640  0490  2467               	fcall	_USARTWriteString
  3641  0491  0008               	return
  3642  0492                     __end_of_USARTWriteLine:	
  3643                           
  3644                           	psect	text19
  3645  0467                     __ptext19:	
  3646 ;; *************** function _USARTWriteString *****************
  3647 ;; Defined at:
  3648 ;;		line 78 in file "uart.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  str             2    1[BANK0 ] PTR unsigned char 
  3651 ;;		 -> resetKeypad@buffer(6), ackButton@buffer(6), sendButtonInfo@buffer(6), STR_1(11), 
  3652 ;;  len             1    3[BANK0 ] unsigned char 
  3653 ;; Auto vars:     Size  Location     Type
  3654 ;;		None
  3655 ;; Return value:  Size  Location     Type
  3656 ;;                  1    wreg      void 
  3657 ;; Registers used:
  3658 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3659 ;; Tracked objects:
  3660 ;;		On entry : 0/0
  3661 ;;		On exit  : 0/0
  3662 ;;		Unchanged: 0/0
  3663 ;; Data sizes:     COMMON   BANK0   BANK1
  3664 ;;      Params:         0       3       0
  3665 ;;      Locals:         0       0       0
  3666 ;;      Temps:          0       0       0
  3667 ;;      Totals:         0       3       0
  3668 ;;Total ram usage:        3 bytes
  3669 ;; Hardware stack levels used:    1
  3670 ;; Hardware stack levels required when called:    3
  3671 ;; This function calls:
  3672 ;;		_USARTWriteChar
  3673 ;; This function is called by:
  3674 ;;		_USARTWriteLine
  3675 ;;		_sendButtonInfo
  3676 ;;		_ackButton
  3677 ;;		_resetKeypad
  3678 ;; This function uses a non-reentrant model
  3679 ;;
  3680                           
  3681                           
  3682                           ;psect for function _USARTWriteString
  3683  0467                     _USARTWriteString:	
  3684  0467                     l1481:	
  3685                           ;uart.c: 80: while(len)
  3686                           
  3687                           ;incstack = 0
  3688                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3689                           
  3690  0467  1283               	bcf	3,5	;RP0=0, select bank0
  3691  0468  1303               	bcf	3,6	;RP1=0, select bank0
  3692  0469  0843               	movf	USARTWriteString@len,w
  3693  046A  1903               	btfsc	3,2
  3694  046B  0008               	return
  3695                           
  3696                           ;uart.c: 81: {
  3697                           ;uart.c: 82: USARTWriteChar(*str);
  3698  046C  1283               	bcf	3,5	;RP0=0, select bank0
  3699  046D  1303               	bcf	3,6	;RP1=0, select bank0
  3700  046E  0842               	movf	USARTWriteString@str+1,w
  3701  046F  00FF               	movwf	127
  3702  0470  0841               	movf	USARTWriteString@str,w
  3703  0471  0084               	movwf	4
  3704  0472  2401               	fcall	stringtab
  3705  0473  24D3               	fcall	_USARTWriteChar
  3706                           
  3707                           ;uart.c: 83: str++;
  3708  0474  3001               	movlw	1
  3709  0475  1283               	bcf	3,5	;RP0=0, select bank0
  3710  0476  1303               	bcf	3,6	;RP1=0, select bank0
  3711  0477  07C1               	addwf	USARTWriteString@str,f
  3712  0478  1803               	skipnc
  3713  0479  0AC2               	incf	USARTWriteString@str+1,f
  3714                           
  3715                           ;uart.c: 84: --len;
  3716  047A  3001               	movlw	1
  3717  047B  02C3               	subwf	USARTWriteString@len,f
  3718  047C  2C67               	goto	l1481
  3719  047D                     __end_of_USARTWriteString:	
  3720                           
  3721                           	psect	text20
  3722  04D3                     __ptext20:	
  3723 ;; *************** function _USARTWriteChar *****************
  3724 ;; Defined at:
  3725 ;;		line 72 in file "uart.c"
  3726 ;; Parameters:    Size  Location     Type
  3727 ;;  ch              1    wreg     unsigned char 
  3728 ;; Auto vars:     Size  Location     Type
  3729 ;;  ch              1    0[BANK0 ] unsigned char 
  3730 ;; Return value:  Size  Location     Type
  3731 ;;                  1    wreg      void 
  3732 ;; Registers used:
  3733 ;;		wreg
  3734 ;; Tracked objects:
  3735 ;;		On entry : 0/0
  3736 ;;		On exit  : 0/0
  3737 ;;		Unchanged: 0/0
  3738 ;; Data sizes:     COMMON   BANK0   BANK1
  3739 ;;      Params:         0       0       0
  3740 ;;      Locals:         0       1       0
  3741 ;;      Temps:          0       0       0
  3742 ;;      Totals:         0       1       0
  3743 ;;Total ram usage:        1 bytes
  3744 ;; Hardware stack levels used:    1
  3745 ;; Hardware stack levels required when called:    2
  3746 ;; This function calls:
  3747 ;;		Nothing
  3748 ;; This function is called by:
  3749 ;;		_USARTWriteString
  3750 ;;		_USARTWriteLine
  3751 ;;		_USARTWriteInt
  3752 ;;		_USARTGotoNewLine
  3753 ;; This function uses a non-reentrant model
  3754 ;;
  3755                           
  3756                           
  3757                           ;psect for function _USARTWriteChar
  3758  04D3                     _USARTWriteChar:	
  3759                           
  3760                           ;incstack = 0
  3761                           ; Regs used in _USARTWriteChar: [wreg]
  3762                           ;USARTWriteChar@ch stored from wreg
  3763  04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3764  04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3765  04D5  00C0               	movwf	USARTWriteChar@ch
  3766                           
  3767                           ;uart.c: 74: TXREG=ch;
  3768  04D6  0840               	movf	USARTWriteChar@ch,w
  3769  04D7  0099               	movwf	25	;volatile
  3770  04D8                     l81:	
  3771                           ;uart.c: 75: while(!TXSTAbits.TRMT);
  3772                           
  3773  04D8  1683               	bsf	3,5	;RP0=1, select bank1
  3774  04D9  1303               	bcf	3,6	;RP1=0, select bank1
  3775  04DA  1898               	btfsc	24,1	;volatile
  3776  04DB  0008               	return
  3777  04DC  2CD8               	goto	l81
  3778  04DD                     __end_of_USARTWriteChar:	
  3779                           
  3780                           	psect	text21
  3781  0492                     __ptext21:	
  3782 ;; *************** function _ISR *****************
  3783 ;; Defined at:
  3784 ;;		line 6 in file "isr.c"
  3785 ;; Parameters:    Size  Location     Type
  3786 ;;		None
  3787 ;; Auto vars:     Size  Location     Type
  3788 ;;		None
  3789 ;; Return value:  Size  Location     Type
  3790 ;;                  1    wreg      void 
  3791 ;; Registers used:
  3792 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3793 ;; Tracked objects:
  3794 ;;		On entry : 0/0
  3795 ;;		On exit  : 0/0
  3796 ;;		Unchanged: 0/0
  3797 ;; Data sizes:     COMMON   BANK0   BANK1
  3798 ;;      Params:         0       0       0
  3799 ;;      Locals:         0       0       0
  3800 ;;      Temps:          5       0       0
  3801 ;;      Totals:         5       0       0
  3802 ;;Total ram usage:        5 bytes
  3803 ;; Hardware stack levels used:    1
  3804 ;; Hardware stack levels required when called:    1
  3805 ;; This function calls:
  3806 ;;		_USARTHandleRxInt
  3807 ;; This function is called by:
  3808 ;;		Interrupt level 1
  3809 ;; This function uses a non-reentrant model
  3810 ;;
  3811                           
  3812                           
  3813                           ;psect for function _ISR
  3814  0492                     _ISR:	
  3815                           
  3816                           ;isr.c: 8: if (PIR1bits.RCIF)
  3817  0492  1E8C               	btfss	12,5	;volatile
  3818  0493  2C9C               	goto	i1l323
  3819                           
  3820                           ;isr.c: 9: {
  3821                           ;isr.c: 10: rxCount++;
  3822  0494  3001               	movlw	1
  3823  0495  00F5               	movwf	??_ISR
  3824  0496  0875               	movf	??_ISR,w
  3825  0497  07B6               	addwf	_rxCount,f
  3826                           
  3827                           ;isr.c: 11: USARTHandleRxInt();
  3828  0498  2335               	fcall	_USARTHandleRxInt
  3829                           
  3830                           ;isr.c: 12: PIR1bits.RCIF = 0;
  3831  0499  1283               	bcf	3,5	;RP0=0, select bank0
  3832  049A  1303               	bcf	3,6	;RP1=0, select bank0
  3833  049B  128C               	bcf	12,5	;volatile
  3834  049C                     i1l323:	
  3835                           ;isr.c: 13: return;
  3836                           
  3837  049C  0879               	movf	??_ISR+4,w
  3838  049D  00FF               	movwf	127
  3839  049E  0878               	movf	??_ISR+3,w
  3840  049F  008A               	movwf	10
  3841  04A0  0877               	movf	??_ISR+2,w
  3842  04A1  0084               	movwf	4
  3843  04A2  0E76               	swapf	(??_ISR+1)^(0+-128),w
  3844  04A3  0083               	movwf	3
  3845  04A4  0EFE               	swapf	126,f
  3846  04A5  0E7E               	swapf	126,w
  3847  04A6  0009               	retfie
  3848  04A7                     __end_of_ISR:	
  3849                           
  3850                           	psect	intentry
  3851  0004                     __pintentry:	
  3852                           ;incstack = 0
  3853                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3854                           
  3855  0004                     interrupt_function:	
  3856  007E                     saved_w	set	btemp
  3857  0004  00FE               	movwf	btemp
  3858  0005  0E03               	swapf	3,w
  3859  0006  00F6               	movwf	??_ISR+1
  3860  0007  0804               	movf	4,w
  3861  0008  00F7               	movwf	??_ISR+2
  3862  0009  080A               	movf	10,w
  3863  000A  00F8               	movwf	??_ISR+3
  3864  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3865  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3866  000D  087F               	movf	btemp+1,w
  3867  000E  00F9               	movwf	??_ISR+4
  3868  000F  2C92               	ljmp	_ISR
  3869                           
  3870                           	psect	text22
  3871  0335                     __ptext22:	
  3872 ;; *************** function _USARTHandleRxInt *****************
  3873 ;; Defined at:
  3874 ;;		line 96 in file "uart.c"
  3875 ;; Parameters:    Size  Location     Type
  3876 ;;		None
  3877 ;; Auto vars:     Size  Location     Type
  3878 ;;  data            1    4[COMMON] unsigned char 
  3879 ;; Return value:  Size  Location     Type
  3880 ;;                  1    wreg      void 
  3881 ;; Registers used:
  3882 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3883 ;; Tracked objects:
  3884 ;;		On entry : 0/0
  3885 ;;		On exit  : 0/0
  3886 ;;		Unchanged: 0/0
  3887 ;; Data sizes:     COMMON   BANK0   BANK1
  3888 ;;      Params:         0       0       0
  3889 ;;      Locals:         1       0       0
  3890 ;;      Temps:          4       0       0
  3891 ;;      Totals:         5       0       0
  3892 ;;Total ram usage:        5 bytes
  3893 ;; Hardware stack levels used:    1
  3894 ;; This function calls:
  3895 ;;		Nothing
  3896 ;; This function is called by:
  3897 ;;		_ISR
  3898 ;; This function uses a non-reentrant model
  3899 ;;
  3900                           
  3901                           
  3902                           ;psect for function _USARTHandleRxInt
  3903  0335                     _USARTHandleRxInt:	
  3904                           
  3905                           ;uart.c: 100: char data=RCREG;
  3906                           
  3907                           ;incstack = 0
  3908                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
  3909  0335  1283               	bcf	3,5	;RP0=0, select bank0
  3910  0336  1303               	bcf	3,6	;RP1=0, select bank0
  3911  0337  081A               	movf	26,w	;volatile
  3912  0338  00F0               	movwf	??_USARTHandleRxInt
  3913  0339  0870               	movf	??_USARTHandleRxInt,w
  3914  033A  00F4               	movwf	USARTHandleRxInt@data
  3915                           
  3916                           ;uart.c: 103: if(((UQEnd==12-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  3917  033B  300B               	movlw	11
  3918  033C  067A               	xorwf	_UQEnd,w	;volatile
  3919  033D  1903               	btfsc	3,2
  3920  033E  087B               	movf	_UQFront,w	;volatile
  3921  033F  1903               	btfsc	3,2
  3922  0340  2B56               	goto	i1l1865
  3923  0341  087B               	movf	_UQFront,w	;volatile
  3924  0342  00F0               	movwf	??_USARTHandleRxInt
  3925  0343  01F1               	clrf	??_USARTHandleRxInt+1
  3926  0344  1BF0               	btfsc	??_USARTHandleRxInt,7
  3927  0345  03F1               	decf	??_USARTHandleRxInt+1,f
  3928  0346  3001               	movlw	1
  3929  0347  077A               	addwf	_UQEnd,w	;volatile
  3930  0348  00F2               	movwf	??_USARTHandleRxInt+2
  3931  0349  01F3               	clrf	??_USARTHandleRxInt+3
  3932  034A  1803               	skipnc
  3933  034B  0AF3               	incf	??_USARTHandleRxInt+3,f
  3934  034C  1BFA               	btfsc	_UQEnd,7	;volatile
  3935  034D  03F3               	decf	??_USARTHandleRxInt+3,f
  3936  034E  0871               	movf	??_USARTHandleRxInt+1,w
  3937  034F  0673               	xorwf	??_USARTHandleRxInt+3,w
  3938  0350  1D03               	skipz
  3939  0351  2B54               	goto	u85_25
  3940  0352  0870               	movf	??_USARTHandleRxInt,w
  3941  0353  0672               	xorwf	??_USARTHandleRxInt+2,w
  3942  0354                     u85_25:	
  3943  0354  1D03               	skipz
  3944  0355  2B5E               	goto	i1l1869
  3945  0356                     i1l1865:	
  3946                           
  3947                           ;uart.c: 104: {
  3948                           ;uart.c: 106: UQFront++;
  3949  0356  3001               	movlw	1
  3950  0357  00F0               	movwf	??_USARTHandleRxInt
  3951  0358  0870               	movf	??_USARTHandleRxInt,w
  3952  0359  07FB               	addwf	_UQFront,f	;volatile
  3953                           
  3954                           ;uart.c: 107: if(UQFront==12) UQFront=0;
  3955  035A  300C               	movlw	12
  3956  035B  067B               	xorwf	_UQFront,w	;volatile
  3957  035C  1903               	btfsc	3,2
  3958  035D  01FB               	clrf	_UQFront	;volatile
  3959  035E                     i1l1869:	
  3960                           
  3961                           ;uart.c: 108: }
  3962                           ;uart.c: 110: if(UQEnd==12-1)
  3963  035E  300B               	movlw	11
  3964  035F  067A               	xorwf	_UQEnd,w	;volatile
  3965  0360  1D03               	btfss	3,2
  3966  0361  2B64               	goto	i1l1873
  3967                           
  3968                           ;uart.c: 111: UQEnd=0;
  3969  0362  01FA               	clrf	_UQEnd	;volatile
  3970  0363  2B68               	goto	i1l1875
  3971  0364                     i1l1873:	
  3972                           
  3973                           ;uart.c: 112: else
  3974                           ;uart.c: 113: UQEnd++;
  3975  0364  3001               	movlw	1
  3976  0365  00F0               	movwf	??_USARTHandleRxInt
  3977  0366  0870               	movf	??_USARTHandleRxInt,w
  3978  0367  07FA               	addwf	_UQEnd,f	;volatile
  3979  0368                     i1l1875:	
  3980                           
  3981                           ;uart.c: 115: URBuff[UQEnd]=data;
  3982  0368  0874               	movf	USARTHandleRxInt@data,w
  3983  0369  00F0               	movwf	??_USARTHandleRxInt
  3984  036A  087A               	movf	_UQEnd,w
  3985  036B  3E20               	addlw	(low (_URBuff| 0))& (0+255)
  3986  036C  0084               	movwf	4
  3987  036D  0870               	movf	??_USARTHandleRxInt,w
  3988  036E  1383               	bcf	3,7	;select IRP bank0
  3989  036F  0080               	movwf	0
  3990                           
  3991                           ;uart.c: 117: if(UQFront==-1) UQFront=0;
  3992  0370  0A7B               	incf	_UQFront,w	;volatile
  3993  0371  1D03               	btfss	3,2
  3994  0372  0008               	return
  3995  0373  01FB               	clrf	_UQFront	;volatile
  3996  0374  0008               	return
  3997  0375                     __end_of_USARTHandleRxInt:	
  3998  007E                     btemp	set	126	;btemp
  3999  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         34
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     24      56
    BANK1            32      0       0

Pointer List with Targets:

    runProtocol@commandRecv	PTR struct . size(1) Largest target is 6
		 -> recvCommand(BANK0[6]), 

    sortRxFrame@commandStruct	PTR struct . size(1) Largest target is 6
		 -> recvCommand(BANK0[6]), 

    sortRxFrame@rxBuf	PTR unsigned char  size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    sortRxFrame@command	PTR struct . size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    USARTReadBuffer@buff	PTR unsigned char  size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    USARTWriteLine@str	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    USARTWriteString@str	PTR unsigned char  size(2) Largest target is 11
		 -> resetKeypad@buffer(BANK0[6]), ackButton@buffer(BANK0[6]), sendButtonInfo@buffer(BANK0[6]), STR_1(CODE[11]), 

    getKey@keypadState	PTR struct . size(1) Largest target is 2
		 -> keypadState(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    _main->_checkCommandRx
    _scanKeypad->_getKey
    _controllerInit->_USARTInit
    _checkCommandRx->_runProtocol
    _runProtocol->_ackButton
    _sendButtonInfo->_USARTWriteString
    _resetKeypad->_USARTWriteString
    _ackButton->_USARTWriteString
    _USARTReadBuffer->_USARTReadData
    _USARTWriteLine->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4422
                                             23 BANK0      1     1      0
                     _USARTWriteLine
                     _checkCommandRx
                     _controllerInit
                          _light_led
                            _rs485Rx
                            _rs485Tx
                         _scanKeypad
 ---------------------------------------------------------------------------------
 (1) _scanKeypad                                           1     1      0     775
                                              3 BANK0      1     1      0
                             _getKey
 ---------------------------------------------------------------------------------
 (2) _getKey                                               3     3      0     775
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _light_led                                            5     2      3     240
                                              0 BANK0      5     2      3
 ---------------------------------------------------------------------------------
 (1) _controllerInit                                       0     0      0      75
                          _USARTInit
                           _gpioInit
                         _initKeypad
 ---------------------------------------------------------------------------------
 (2) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpioInit                                             0     0      0       0
                            _rs485Rx
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                            3     1      2      75
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _checkCommandRx                                       7     7      0    2694
                                             16 BANK0      7     7      0
                    _USARTReadBuffer
                        _runProtocol
                        _sortRxFrame
 ---------------------------------------------------------------------------------
 (2) _sortRxFrame                                          6     5      1     285
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _runProtocol                                          3     3      0    2165
                                             13 BANK0      3     3      0
                          _ackButton
                        _resetKeypad
                     _sendButtonInfo
 ---------------------------------------------------------------------------------
 (3) _sendButtonInfo                                       8     8      0     658
                                              4 BANK0      8     8      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (3) _resetKeypad                                          7     7      0     636
                                              4 BANK0      7     7      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (3) _ackButton                                            9     7      2     711
                                              4 BANK0      9     7      2
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (1) _rs485Tx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rs485Rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USARTReadBuffer                                      7     5      2     193
                                              2 BANK0      7     5      2
                      _USARTReadData
 ---------------------------------------------------------------------------------
 (3) _USARTReadData                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTWriteLine                                       3     2      1     638
                                              4 BANK0      3     2      1
                     _USARTWriteChar
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (4) _USARTWriteString                                     3     0      3     492
                                              1 BANK0      3     0      3
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (5) _USARTWriteChar                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  5     5      0      23
                                              5 COMMON     5     5      0
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (7) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTWriteLine
     _USARTWriteChar
     _USARTWriteString
       _USARTWriteChar
   _checkCommandRx
     _USARTReadBuffer
       _USARTReadData
     _runProtocol
       _ackButton
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
       _resetKeypad
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
       _sendButtonInfo
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
     _sortRxFrame
   _controllerInit
     _USARTInit
     _gpioInit
       _rs485Rx
     _initKeypad
   _light_led
   _rs485Rx
   _rs485Tx
   _scanKeypad
     _getKey

 _ISR (ROOT)
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     18      38       4       70.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            20      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
ABS                  0      0      46       7        0.0%
DATA                 0      0      46       8        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Aug 20 23:27:02 2017

                        pc 0002                _runProtocol 02F5                __CFG_CP$OFF 0000  
                       l21 0076                         l31 012E                         l40 01C6  
                       l24 00B4                         l16 003A                         l33 014C  
                       l42 01E4                         l26 00D2                         l35 016A  
                       l19 0058                         l28 00F0                         l38 01A8  
                       l81 04D8                         l74 029D                         fsr 0004  
       USARTInit@baud_rate 0040                        l271 0233                        l263 0334  
                      l280 0243                        l281 0245                        l273 0235  
                      l249 02ED                        l282 0247                        l274 0237  
                      l283 0249                        l275 0239                        l284 024B  
                      l276 023B                        l285 024D                        l277 023D  
                      l286 024F                        l278 023F                        l287 0251  
                      l279 0241                        _GIE 005F               __CFG_CPD$OFF 0000  
                      _ISR 0492                        u785 03EC             ?_USARTReadData 0070  
                      fsr0 0004                _sortRxFrame 02AF    __size_of_controllerInit 000A  
                      indf 0000               __CFG_IESO$ON 0000                       S2201 04B9  
             __CFG_LVP$OFF 0000                       ?_ISR 0070                       l1503 03BD  
                     l1551 0253                       l1481 0467                       l1801 03E6  
                     l1553 0261                       l2193 0289                       l1713 0188  
                     l2195 028E                       l1493 03A1                       l2197 0293  
                     l1629 0094                       l1831 02F0                       l2199 0298  
                     l1671 010E                       l1841 030D                       l1499 03B5  
                     l1851 0329                       l1827 02E8                       l1771 0272  
                     l1845 031F                       l1837 0302                       l1773 0274  
                     l1757 0202                       l1767 026E                       l1927 0462  
                     l1769 0270                       l1777 0279                       l1997 0427  
                     STR_1 0411                       _BRGH 04C2                       u1307 007E  
                     u1317 009E                       u1407 01B0                       u1327 00BC  
                     u1417 01CE                       u1337 00DA                       u1427 01EC  
                     u1347 00F8                       u1357 0118                       u1277 0026  
                     u1367 0136                       u1287 0042                       u1377 0154  
                     u1297 0060                       u1387 0172                       u1397 0192  
             __CFG_WRT$OFF 0000     __end_of_USARTWriteChar 04DD            ?_checkCommandRx 0070  
   __end_of_USARTWriteLine 0492                       _main 041C                       btemp 007E  
        USARTReadData@data 0041                       start 0010              __CFG_MCLRE$ON 0000  
                    ??_ISR 0075          resetKeypad@buffer 0045          ?_USARTHandleRxInt 0070  
                    ?_main 0070         ??_USARTHandleRxInt 0070              __CFG_WDTE$OFF 0000  
         USARTWriteChar@ch 0040                      i1l323 049C                      _RCREG 001A  
           _sendButtonInfo 03BF                      _SPBRG 0099                      _PORTA 0005  
                    _PORTB 0006            __end_of_rs485Rx 04FF                      _TRISA 0085  
                    _TRISB 0086            __end_of_rs485Tx 04FB                      u85_25 0354  
                    _TXREG 0019                      _UQEnd 007A           ?_USARTReadBuffer 0042  
           __CFG_FCMEN$OFF 0000            ackButton@buffer 0047             __CFG_BOREN$OFF 0000  
                    pclath 000A         __size_of_USARTInit 004C            ?_USARTWriteChar 0070  
          ?_USARTWriteLine 0044                      status 0003                      wtemp0 007E  
          __initialization 0011               __end_of_main 0436            ??_USARTReadData 0040  
   __end_of_sendButtonInfo 03E1                     ??_main 0057            light_led@LED_EN 0042  
       USARTReadBuffer@len 0042                     _ANSELH 0189                     i1l1873 0364  
                   i1l1865 0356                     i1l1875 0368                     i1l1869 035E  
             ?_resetKeypad 0070                     _URBuff 0020             __CFG_PWRTE$OFF 0000  
        USARTWriteLine@len 0044          USARTWriteLine@str 0046           __end_of_gpioInit 04EF  
                   _getKey 0019   __end_of_USARTWriteString 047D                  ??_rs485Rx 0040  
                ??_rs485Tx 0040          __end_of_USARTInit 02AF            ?_sendButtonInfo 0070  
           _controllerInit 04C9                     saved_w 007E    __end_of__initialization 0017  
       __size_of_ackButton 0059             __pcstackCOMMON 0070   ackButton@valid_indicator 0044  
             ?_runProtocol 0070     __end_of_controllerInit 04D3               ?_sortRxFrame 0040  
           _OPTION_REGbits 0081           ??_checkCommandRx 0050              _buttonPressed 007D  
               __pbssBANK0 0020                 __pnvCOMMON 007A         __size_of_light_led 0018  
               __pmaintext 041C                    ?_getKey 0070                 __pintentry 0004  
      USARTReadBuffer@buff 0046            ?_controllerInit 0070          __end_of_ackButton 0263  
     sendButtonInfo@buffer 0045       sendButtonInfo@button 004B           ??_USARTWriteChar 0040  
         ??_USARTWriteLine 0045         USARTWriteInt@F1616 002C  __size_of_USARTHandleRxInt 0040  
               __stringtab 0401                  ?_gpioInit 0070                    _UQFront 007B  
 sortRxFrame@commandStruct 0040       __size_of_resetKeypad 0027        _currentKeypadStatus 0033  
        getKey@keypadState 0042                 _initKeypad 04DD            __size_of_getKey 01F1  
               _currentKey 007C                    _rs485Rx 04FB                    _rs485Tx 04F7  
               _scanKeypad 04A7                    __ptext1 04A7                    __ptext2 0019  
                  __ptext3 044F                    __ptext4 04C9                    __ptext5 04DD  
                  __ptext6 04E6                    __ptext7 0263                    __ptext8 0436  
                  __ptext9 02AF               __size_of_ISR 0015                    _lastKey 0035  
        __end_of_light_led 0467                    _rxCount 0036                    clrloop0 04F0  
     end_of_initialization 0017                 ??_gpioInit 0040   __size_of_USARTReadBuffer 0020  
                _RCSTAbits 0018           ??_sendButtonInfo 0044          ?_USARTWriteString 0041  
     __size_of_runProtocol 0040                  _PORTCbits 0007      __end_of_USARTReadData 03BF  
       ??_USARTWriteString 0044                  _USARTInit 0263                  _TRISCbits 0087  
     __size_of_sortRxFrame 0046                  _TXSTAbits 0098                ?_initKeypad 0070  
         USARTReadBuffer@i 0047             __end_of_getKey 020A                ?_scanKeypad 0070  
       _led_indication_reg 0031        start_initialization 0011                 ?_USARTInit 0040  
              __end_of_ISR 04A7           _USARTHandleRxInt 0335     runProtocol@commandRecv 004F  
 __CFG_FOSC$INTRC_NOCLKOUT 0000         sortRxFrame@command 0045                 light_led@i 0044  
        ??_USARTReadBuffer 0044      light_led@led_register 0040           ??_controllerInit 0043  
                 ??_getKey 0040            _status_register 0037                __pbssCOMMON 007C  
                ___latbits 0000              __pcstackBANK0 0040                  _ackButton 020A  
      __size_of_initKeypad 0009        __size_of_scanKeypad 0012          __size_of_gpioInit 0009  
                 ?_rs485Rx 0070                   ?_rs485Tx 0070                  __pstrings 0401  
                __pswtext1 04B9                ??_USARTInit 0042                 ?_ackButton 0044  
                _light_led 044F              ??_resetKeypad 0044          interrupt_function 0004  
                clear_ram0 04EF                   _PIE1bits 008C    __size_of_checkCommandRx 0019  
                 _PIR1bits 000C                __stringbase 0410                 ?_light_led 0040  
__size_of_USARTWriteString 0016       checkCommandRx@buffer 0051    __size_of_USARTWriteChar 000A  
  __size_of_USARTWriteLine 0015               ??_initKeypad 0040        __end_of_resetKeypad 039C  
            ??_runProtocol 004D   __end_of_USARTHandleRxInt 0375               ??_scanKeypad 0043  
         __size_of_rs485Rx 0004           __size_of_rs485Tx 0004         __end_of__stringtab 0411  
            ??_sortRxFrame 0041                ??_ackButton 0046                   __ptext10 02F5  
                 __ptext11 03BF                   __ptext20 04D3                   __ptext12 0375  
                 __ptext21 0492                   __ptext13 020A                   __ptext22 0335  
                 __ptext14 04F7                   __ptext15 04FB                   __ptext16 03E1  
                 __ptext17 039C                   __ptext18 047D                   __ptext19 0467  
              _keypadState 003E          __CFG_BOR4V$BOR40V 0000         __end_of_initKeypad 04E6  
          _USARTReadBuffer 03E1                   _gpioInit 04E6              __size_of_main 001A  
              _recvCommand 0038         __end_of_scanKeypad 04B9     __size_of_USARTReadData 0023  
      __end_of_runProtocol 0335                 _INTCONbits 000B    __size_of_sendButtonInfo 0022  
         sortRxFrame@rxBuf 0043                ??_light_led 0043        __end_of_sortRxFrame 02F5  
                 intlevel1 0000                _resetKeypad 0375             _checkCommandRx 0436  
                stringcode 040B        USARTWriteString@len 0043        USARTWriteString@str 0041  
            _USARTReadData 039C    __end_of_USARTReadBuffer 0401       USARTHandleRxInt@data 0074  
                 stringdir 040B                   stringtab 0401         runProtocol@command 004E  
           sortRxFrame@err 0044           _USARTWriteString 0467     __end_of_checkCommandRx 044F  
           _USARTWriteChar 04D3             _USARTWriteLine 047D  
