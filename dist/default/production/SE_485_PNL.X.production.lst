

Microchip Technology PIC LITE Macro Assembler V1.42 build -159332390 
                                                                                               Sun Jun 18 22:14:46 2017

Microchip Technology Omniscient Code Generator v1.42 (Free mode) build 201704130522
     1                           	processor	16F882
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	nvCOMMON,global,class=COMMON,space=1,delta=1
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2
    15                           	psect	text3,local,class=CODE,merge=1,delta=2
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	text5,local,class=CODE,merge=1,delta=2
    18                           	psect	text6,local,class=CODE,merge=1,delta=2
    19                           	psect	text7,local,class=CODE,merge=1,delta=2
    20                           	psect	text8,local,class=CODE,merge=1,delta=2
    21                           	psect	text9,local,class=CODE,merge=1,delta=2
    22                           	psect	text10,local,class=CODE,merge=1,delta=2
    23                           	psect	text11,local,class=CODE,merge=1,delta=2
    24                           	psect	text12,local,class=CODE,merge=1,delta=2
    25                           	psect	text13,local,class=CODE,merge=1,delta=2
    26                           	psect	text14,local,class=CODE,merge=1,delta=2
    27                           	psect	text15,local,class=CODE,merge=1,delta=2
    28                           	psect	text16,local,class=CODE,merge=1,delta=2
    29                           	psect	text17,local,class=CODE,merge=1,delta=2
    30                           	psect	text18,local,class=CODE,merge=1,delta=2
    31                           	psect	text19,local,class=CODE,merge=1,delta=2
    32                           	psect	text20,local,class=CODE,merge=1,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text21,local,class=CODE,merge=1,delta=2
    35                           	dabs	1,0x7E,2
    36  0000                     
    37                           ; Version 1.42
    38                           ; Generated 13/04/2017 GMT
    39                           ; 
    40                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    41                           ; All rights reserved.
    42                           ; 
    43                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    44                           ; 
    45                           ; Redistribution and use in source and binary forms, with or without modification, are
    46                           ; permitted provided that the following conditions are met:
    47                           ; 
    48                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    49                           ;        conditions and the following disclaimer.
    50                           ; 
    51                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    52                           ;        of conditions and the following disclaimer in the documentation and/or other
    53                           ;        materials provided with the distribution.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F882 Definitions
    69                           ; 
    70                           ; SFR Addresses
    71  0000                     	;# 
    72  0001                     	;# 
    73  0002                     	;# 
    74  0003                     	;# 
    75  0004                     	;# 
    76  0005                     	;# 
    77  0006                     	;# 
    78  0007                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0089                     	;# 
   110  008C                     	;# 
   111  008D                     	;# 
   112  008E                     	;# 
   113  008F                     	;# 
   114  0090                     	;# 
   115  0091                     	;# 
   116  0092                     	;# 
   117  0093                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0094                     	;# 
   121  0095                     	;# 
   122  0096                     	;# 
   123  0097                     	;# 
   124  0098                     	;# 
   125  0099                     	;# 
   126  009A                     	;# 
   127  009B                     	;# 
   128  009C                     	;# 
   129  009D                     	;# 
   130  009E                     	;# 
   131  009F                     	;# 
   132  0105                     	;# 
   133  0107                     	;# 
   134  0108                     	;# 
   135  0109                     	;# 
   136  010C                     	;# 
   137  010C                     	;# 
   138  010D                     	;# 
   139  010E                     	;# 
   140  010F                     	;# 
   141  0185                     	;# 
   142  0187                     	;# 
   143  0188                     	;# 
   144  0189                     	;# 
   145  018C                     	;# 
   146  018D                     	;# 
   147  0000                     	;# 
   148  0001                     	;# 
   149  0002                     	;# 
   150  0003                     	;# 
   151  0004                     	;# 
   152  0005                     	;# 
   153  0006                     	;# 
   154  0007                     	;# 
   155  0009                     	;# 
   156  000A                     	;# 
   157  000B                     	;# 
   158  000C                     	;# 
   159  000D                     	;# 
   160  000E                     	;# 
   161  000E                     	;# 
   162  000F                     	;# 
   163  0010                     	;# 
   164  0011                     	;# 
   165  0012                     	;# 
   166  0013                     	;# 
   167  0014                     	;# 
   168  0015                     	;# 
   169  0015                     	;# 
   170  0016                     	;# 
   171  0017                     	;# 
   172  0018                     	;# 
   173  0019                     	;# 
   174  001A                     	;# 
   175  001B                     	;# 
   176  001B                     	;# 
   177  001C                     	;# 
   178  001D                     	;# 
   179  001E                     	;# 
   180  001F                     	;# 
   181  0081                     	;# 
   182  0085                     	;# 
   183  0086                     	;# 
   184  0087                     	;# 
   185  0089                     	;# 
   186  008C                     	;# 
   187  008D                     	;# 
   188  008E                     	;# 
   189  008F                     	;# 
   190  0090                     	;# 
   191  0091                     	;# 
   192  0092                     	;# 
   193  0093                     	;# 
   194  0093                     	;# 
   195  0093                     	;# 
   196  0094                     	;# 
   197  0095                     	;# 
   198  0096                     	;# 
   199  0097                     	;# 
   200  0098                     	;# 
   201  0099                     	;# 
   202  009A                     	;# 
   203  009B                     	;# 
   204  009C                     	;# 
   205  009D                     	;# 
   206  009E                     	;# 
   207  009F                     	;# 
   208  0105                     	;# 
   209  0107                     	;# 
   210  0108                     	;# 
   211  0109                     	;# 
   212  010C                     	;# 
   213  010C                     	;# 
   214  010D                     	;# 
   215  010E                     	;# 
   216  010F                     	;# 
   217  0185                     	;# 
   218  0187                     	;# 
   219  0188                     	;# 
   220  0189                     	;# 
   221  018C                     	;# 
   222  018D                     	;# 
   223  0000                     	;# 
   224  0001                     	;# 
   225  0002                     	;# 
   226  0003                     	;# 
   227  0004                     	;# 
   228  0005                     	;# 
   229  0006                     	;# 
   230  0007                     	;# 
   231  0009                     	;# 
   232  000A                     	;# 
   233  000B                     	;# 
   234  000C                     	;# 
   235  000D                     	;# 
   236  000E                     	;# 
   237  000E                     	;# 
   238  000F                     	;# 
   239  0010                     	;# 
   240  0011                     	;# 
   241  0012                     	;# 
   242  0013                     	;# 
   243  0014                     	;# 
   244  0015                     	;# 
   245  0015                     	;# 
   246  0016                     	;# 
   247  0017                     	;# 
   248  0018                     	;# 
   249  0019                     	;# 
   250  001A                     	;# 
   251  001B                     	;# 
   252  001B                     	;# 
   253  001C                     	;# 
   254  001D                     	;# 
   255  001E                     	;# 
   256  001F                     	;# 
   257  0081                     	;# 
   258  0085                     	;# 
   259  0086                     	;# 
   260  0087                     	;# 
   261  0089                     	;# 
   262  008C                     	;# 
   263  008D                     	;# 
   264  008E                     	;# 
   265  008F                     	;# 
   266  0090                     	;# 
   267  0091                     	;# 
   268  0092                     	;# 
   269  0093                     	;# 
   270  0093                     	;# 
   271  0093                     	;# 
   272  0094                     	;# 
   273  0095                     	;# 
   274  0096                     	;# 
   275  0097                     	;# 
   276  0098                     	;# 
   277  0099                     	;# 
   278  009A                     	;# 
   279  009B                     	;# 
   280  009C                     	;# 
   281  009D                     	;# 
   282  009E                     	;# 
   283  009F                     	;# 
   284  0105                     	;# 
   285  0107                     	;# 
   286  0108                     	;# 
   287  0109                     	;# 
   288  010C                     	;# 
   289  010C                     	;# 
   290  010D                     	;# 
   291  010E                     	;# 
   292  010F                     	;# 
   293  0185                     	;# 
   294  0187                     	;# 
   295  0188                     	;# 
   296  0189                     	;# 
   297  018C                     	;# 
   298  018D                     	;# 
   299  0000                     	;# 
   300  0001                     	;# 
   301  0002                     	;# 
   302  0003                     	;# 
   303  0004                     	;# 
   304  0005                     	;# 
   305  0006                     	;# 
   306  0007                     	;# 
   307  0009                     	;# 
   308  000A                     	;# 
   309  000B                     	;# 
   310  000C                     	;# 
   311  000D                     	;# 
   312  000E                     	;# 
   313  000E                     	;# 
   314  000F                     	;# 
   315  0010                     	;# 
   316  0011                     	;# 
   317  0012                     	;# 
   318  0013                     	;# 
   319  0014                     	;# 
   320  0015                     	;# 
   321  0015                     	;# 
   322  0016                     	;# 
   323  0017                     	;# 
   324  0018                     	;# 
   325  0019                     	;# 
   326  001A                     	;# 
   327  001B                     	;# 
   328  001B                     	;# 
   329  001C                     	;# 
   330  001D                     	;# 
   331  001E                     	;# 
   332  001F                     	;# 
   333  0081                     	;# 
   334  0085                     	;# 
   335  0086                     	;# 
   336  0087                     	;# 
   337  0089                     	;# 
   338  008C                     	;# 
   339  008D                     	;# 
   340  008E                     	;# 
   341  008F                     	;# 
   342  0090                     	;# 
   343  0091                     	;# 
   344  0092                     	;# 
   345  0093                     	;# 
   346  0093                     	;# 
   347  0093                     	;# 
   348  0094                     	;# 
   349  0095                     	;# 
   350  0096                     	;# 
   351  0097                     	;# 
   352  0098                     	;# 
   353  0099                     	;# 
   354  009A                     	;# 
   355  009B                     	;# 
   356  009C                     	;# 
   357  009D                     	;# 
   358  009E                     	;# 
   359  009F                     	;# 
   360  0105                     	;# 
   361  0107                     	;# 
   362  0108                     	;# 
   363  0109                     	;# 
   364  010C                     	;# 
   365  010C                     	;# 
   366  010D                     	;# 
   367  010E                     	;# 
   368  010F                     	;# 
   369  0185                     	;# 
   370  0187                     	;# 
   371  0188                     	;# 
   372  0189                     	;# 
   373  018C                     	;# 
   374  018D                     	;# 
   375  0000                     	;# 
   376  0001                     	;# 
   377  0002                     	;# 
   378  0003                     	;# 
   379  0004                     	;# 
   380  0005                     	;# 
   381  0006                     	;# 
   382  0007                     	;# 
   383  0009                     	;# 
   384  000A                     	;# 
   385  000B                     	;# 
   386  000C                     	;# 
   387  000D                     	;# 
   388  000E                     	;# 
   389  000E                     	;# 
   390  000F                     	;# 
   391  0010                     	;# 
   392  0011                     	;# 
   393  0012                     	;# 
   394  0013                     	;# 
   395  0014                     	;# 
   396  0015                     	;# 
   397  0015                     	;# 
   398  0016                     	;# 
   399  0017                     	;# 
   400  0018                     	;# 
   401  0019                     	;# 
   402  001A                     	;# 
   403  001B                     	;# 
   404  001B                     	;# 
   405  001C                     	;# 
   406  001D                     	;# 
   407  001E                     	;# 
   408  001F                     	;# 
   409  0081                     	;# 
   410  0085                     	;# 
   411  0086                     	;# 
   412  0087                     	;# 
   413  0089                     	;# 
   414  008C                     	;# 
   415  008D                     	;# 
   416  008E                     	;# 
   417  008F                     	;# 
   418  0090                     	;# 
   419  0091                     	;# 
   420  0092                     	;# 
   421  0093                     	;# 
   422  0093                     	;# 
   423  0093                     	;# 
   424  0094                     	;# 
   425  0095                     	;# 
   426  0096                     	;# 
   427  0097                     	;# 
   428  0098                     	;# 
   429  0099                     	;# 
   430  009A                     	;# 
   431  009B                     	;# 
   432  009C                     	;# 
   433  009D                     	;# 
   434  009E                     	;# 
   435  009F                     	;# 
   436  0105                     	;# 
   437  0107                     	;# 
   438  0108                     	;# 
   439  0109                     	;# 
   440  010C                     	;# 
   441  010C                     	;# 
   442  010D                     	;# 
   443  010E                     	;# 
   444  010F                     	;# 
   445  0185                     	;# 
   446  0187                     	;# 
   447  0188                     	;# 
   448  0189                     	;# 
   449  018C                     	;# 
   450  018D                     	;# 
   451                           
   452                           	psect	nvCOMMON
   453  007A                     __pnvCOMMON:	
   454  007A                     _UQEnd:	
   455  007A                     	ds	1
   456  007B                     _UQFront:	
   457  007B                     	ds	1
   458  0007                     _PORTCbits	set	7
   459  001A                     _RCREG	set	26
   460  0019                     _TXREG	set	25
   461  000C                     _PIR1bits	set	12
   462  000B                     _INTCONbits	set	11
   463  0018                     _RCSTAbits	set	24
   464  0006                     _PORTB	set	6
   465  005F                     _GIE	set	95
   466  0087                     _TRISCbits	set	135
   467  0081                     _OPTION_REGbits	set	129
   468  008C                     _PIE1bits	set	140
   469  0098                     _TXSTAbits	set	152
   470  0099                     _SPBRG	set	153
   471  0086                     _TRISB	set	134
   472  04C2                     _BRGH	set	1218
   473  0189                     _ANSELH	set	393
   474                           
   475                           	psect	strings
   476  03C5                     __pstrings:	
   477  03C5                     stringtab:	
   478  03C5                     __stringtab:	
   479                           
   480                           ;	String table - string pointers are 1 byte each
   481  03C5  1BFF               	btfsc	btemp+1,7
   482  03C6  2BCF               	ljmp	stringcode
   483  03C7  1383               	bcf	3,7
   484  03C8  187F               	btfsc	btemp+1,0
   485  03C9  1783               	bsf	3,7
   486  03CA  0800               	movf	0,w
   487  03CB  0A84               	incf	4,f
   488  03CC  1903               	skipnz
   489  03CD  0AFF               	incf	btemp+1,f
   490  03CE  0008               	return
   491  03CF                     stringcode:	
   492  03CF                     stringdir:	
   493  03CF  3003               	movlw	high stringdir
   494  03D0  008A               	movwf	10
   495  03D1  0804               	movf	4,w
   496  03D2  0A84               	incf	4,f
   497  03D3  0782               	addwf	2,f
   498  03D4                     __stringbase:	
   499  03D4  3400               	retlw	0
   500  03D5                     __end_of__stringtab:	
   501  03D5                     STR_1:	
   502  03D5  3453               	retlw	83	;'S'
   503  03D6  3465               	retlw	101	;'e'
   504  03D7  3472               	retlw	114	;'r'
   505  03D8  3469               	retlw	105	;'i'
   506  03D9  3461               	retlw	97	;'a'
   507  03DA  346C               	retlw	108	;'l'
   508  03DB  3420               	retlw	32	;' '
   509  03DC  344F               	retlw	79	;'O'
   510  03DD  344B               	retlw	75	;'K'
   511  03DE  3421               	retlw	33	;'!'
   512  03DF  3400               	retlw	0
   513                           
   514                           ; #config settings
   515  0000                     
   516                           	psect	cinit
   517  0011                     start_initialization:	
   518  0011                     __initialization:	
   519                           
   520                           ; Clear objects allocated to COMMON
   521  0011  01FC               	clrf	__pbssCOMMON& (0+127)
   522  0012  01FD               	clrf	(__pbssCOMMON+1)& (0+127)
   523                           
   524                           ; Clear objects allocated to BANK0
   525  0013  3020               	movlw	low __pbssBANK0
   526  0014  0084               	movwf	4
   527  0015  303D               	movlw	low (__pbssBANK0+29)
   528  0016  247B               	fcall	clear_ram0
   529  0017                     end_of_initialization:	
   530                           ;End of C runtime variable initialization code
   531                           
   532  0017                     __end_of__initialization:	
   533  0017  0183               	clrf	3
   534  0018  2C39               	ljmp	_main	;jump to C main() function
   535                           
   536                           	psect	bssCOMMON
   537  007C                     __pbssCOMMON:	
   538  007C                     _currentKey:	
   539  007C                     	ds	1
   540  007D                     _buttonPressed:	
   541  007D                     	ds	1
   542                           
   543                           	psect	bssBANK0
   544  0020                     __pbssBANK0:	
   545  0020                     _URBuff:	
   546  0020                     	ds	12
   547  002C                     USARTWriteInt@F1616:	
   548  002C                     	ds	5
   549  0031                     _currentKeypadStatus:	
   550  0031                     	ds	2
   551  0033                     _lastKey:	
   552  0033                     	ds	1
   553  0034                     _rxCount:	
   554  0034                     	ds	1
   555  0035                     _recvCommand:	
   556  0035                     	ds	6
   557  003B                     _keypadState:	
   558  003B                     	ds	2
   559                           
   560                           	psect	clrtext
   561  047B                     clear_ram0:	
   562                           ;	Called with FSR containing the base address, and
   563                           ;	W with the last address+1
   564                           
   565  047B  0064               	clrwdt	;clear the watchdog before getting into this loop
   566  047C                     clrloop0:	
   567  047C  0180               	clrf	0	;clear RAM location pointed to by FSR
   568  047D  0A84               	incf	4,f	;increment pointer
   569  047E  0604               	xorwf	4,w	;XOR with final address
   570  047F  1903               	btfsc	3,2	;have we reached the end yet?
   571  0480  3400               	retlw	0	;all done for this memory range, return
   572  0481  0604               	xorwf	4,w	;XOR again to restore value
   573  0482  2C7C               	goto	clrloop0	;do the next byte
   574                           
   575                           	psect	cstackCOMMON
   576  0070                     __pcstackCOMMON:	
   577  0070                     ?_controllerInit:	
   578  0070                     ?_rs485Tx:	
   579                           ; 1 bytes @ 0x0
   580                           
   581  0070                     ?_rs485Rx:	
   582                           ; 1 bytes @ 0x0
   583                           
   584  0070                     ?_checkCommandRx:	
   585                           ; 1 bytes @ 0x0
   586                           
   587  0070                     ?_scanKeypad:	
   588                           ; 1 bytes @ 0x0
   589                           
   590  0070                     ?_sendButtonInfo:	
   591                           ; 1 bytes @ 0x0
   592                           
   593  0070                     ?_ackButton:	
   594                           ; 1 bytes @ 0x0
   595                           
   596  0070                     ?_resetKeypad:	
   597                           ; 1 bytes @ 0x0
   598                           
   599  0070                     ?_initKeypad:	
   600                           ; 1 bytes @ 0x0
   601                           
   602  0070                     ?_getKey:	
   603                           ; 1 bytes @ 0x0
   604                           
   605  0070                     ?_USARTWriteChar:	
   606                           ; 1 bytes @ 0x0
   607                           
   608  0070                     ?_USARTHandleRxInt:	
   609                           ; 1 bytes @ 0x0
   610                           
   611  0070                     ??_USARTHandleRxInt:	
   612                           ; 1 bytes @ 0x0
   613                           
   614  0070                     ?_USARTReadData:	
   615                           ; 1 bytes @ 0x0
   616                           
   617  0070                     ?_main:	
   618                           ; 1 bytes @ 0x0
   619                           
   620  0070                     ?_gpioInit:	
   621                           ; 1 bytes @ 0x0
   622                           
   623  0070                     ?_runProtocol:	
   624                           ; 1 bytes @ 0x0
   625                           
   626  0070                     ?_ISR:	
   627                           ; 1 bytes @ 0x0
   628                           
   629                           
   630                           ; 1 bytes @ 0x0
   631  0070                     	ds	4
   632  0074                     USARTHandleRxInt@data:	
   633                           
   634                           ; 1 bytes @ 0x4
   635  0074                     	ds	1
   636  0075                     ??_ISR:	
   637                           
   638                           ; 1 bytes @ 0x5
   639  0075                     	ds	5
   640                           
   641                           	psect	cstackBANK0
   642  003D                     __pcstackBANK0:	
   643  003D                     ??_rs485Tx:	
   644  003D                     ??_rs485Rx:	
   645                           ; 1 bytes @ 0x0
   646                           
   647  003D                     ??_initKeypad:	
   648                           ; 1 bytes @ 0x0
   649                           
   650  003D                     ??_getKey:	
   651                           ; 1 bytes @ 0x0
   652                           
   653  003D                     ?_USARTInit:	
   654                           ; 1 bytes @ 0x0
   655                           
   656  003D                     ??_USARTWriteChar:	
   657                           ; 1 bytes @ 0x0
   658                           
   659  003D                     ??_USARTReadData:	
   660                           ; 1 bytes @ 0x0
   661                           
   662  003D                     ??_gpioInit:	
   663                           ; 1 bytes @ 0x0
   664                           
   665  003D                     ?_sortRxFrame:	
   666                           ; 1 bytes @ 0x0
   667                           
   668  003D                     USARTWriteChar@ch:	
   669                           ; 1 bytes @ 0x0
   670                           
   671  003D                     sortRxFrame@commandStruct:	
   672                           ; 1 bytes @ 0x0
   673                           
   674  003D                     USARTInit@baud_rate:	
   675                           ; 1 bytes @ 0x0
   676                           
   677                           
   678                           ; 2 bytes @ 0x0
   679  003D                     	ds	1
   680  003E                     ?_USARTWriteString:	
   681  003E                     ??_sortRxFrame:	
   682                           ; 1 bytes @ 0x1
   683                           
   684  003E                     USARTReadData@data:	
   685                           ; 1 bytes @ 0x1
   686                           
   687  003E                     USARTWriteString@str:	
   688                           ; 1 bytes @ 0x1
   689                           
   690                           
   691                           ; 2 bytes @ 0x1
   692  003E                     	ds	1
   693  003F                     ??_USARTInit:	
   694  003F                     ?_USARTReadBuffer:	
   695                           ; 1 bytes @ 0x2
   696                           
   697  003F                     getKey@keypadState:	
   698                           ; 1 bytes @ 0x2
   699                           
   700  003F                     USARTReadBuffer@len:	
   701                           ; 1 bytes @ 0x2
   702                           
   703                           
   704                           ; 2 bytes @ 0x2
   705  003F                     	ds	1
   706  0040                     ??_controllerInit:	
   707  0040                     ??_scanKeypad:	
   708                           ; 1 bytes @ 0x3
   709                           
   710  0040                     USARTWriteString@len:	
   711                           ; 1 bytes @ 0x3
   712                           
   713  0040                     sortRxFrame@rxBuf:	
   714                           ; 1 bytes @ 0x3
   715                           
   716                           
   717                           ; 1 bytes @ 0x3
   718  0040                     	ds	1
   719  0041                     ??_sendButtonInfo:	
   720  0041                     ??_ackButton:	
   721                           ; 1 bytes @ 0x4
   722                           
   723  0041                     ??_resetKeypad:	
   724                           ; 1 bytes @ 0x4
   725                           
   726  0041                     ??_USARTWriteString:	
   727                           ; 1 bytes @ 0x4
   728                           
   729  0041                     ?_USARTWriteLine:	
   730                           ; 1 bytes @ 0x4
   731                           
   732  0041                     ??_USARTReadBuffer:	
   733                           ; 1 bytes @ 0x4
   734                           
   735  0041                     USARTWriteLine@len:	
   736                           ; 1 bytes @ 0x4
   737                           
   738  0041                     sortRxFrame@err:	
   739                           ; 1 bytes @ 0x4
   740                           
   741                           
   742                           ; 1 bytes @ 0x4
   743  0041                     	ds	1
   744  0042                     ??_USARTWriteLine:	
   745  0042                     sortRxFrame@command:	
   746                           ; 1 bytes @ 0x5
   747                           
   748  0042                     sendButtonInfo@buffer:	
   749                           ; 1 bytes @ 0x5
   750                           
   751  0042                     ackButton@buffer:	
   752                           ; 6 bytes @ 0x5
   753                           
   754  0042                     resetKeypad@buffer:	
   755                           ; 6 bytes @ 0x5
   756                           
   757                           
   758                           ; 6 bytes @ 0x5
   759  0042                     	ds	1
   760  0043                     USARTWriteLine@str:	
   761  0043                     USARTReadBuffer@buff:	
   762                           ; 1 bytes @ 0x6
   763                           
   764                           
   765                           ; 1 bytes @ 0x6
   766  0043                     	ds	1
   767  0044                     USARTReadBuffer@i:	
   768                           
   769                           ; 2 bytes @ 0x7
   770  0044                     	ds	4
   771  0048                     sendButtonInfo@button:	
   772                           
   773                           ; 1 bytes @ 0xB
   774  0048                     	ds	1
   775  0049                     ??_runProtocol:	
   776                           
   777                           ; 1 bytes @ 0xC
   778  0049                     	ds	1
   779  004A                     runProtocol@command:	
   780                           
   781                           ; 1 bytes @ 0xD
   782  004A                     	ds	1
   783  004B                     runProtocol@commandRecv:	
   784                           
   785                           ; 1 bytes @ 0xE
   786  004B                     	ds	1
   787  004C                     ??_checkCommandRx:	
   788                           
   789                           ; 1 bytes @ 0xF
   790  004C                     	ds	1
   791  004D                     checkCommandRx@buffer:	
   792                           
   793                           ; 6 bytes @ 0x10
   794  004D                     	ds	6
   795  0053                     ??_main:	
   796                           
   797                           ; 1 bytes @ 0x16
   798  0053                     	ds	1
   799                           
   800                           	psect	maintext
   801  0439                     __pmaintext:	
   802 ;;
   803 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   804 ;;
   805 ;; *************** function _main *****************
   806 ;; Defined at:
   807 ;;		line 34 in file "main.c"
   808 ;; Parameters:    Size  Location     Type
   809 ;;		None
   810 ;; Auto vars:     Size  Location     Type
   811 ;;		None
   812 ;; Return value:  Size  Location     Type
   813 ;;                  1    wreg      void 
   814 ;; Registers used:
   815 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   816 ;; Tracked objects:
   817 ;;		On entry : B00/0
   818 ;;		On exit  : 0/0
   819 ;;		Unchanged: 0/0
   820 ;; Data sizes:     COMMON   BANK0   BANK1
   821 ;;      Params:         0       0       0
   822 ;;      Locals:         0       0       0
   823 ;;      Temps:          0       1       0
   824 ;;      Totals:         0       1       0
   825 ;;Total ram usage:        1 bytes
   826 ;; Hardware stack levels required when called:    7
   827 ;; This function calls:
   828 ;;		_USARTWriteLine
   829 ;;		_checkCommandRx
   830 ;;		_controllerInit
   831 ;;		_rs485Rx
   832 ;;		_rs485Tx
   833 ;;		_scanKeypad
   834 ;; This function is called by:
   835 ;;		Startup code after reset
   836 ;; This function uses a non-reentrant model
   837 ;;
   838                           
   839                           
   840                           ;psect for function _main
   841  0439                     _main:	
   842                           
   843                           ;main.c: 36: controllerInit();
   844                           
   845                           ;incstack = 0
   846                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   847  0439  245F               	fcall	_controllerInit
   848                           
   849                           ;main.c: 39: rs485Tx();
   850  043A  248B               	fcall	_rs485Tx
   851                           
   852                           ;main.c: 40: USARTWriteLine("Serial OK!", 10);
   853  043B  300A               	movlw	10
   854  043C  1283               	bcf	3,5	;RP0=0, select bank0
   855  043D  1303               	bcf	3,6	;RP1=0, select bank0
   856  043E  00D3               	movwf	??_main
   857  043F  0853               	movf	??_main,w
   858  0440  00C1               	movwf	USARTWriteLine@len
   859  0441  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   860  0442  240F               	fcall	_USARTWriteLine
   861                           
   862                           ;main.c: 41: _delay(500);
   863  0443  30A6               	movlw	166
   864  0444  1283               	bcf	3,5	;RP0=0, select bank0
   865  0445  1303               	bcf	3,6	;RP1=0, select bank0
   866  0446  00D3               	movwf	??_main
   867  0447                     u1157:	
   868  0447  0BD3               	decfsz	??_main,f
   869  0448  2C47               	goto	u1157
   870                           
   871                           ;main.c: 42: rs485Rx();
   872  0449  248F               	fcall	_rs485Rx
   873  044A                     l1872:	
   874                           ;main.c: 47: while(1)
   875                           
   876                           
   877                           ;main.c: 48: {
   878                           ;main.c: 49: checkCommandRx();
   879  044A  23E0               	fcall	_checkCommandRx
   880                           
   881                           ;main.c: 50: scanKeypad();
   882  044B  244D               	fcall	_scanKeypad
   883  044C  2C4A               	goto	l1872
   884  044D                     __end_of_main:	
   885                           
   886                           	psect	text1
   887  044D                     __ptext1:	
   888 ;; *************** function _scanKeypad *****************
   889 ;; Defined at:
   890 ;;		line 157 in file "sysFunc.c"
   891 ;; Parameters:    Size  Location     Type
   892 ;;		None
   893 ;; Auto vars:     Size  Location     Type
   894 ;;		None
   895 ;; Return value:  Size  Location     Type
   896 ;;                  1    wreg      unsigned char 
   897 ;; Registers used:
   898 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   899 ;; Tracked objects:
   900 ;;		On entry : 0/0
   901 ;;		On exit  : 0/0
   902 ;;		Unchanged: 0/0
   903 ;; Data sizes:     COMMON   BANK0   BANK1
   904 ;;      Params:         0       0       0
   905 ;;      Locals:         0       0       0
   906 ;;      Temps:          0       1       0
   907 ;;      Totals:         0       1       0
   908 ;;Total ram usage:        1 bytes
   909 ;; Hardware stack levels used:    1
   910 ;; Hardware stack levels required when called:    3
   911 ;; This function calls:
   912 ;;		_getKey
   913 ;; This function is called by:
   914 ;;		_main
   915 ;; This function uses a non-reentrant model
   916 ;;
   917                           
   918                           
   919                           ;psect for function _scanKeypad
   920  044D                     _scanKeypad:	
   921                           
   922                           ;sysFunc.c: 159: if(!keypadState.keyPressIndicator && !keypadState.keyLock)
   923                           
   924                           ;incstack = 0
   925                           ; Regs used in _scanKeypad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   926  044D  1283               	bcf	3,5	;RP0=0, select bank0
   927  044E  1303               	bcf	3,6	;RP1=0, select bank0
   928  044F  183B               	btfsc	_keypadState,0
   929  0450  0008               	return
   930  0451  193B               	btfsc	_keypadState,2
   931  0452  0008               	return
   932                           
   933                           ;sysFunc.c: 160: {
   934                           ;sysFunc.c: 161: getKey(&keypadState);
   935  0453  303B               	movlw	(low (_keypadState| 0))& (0+255)
   936  0454  2019               	fcall	_getKey
   937                           
   938                           ;sysFunc.c: 163: if(keypadState.keyPressIndicator)
   939  0455  1283               	bcf	3,5	;RP0=0, select bank0
   940  0456  1303               	bcf	3,6	;RP1=0, select bank0
   941  0457  1C3B               	btfss	_keypadState,0
   942  0458  0008               	return
   943                           
   944                           ;sysFunc.c: 164: {
   945                           ;sysFunc.c: 165: lastKey = keypadState.keyPressed;
   946  0459  083C               	movf	_keypadState+1,w
   947  045A  00C0               	movwf	??_scanKeypad
   948  045B  0840               	movf	??_scanKeypad,w
   949  045C  00B3               	movwf	_lastKey
   950                           
   951                           ;sysFunc.c: 166: keypadState.keyLock = 1;
   952  045D  153B               	bsf	_keypadState,2
   953                           
   954                           ;sysFunc.c: 167: return 0;
   955                           ;	Return value of _scanKeypad is never used
   956  045E  0008               	return
   957  045F                     __end_of_scanKeypad:	
   958                           ;sysFunc.c: 168: }
   959                           ;sysFunc.c: 169: }
   960                           ;sysFunc.c: 170: return 1;
   961                           ;	Return value of _scanKeypad is never used
   962                           
   963                           
   964                           	psect	text2
   965  0019                     __ptext2:	
   966 ;; *************** function _getKey *****************
   967 ;; Defined at:
   968 ;;		line 30 in file "Keypad4X4.c"
   969 ;; Parameters:    Size  Location     Type
   970 ;;  keypadState     1    wreg     PTR struct .
   971 ;;		 -> keypadState(2), 
   972 ;; Auto vars:     Size  Location     Type
   973 ;;  keypadState     1    2[BANK0 ] PTR struct .
   974 ;;		 -> keypadState(2), 
   975 ;; Return value:  Size  Location     Type
   976 ;;                  1    wreg      void 
   977 ;; Registers used:
   978 ;;		wreg, fsr0l, fsr0h, status,2
   979 ;; Tracked objects:
   980 ;;		On entry : 0/0
   981 ;;		On exit  : 0/0
   982 ;;		Unchanged: 0/0
   983 ;; Data sizes:     COMMON   BANK0   BANK1
   984 ;;      Params:         0       0       0
   985 ;;      Locals:         0       1       0
   986 ;;      Temps:          0       2       0
   987 ;;      Totals:         0       3       0
   988 ;;Total ram usage:        3 bytes
   989 ;; Hardware stack levels used:    1
   990 ;; Hardware stack levels required when called:    2
   991 ;; This function calls:
   992 ;;		Nothing
   993 ;; This function is called by:
   994 ;;		_scanKeypad
   995 ;; This function uses a non-reentrant model
   996 ;;
   997                           
   998                           
   999                           ;psect for function _getKey
  1000  0019                     _getKey:	
  1001                           
  1002                           ;incstack = 0
  1003                           ; Regs used in _getKey: [wreg-fsr0h+status,2]
  1004                           ;getKey@keypadState stored from wreg
  1005  0019  1283               	bcf	3,5	;RP0=0, select bank0
  1006  001A  1303               	bcf	3,6	;RP1=0, select bank0
  1007  001B  00BF               	movwf	getKey@keypadState
  1008                           
  1009                           ;Keypad4X4.c: 33: PORTB = 0xFE;
  1010  001C  30FE               	movlw	254
  1011  001D  0086               	movwf	6	;volatile
  1012                           
  1013                           ;Keypad4X4.c: 34: if ((PORTB & 0x10) == 0x00)
  1014  001E  1A06               	btfsc	6,4	;volatile
  1015  001F  283A               	goto	l16
  1016                           
  1017                           ;Keypad4X4.c: 35: {
  1018                           ;Keypad4X4.c: 36: _delay((unsigned long)((100)*(4000000/4000.0)));
  1019  0020  3082               	movlw	130
  1020  0021  1283               	bcf	3,5	;RP0=0, select bank0
  1021  0022  1303               	bcf	3,6	;RP1=0, select bank0
  1022  0023  00BE               	movwf	??_getKey+1
  1023  0024  30DD               	movlw	221
  1024  0025  00BD               	movwf	??_getKey
  1025  0026                     u1167:	
  1026  0026  0BBD               	decfsz	??_getKey,f
  1027  0027  2826               	goto	u1167
  1028  0028  0BBE               	decfsz	??_getKey+1,f
  1029  0029  2826               	goto	u1167
  1030  002A  0000               	nop
  1031                           
  1032                           ;Keypad4X4.c: 37: buttonPressed = BUTTON_1;
  1033  002B  01FD               	clrf	_buttonPressed
  1034  002C  0AFD               	incf	_buttonPressed,f
  1035                           
  1036                           ;Keypad4X4.c: 38: keypadState->keyPressIndicator = 1;
  1037  002D  1283               	bcf	3,5	;RP0=0, select bank0
  1038  002E  1303               	bcf	3,6	;RP1=0, select bank0
  1039  002F  083F               	movf	getKey@keypadState,w
  1040  0030  0084               	movwf	4
  1041  0031  1383               	bcf	3,7	;select IRP bank0
  1042  0032  1400               	bsf	0,0
  1043                           
  1044                           ;Keypad4X4.c: 39: keypadState->keyPressed = buttonPressed;
  1045  0033  087D               	movf	_buttonPressed,w
  1046  0034  00BD               	movwf	??_getKey
  1047  0035  0A3F               	incf	getKey@keypadState,w
  1048  0036  0084               	movwf	4
  1049  0037  083D               	movf	??_getKey,w
  1050  0038  0080               	movwf	0
  1051                           
  1052                           ;Keypad4X4.c: 40: return;
  1053  0039  0008               	return
  1054  003A                     l16:	
  1055                           ;Keypad4X4.c: 41: }
  1056                           
  1057                           
  1058                           ;Keypad4X4.c: 43: else if ((PORTB & 0x20) == 0x00)
  1059  003A  1A86               	btfsc	6,5	;volatile
  1060  003B  2858               	goto	l19
  1061                           
  1062                           ;Keypad4X4.c: 44: {
  1063                           ;Keypad4X4.c: 45: _delay((unsigned long)((100)*(4000000/4000.0)));
  1064  003C  3082               	movlw	130
  1065  003D  1283               	bcf	3,5	;RP0=0, select bank0
  1066  003E  1303               	bcf	3,6	;RP1=0, select bank0
  1067  003F  00BE               	movwf	??_getKey+1
  1068  0040  30DD               	movlw	221
  1069  0041  00BD               	movwf	??_getKey
  1070  0042                     u1177:	
  1071  0042  0BBD               	decfsz	??_getKey,f
  1072  0043  2842               	goto	u1177
  1073  0044  0BBE               	decfsz	??_getKey+1,f
  1074  0045  2842               	goto	u1177
  1075  0046  0000               	nop
  1076                           
  1077                           ;Keypad4X4.c: 46: buttonPressed = BUTTON_2;
  1078  0047  3002               	movlw	2
  1079  0048  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0049  1303               	bcf	3,6	;RP1=0, select bank0
  1081  004A  00BD               	movwf	??_getKey
  1082  004B  083D               	movf	??_getKey,w
  1083  004C  00FD               	movwf	_buttonPressed
  1084                           
  1085                           ;Keypad4X4.c: 47: keypadState->keyPressIndicator = 1;
  1086  004D  083F               	movf	getKey@keypadState,w
  1087  004E  0084               	movwf	4
  1088  004F  1383               	bcf	3,7	;select IRP bank0
  1089  0050  1400               	bsf	0,0
  1090                           
  1091                           ;Keypad4X4.c: 48: keypadState->keyPressed = buttonPressed;
  1092  0051  087D               	movf	_buttonPressed,w
  1093  0052  00BD               	movwf	??_getKey
  1094  0053  0A3F               	incf	getKey@keypadState,w
  1095  0054  0084               	movwf	4
  1096  0055  083D               	movf	??_getKey,w
  1097  0056  0080               	movwf	0
  1098                           
  1099                           ;Keypad4X4.c: 49: return;
  1100  0057  0008               	return
  1101  0058                     l19:	
  1102                           ;Keypad4X4.c: 50: }
  1103                           
  1104                           
  1105                           ;Keypad4X4.c: 52: else if ((PORTB & 0x40) == 0x00)
  1106  0058  1B06               	btfsc	6,6	;volatile
  1107  0059  2876               	goto	l21
  1108                           
  1109                           ;Keypad4X4.c: 53: {
  1110                           ;Keypad4X4.c: 54: _delay((unsigned long)((100)*(4000000/4000.0)));
  1111  005A  3082               	movlw	130
  1112  005B  1283               	bcf	3,5	;RP0=0, select bank0
  1113  005C  1303               	bcf	3,6	;RP1=0, select bank0
  1114  005D  00BE               	movwf	??_getKey+1
  1115  005E  30DD               	movlw	221
  1116  005F  00BD               	movwf	??_getKey
  1117  0060                     u1187:	
  1118  0060  0BBD               	decfsz	??_getKey,f
  1119  0061  2860               	goto	u1187
  1120  0062  0BBE               	decfsz	??_getKey+1,f
  1121  0063  2860               	goto	u1187
  1122  0064  0000               	nop
  1123                           
  1124                           ;Keypad4X4.c: 55: buttonPressed = BUTTON_3;
  1125  0065  3003               	movlw	3
  1126  0066  1283               	bcf	3,5	;RP0=0, select bank0
  1127  0067  1303               	bcf	3,6	;RP1=0, select bank0
  1128  0068  00BD               	movwf	??_getKey
  1129  0069  083D               	movf	??_getKey,w
  1130  006A  00FD               	movwf	_buttonPressed
  1131                           
  1132                           ;Keypad4X4.c: 56: keypadState->keyPressIndicator = 1;
  1133  006B  083F               	movf	getKey@keypadState,w
  1134  006C  0084               	movwf	4
  1135  006D  1383               	bcf	3,7	;select IRP bank0
  1136  006E  1400               	bsf	0,0
  1137                           
  1138                           ;Keypad4X4.c: 57: keypadState->keyPressed = buttonPressed;
  1139  006F  087D               	movf	_buttonPressed,w
  1140  0070  00BD               	movwf	??_getKey
  1141  0071  0A3F               	incf	getKey@keypadState,w
  1142  0072  0084               	movwf	4
  1143  0073  083D               	movf	??_getKey,w
  1144  0074  0080               	movwf	0
  1145                           
  1146                           ;Keypad4X4.c: 58: return;
  1147  0075  0008               	return
  1148  0076                     l21:	
  1149                           ;Keypad4X4.c: 59: }
  1150                           
  1151                           
  1152                           ;Keypad4X4.c: 61: else if ((PORTB & 0x80) == 0x00)
  1153  0076  1B86               	btfsc	6,7	;volatile
  1154  0077  2894               	goto	l1520
  1155                           
  1156                           ;Keypad4X4.c: 62: {
  1157                           ;Keypad4X4.c: 63: _delay((unsigned long)((100)*(4000000/4000.0)));
  1158  0078  3082               	movlw	130
  1159  0079  1283               	bcf	3,5	;RP0=0, select bank0
  1160  007A  1303               	bcf	3,6	;RP1=0, select bank0
  1161  007B  00BE               	movwf	??_getKey+1
  1162  007C  30DD               	movlw	221
  1163  007D  00BD               	movwf	??_getKey
  1164  007E                     u1197:	
  1165  007E  0BBD               	decfsz	??_getKey,f
  1166  007F  287E               	goto	u1197
  1167  0080  0BBE               	decfsz	??_getKey+1,f
  1168  0081  287E               	goto	u1197
  1169  0082  0000               	nop
  1170                           
  1171                           ;Keypad4X4.c: 64: buttonPressed = BUTTON_4;
  1172  0083  3004               	movlw	4
  1173  0084  1283               	bcf	3,5	;RP0=0, select bank0
  1174  0085  1303               	bcf	3,6	;RP1=0, select bank0
  1175  0086  00BD               	movwf	??_getKey
  1176  0087  083D               	movf	??_getKey,w
  1177  0088  00FD               	movwf	_buttonPressed
  1178                           
  1179                           ;Keypad4X4.c: 65: keypadState->keyPressIndicator = 1;
  1180  0089  083F               	movf	getKey@keypadState,w
  1181  008A  0084               	movwf	4
  1182  008B  1383               	bcf	3,7	;select IRP bank0
  1183  008C  1400               	bsf	0,0
  1184                           
  1185                           ;Keypad4X4.c: 66: keypadState->keyPressed = buttonPressed;
  1186  008D  087D               	movf	_buttonPressed,w
  1187  008E  00BD               	movwf	??_getKey
  1188  008F  0A3F               	incf	getKey@keypadState,w
  1189  0090  0084               	movwf	4
  1190  0091  083D               	movf	??_getKey,w
  1191  0092  0080               	movwf	0
  1192                           
  1193                           ;Keypad4X4.c: 67: return;
  1194  0093  0008               	return
  1195  0094                     l1520:	
  1196                           
  1197                           ;Keypad4X4.c: 68: }
  1198                           ;Keypad4X4.c: 70: PORTB = 0xFD;
  1199  0094  30FD               	movlw	253
  1200  0095  0086               	movwf	6	;volatile
  1201                           
  1202                           ;Keypad4X4.c: 71: if ((PORTB & 0x10) == 0x00)
  1203  0096  1A06               	btfsc	6,4	;volatile
  1204  0097  28B4               	goto	l24
  1205                           
  1206                           ;Keypad4X4.c: 72: {
  1207                           ;Keypad4X4.c: 73: _delay((unsigned long)((100)*(4000000/4000.0)));
  1208  0098  3082               	movlw	130
  1209  0099  1283               	bcf	3,5	;RP0=0, select bank0
  1210  009A  1303               	bcf	3,6	;RP1=0, select bank0
  1211  009B  00BE               	movwf	??_getKey+1
  1212  009C  30DD               	movlw	221
  1213  009D  00BD               	movwf	??_getKey
  1214  009E                     u1207:	
  1215  009E  0BBD               	decfsz	??_getKey,f
  1216  009F  289E               	goto	u1207
  1217  00A0  0BBE               	decfsz	??_getKey+1,f
  1218  00A1  289E               	goto	u1207
  1219  00A2  0000               	nop
  1220                           
  1221                           ;Keypad4X4.c: 74: buttonPressed = BUTTON_5;
  1222  00A3  3005               	movlw	5
  1223  00A4  1283               	bcf	3,5	;RP0=0, select bank0
  1224  00A5  1303               	bcf	3,6	;RP1=0, select bank0
  1225  00A6  00BD               	movwf	??_getKey
  1226  00A7  083D               	movf	??_getKey,w
  1227  00A8  00FD               	movwf	_buttonPressed
  1228                           
  1229                           ;Keypad4X4.c: 75: keypadState->keyPressIndicator = 1;
  1230  00A9  083F               	movf	getKey@keypadState,w
  1231  00AA  0084               	movwf	4
  1232  00AB  1383               	bcf	3,7	;select IRP bank0
  1233  00AC  1400               	bsf	0,0
  1234                           
  1235                           ;Keypad4X4.c: 76: keypadState->keyPressed = buttonPressed;
  1236  00AD  087D               	movf	_buttonPressed,w
  1237  00AE  00BD               	movwf	??_getKey
  1238  00AF  0A3F               	incf	getKey@keypadState,w
  1239  00B0  0084               	movwf	4
  1240  00B1  083D               	movf	??_getKey,w
  1241  00B2  0080               	movwf	0
  1242                           
  1243                           ;Keypad4X4.c: 77: return;
  1244  00B3  0008               	return
  1245  00B4                     l24:	
  1246                           ;Keypad4X4.c: 78: }
  1247                           
  1248                           
  1249                           ;Keypad4X4.c: 80: else if ((PORTB & 0x20) == 0x00)
  1250  00B4  1A86               	btfsc	6,5	;volatile
  1251  00B5  28D2               	goto	l26
  1252                           
  1253                           ;Keypad4X4.c: 81: {
  1254                           ;Keypad4X4.c: 82: _delay((unsigned long)((100)*(4000000/4000.0)));
  1255  00B6  3082               	movlw	130
  1256  00B7  1283               	bcf	3,5	;RP0=0, select bank0
  1257  00B8  1303               	bcf	3,6	;RP1=0, select bank0
  1258  00B9  00BE               	movwf	??_getKey+1
  1259  00BA  30DD               	movlw	221
  1260  00BB  00BD               	movwf	??_getKey
  1261  00BC                     u1217:	
  1262  00BC  0BBD               	decfsz	??_getKey,f
  1263  00BD  28BC               	goto	u1217
  1264  00BE  0BBE               	decfsz	??_getKey+1,f
  1265  00BF  28BC               	goto	u1217
  1266  00C0  0000               	nop
  1267                           
  1268                           ;Keypad4X4.c: 83: buttonPressed = BUTTON_6;
  1269  00C1  3006               	movlw	6
  1270  00C2  1283               	bcf	3,5	;RP0=0, select bank0
  1271  00C3  1303               	bcf	3,6	;RP1=0, select bank0
  1272  00C4  00BD               	movwf	??_getKey
  1273  00C5  083D               	movf	??_getKey,w
  1274  00C6  00FD               	movwf	_buttonPressed
  1275                           
  1276                           ;Keypad4X4.c: 84: keypadState->keyPressIndicator = 1;
  1277  00C7  083F               	movf	getKey@keypadState,w
  1278  00C8  0084               	movwf	4
  1279  00C9  1383               	bcf	3,7	;select IRP bank0
  1280  00CA  1400               	bsf	0,0
  1281                           
  1282                           ;Keypad4X4.c: 85: keypadState->keyPressed = buttonPressed;
  1283  00CB  087D               	movf	_buttonPressed,w
  1284  00CC  00BD               	movwf	??_getKey
  1285  00CD  0A3F               	incf	getKey@keypadState,w
  1286  00CE  0084               	movwf	4
  1287  00CF  083D               	movf	??_getKey,w
  1288  00D0  0080               	movwf	0
  1289                           
  1290                           ;Keypad4X4.c: 86: return;
  1291  00D1  0008               	return
  1292  00D2                     l26:	
  1293                           ;Keypad4X4.c: 87: }
  1294                           
  1295                           
  1296                           ;Keypad4X4.c: 89: else if ((PORTB & 0x40) == 0x00)
  1297  00D2  1B06               	btfsc	6,6	;volatile
  1298  00D3  28F0               	goto	l28
  1299                           
  1300                           ;Keypad4X4.c: 90: {
  1301                           ;Keypad4X4.c: 91: _delay((unsigned long)((100)*(4000000/4000.0)));
  1302  00D4  3082               	movlw	130
  1303  00D5  1283               	bcf	3,5	;RP0=0, select bank0
  1304  00D6  1303               	bcf	3,6	;RP1=0, select bank0
  1305  00D7  00BE               	movwf	??_getKey+1
  1306  00D8  30DD               	movlw	221
  1307  00D9  00BD               	movwf	??_getKey
  1308  00DA                     u1227:	
  1309  00DA  0BBD               	decfsz	??_getKey,f
  1310  00DB  28DA               	goto	u1227
  1311  00DC  0BBE               	decfsz	??_getKey+1,f
  1312  00DD  28DA               	goto	u1227
  1313  00DE  0000               	nop
  1314                           
  1315                           ;Keypad4X4.c: 92: buttonPressed = BUTTON_7;
  1316  00DF  3007               	movlw	7
  1317  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1318  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1319  00E2  00BD               	movwf	??_getKey
  1320  00E3  083D               	movf	??_getKey,w
  1321  00E4  00FD               	movwf	_buttonPressed
  1322                           
  1323                           ;Keypad4X4.c: 93: keypadState->keyPressIndicator = 1;
  1324  00E5  083F               	movf	getKey@keypadState,w
  1325  00E6  0084               	movwf	4
  1326  00E7  1383               	bcf	3,7	;select IRP bank0
  1327  00E8  1400               	bsf	0,0
  1328                           
  1329                           ;Keypad4X4.c: 94: keypadState->keyPressed = buttonPressed;
  1330  00E9  087D               	movf	_buttonPressed,w
  1331  00EA  00BD               	movwf	??_getKey
  1332  00EB  0A3F               	incf	getKey@keypadState,w
  1333  00EC  0084               	movwf	4
  1334  00ED  083D               	movf	??_getKey,w
  1335  00EE  0080               	movwf	0
  1336                           
  1337                           ;Keypad4X4.c: 95: return;
  1338  00EF  0008               	return
  1339  00F0                     l28:	
  1340                           ;Keypad4X4.c: 96: }
  1341                           
  1342                           
  1343                           ;Keypad4X4.c: 98: else if ((PORTB & 0x80) == 0x00)
  1344  00F0  1B86               	btfsc	6,7	;volatile
  1345  00F1  290E               	goto	l1562
  1346                           
  1347                           ;Keypad4X4.c: 99: {
  1348                           ;Keypad4X4.c: 100: _delay((unsigned long)((100)*(4000000/4000.0)));
  1349  00F2  3082               	movlw	130
  1350  00F3  1283               	bcf	3,5	;RP0=0, select bank0
  1351  00F4  1303               	bcf	3,6	;RP1=0, select bank0
  1352  00F5  00BE               	movwf	??_getKey+1
  1353  00F6  30DD               	movlw	221
  1354  00F7  00BD               	movwf	??_getKey
  1355  00F8                     u1237:	
  1356  00F8  0BBD               	decfsz	??_getKey,f
  1357  00F9  28F8               	goto	u1237
  1358  00FA  0BBE               	decfsz	??_getKey+1,f
  1359  00FB  28F8               	goto	u1237
  1360  00FC  0000               	nop
  1361                           
  1362                           ;Keypad4X4.c: 101: buttonPressed = BUTTON_8;
  1363  00FD  3008               	movlw	8
  1364  00FE  1283               	bcf	3,5	;RP0=0, select bank0
  1365  00FF  1303               	bcf	3,6	;RP1=0, select bank0
  1366  0100  00BD               	movwf	??_getKey
  1367  0101  083D               	movf	??_getKey,w
  1368  0102  00FD               	movwf	_buttonPressed
  1369                           
  1370                           ;Keypad4X4.c: 102: keypadState->keyPressIndicator = 1;
  1371  0103  083F               	movf	getKey@keypadState,w
  1372  0104  0084               	movwf	4
  1373  0105  1383               	bcf	3,7	;select IRP bank0
  1374  0106  1400               	bsf	0,0
  1375                           
  1376                           ;Keypad4X4.c: 103: keypadState->keyPressed = buttonPressed;
  1377  0107  087D               	movf	_buttonPressed,w
  1378  0108  00BD               	movwf	??_getKey
  1379  0109  0A3F               	incf	getKey@keypadState,w
  1380  010A  0084               	movwf	4
  1381  010B  083D               	movf	??_getKey,w
  1382  010C  0080               	movwf	0
  1383                           
  1384                           ;Keypad4X4.c: 104: return;
  1385  010D  0008               	return
  1386  010E                     l1562:	
  1387                           
  1388                           ;Keypad4X4.c: 105: }
  1389                           ;Keypad4X4.c: 107: PORTB = 0xFB;
  1390  010E  30FB               	movlw	251
  1391  010F  0086               	movwf	6	;volatile
  1392                           
  1393                           ;Keypad4X4.c: 108: if ((PORTB & 0x10) == 0x00)
  1394  0110  1A06               	btfsc	6,4	;volatile
  1395  0111  292E               	goto	l31
  1396                           
  1397                           ;Keypad4X4.c: 109: {
  1398                           ;Keypad4X4.c: 110: _delay((unsigned long)((100)*(4000000/4000.0)));
  1399  0112  3082               	movlw	130
  1400  0113  1283               	bcf	3,5	;RP0=0, select bank0
  1401  0114  1303               	bcf	3,6	;RP1=0, select bank0
  1402  0115  00BE               	movwf	??_getKey+1
  1403  0116  30DD               	movlw	221
  1404  0117  00BD               	movwf	??_getKey
  1405  0118                     u1247:	
  1406  0118  0BBD               	decfsz	??_getKey,f
  1407  0119  2918               	goto	u1247
  1408  011A  0BBE               	decfsz	??_getKey+1,f
  1409  011B  2918               	goto	u1247
  1410  011C  0000               	nop
  1411                           
  1412                           ;Keypad4X4.c: 111: buttonPressed = BUTTON_9;
  1413  011D  3009               	movlw	9
  1414  011E  1283               	bcf	3,5	;RP0=0, select bank0
  1415  011F  1303               	bcf	3,6	;RP1=0, select bank0
  1416  0120  00BD               	movwf	??_getKey
  1417  0121  083D               	movf	??_getKey,w
  1418  0122  00FD               	movwf	_buttonPressed
  1419                           
  1420                           ;Keypad4X4.c: 112: keypadState->keyPressIndicator = 1;
  1421  0123  083F               	movf	getKey@keypadState,w
  1422  0124  0084               	movwf	4
  1423  0125  1383               	bcf	3,7	;select IRP bank0
  1424  0126  1400               	bsf	0,0
  1425                           
  1426                           ;Keypad4X4.c: 113: keypadState->keyPressed = buttonPressed;
  1427  0127  087D               	movf	_buttonPressed,w
  1428  0128  00BD               	movwf	??_getKey
  1429  0129  0A3F               	incf	getKey@keypadState,w
  1430  012A  0084               	movwf	4
  1431  012B  083D               	movf	??_getKey,w
  1432  012C  0080               	movwf	0
  1433                           
  1434                           ;Keypad4X4.c: 114: return;
  1435  012D  0008               	return
  1436  012E                     l31:	
  1437                           ;Keypad4X4.c: 115: }
  1438                           
  1439                           
  1440                           ;Keypad4X4.c: 117: else if ((PORTB & 0x20) == 0x00)
  1441  012E  1A86               	btfsc	6,5	;volatile
  1442  012F  294C               	goto	l33
  1443                           
  1444                           ;Keypad4X4.c: 118: {
  1445                           ;Keypad4X4.c: 119: _delay((unsigned long)((100)*(4000000/4000.0)));
  1446  0130  3082               	movlw	130
  1447  0131  1283               	bcf	3,5	;RP0=0, select bank0
  1448  0132  1303               	bcf	3,6	;RP1=0, select bank0
  1449  0133  00BE               	movwf	??_getKey+1
  1450  0134  30DD               	movlw	221
  1451  0135  00BD               	movwf	??_getKey
  1452  0136                     u1257:	
  1453  0136  0BBD               	decfsz	??_getKey,f
  1454  0137  2936               	goto	u1257
  1455  0138  0BBE               	decfsz	??_getKey+1,f
  1456  0139  2936               	goto	u1257
  1457  013A  0000               	nop
  1458                           
  1459                           ;Keypad4X4.c: 120: buttonPressed = BUTTON_10;
  1460  013B  300A               	movlw	10
  1461  013C  1283               	bcf	3,5	;RP0=0, select bank0
  1462  013D  1303               	bcf	3,6	;RP1=0, select bank0
  1463  013E  00BD               	movwf	??_getKey
  1464  013F  083D               	movf	??_getKey,w
  1465  0140  00FD               	movwf	_buttonPressed
  1466                           
  1467                           ;Keypad4X4.c: 121: keypadState->keyPressIndicator = 1;
  1468  0141  083F               	movf	getKey@keypadState,w
  1469  0142  0084               	movwf	4
  1470  0143  1383               	bcf	3,7	;select IRP bank0
  1471  0144  1400               	bsf	0,0
  1472                           
  1473                           ;Keypad4X4.c: 122: keypadState->keyPressed = buttonPressed;
  1474  0145  087D               	movf	_buttonPressed,w
  1475  0146  00BD               	movwf	??_getKey
  1476  0147  0A3F               	incf	getKey@keypadState,w
  1477  0148  0084               	movwf	4
  1478  0149  083D               	movf	??_getKey,w
  1479  014A  0080               	movwf	0
  1480                           
  1481                           ;Keypad4X4.c: 123: return;
  1482  014B  0008               	return
  1483  014C                     l33:	
  1484                           ;Keypad4X4.c: 124: }
  1485                           
  1486                           
  1487                           ;Keypad4X4.c: 126: else if ((PORTB & 0x40) == 0x00)
  1488  014C  1B06               	btfsc	6,6	;volatile
  1489  014D  296A               	goto	l35
  1490                           
  1491                           ;Keypad4X4.c: 127: {
  1492                           ;Keypad4X4.c: 128: _delay((unsigned long)((100)*(4000000/4000.0)));
  1493  014E  3082               	movlw	130
  1494  014F  1283               	bcf	3,5	;RP0=0, select bank0
  1495  0150  1303               	bcf	3,6	;RP1=0, select bank0
  1496  0151  00BE               	movwf	??_getKey+1
  1497  0152  30DD               	movlw	221
  1498  0153  00BD               	movwf	??_getKey
  1499  0154                     u1267:	
  1500  0154  0BBD               	decfsz	??_getKey,f
  1501  0155  2954               	goto	u1267
  1502  0156  0BBE               	decfsz	??_getKey+1,f
  1503  0157  2954               	goto	u1267
  1504  0158  0000               	nop
  1505                           
  1506                           ;Keypad4X4.c: 129: buttonPressed = BUTTON_11;
  1507  0159  300B               	movlw	11
  1508  015A  1283               	bcf	3,5	;RP0=0, select bank0
  1509  015B  1303               	bcf	3,6	;RP1=0, select bank0
  1510  015C  00BD               	movwf	??_getKey
  1511  015D  083D               	movf	??_getKey,w
  1512  015E  00FD               	movwf	_buttonPressed
  1513                           
  1514                           ;Keypad4X4.c: 130: keypadState->keyPressIndicator = 1;
  1515  015F  083F               	movf	getKey@keypadState,w
  1516  0160  0084               	movwf	4
  1517  0161  1383               	bcf	3,7	;select IRP bank0
  1518  0162  1400               	bsf	0,0
  1519                           
  1520                           ;Keypad4X4.c: 131: keypadState->keyPressed = buttonPressed;
  1521  0163  087D               	movf	_buttonPressed,w
  1522  0164  00BD               	movwf	??_getKey
  1523  0165  0A3F               	incf	getKey@keypadState,w
  1524  0166  0084               	movwf	4
  1525  0167  083D               	movf	??_getKey,w
  1526  0168  0080               	movwf	0
  1527                           
  1528                           ;Keypad4X4.c: 132: return;
  1529  0169  0008               	return
  1530  016A                     l35:	
  1531                           ;Keypad4X4.c: 133: }
  1532                           
  1533                           
  1534                           ;Keypad4X4.c: 135: else if ((PORTB & 0x80) == 0x00)
  1535  016A  1B86               	btfsc	6,7	;volatile
  1536  016B  2988               	goto	l1604
  1537                           
  1538                           ;Keypad4X4.c: 136: {
  1539                           ;Keypad4X4.c: 137: _delay((unsigned long)((100)*(4000000/4000.0)));
  1540  016C  3082               	movlw	130
  1541  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1542  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1543  016F  00BE               	movwf	??_getKey+1
  1544  0170  30DD               	movlw	221
  1545  0171  00BD               	movwf	??_getKey
  1546  0172                     u1277:	
  1547  0172  0BBD               	decfsz	??_getKey,f
  1548  0173  2972               	goto	u1277
  1549  0174  0BBE               	decfsz	??_getKey+1,f
  1550  0175  2972               	goto	u1277
  1551  0176  0000               	nop
  1552                           
  1553                           ;Keypad4X4.c: 138: buttonPressed = BUTTON_12;
  1554  0177  300C               	movlw	12
  1555  0178  1283               	bcf	3,5	;RP0=0, select bank0
  1556  0179  1303               	bcf	3,6	;RP1=0, select bank0
  1557  017A  00BD               	movwf	??_getKey
  1558  017B  083D               	movf	??_getKey,w
  1559  017C  00FD               	movwf	_buttonPressed
  1560                           
  1561                           ;Keypad4X4.c: 139: keypadState->keyPressIndicator = 1;
  1562  017D  083F               	movf	getKey@keypadState,w
  1563  017E  0084               	movwf	4
  1564  017F  1383               	bcf	3,7	;select IRP bank0
  1565  0180  1400               	bsf	0,0
  1566                           
  1567                           ;Keypad4X4.c: 140: keypadState->keyPressed = buttonPressed;
  1568  0181  087D               	movf	_buttonPressed,w
  1569  0182  00BD               	movwf	??_getKey
  1570  0183  0A3F               	incf	getKey@keypadState,w
  1571  0184  0084               	movwf	4
  1572  0185  083D               	movf	??_getKey,w
  1573  0186  0080               	movwf	0
  1574                           
  1575                           ;Keypad4X4.c: 141: return;
  1576  0187  0008               	return
  1577  0188                     l1604:	
  1578                           
  1579                           ;Keypad4X4.c: 142: }
  1580                           ;Keypad4X4.c: 144: PORTB = 0xF7;
  1581  0188  30F7               	movlw	247
  1582  0189  0086               	movwf	6	;volatile
  1583                           
  1584                           ;Keypad4X4.c: 145: if ((PORTB & 0x10) == 0x00)
  1585  018A  1A06               	btfsc	6,4	;volatile
  1586  018B  29A8               	goto	l38
  1587                           
  1588                           ;Keypad4X4.c: 146: {
  1589                           ;Keypad4X4.c: 147: _delay((unsigned long)((100)*(4000000/4000.0)));
  1590  018C  3082               	movlw	130
  1591  018D  1283               	bcf	3,5	;RP0=0, select bank0
  1592  018E  1303               	bcf	3,6	;RP1=0, select bank0
  1593  018F  00BE               	movwf	??_getKey+1
  1594  0190  30DD               	movlw	221
  1595  0191  00BD               	movwf	??_getKey
  1596  0192                     u1287:	
  1597  0192  0BBD               	decfsz	??_getKey,f
  1598  0193  2992               	goto	u1287
  1599  0194  0BBE               	decfsz	??_getKey+1,f
  1600  0195  2992               	goto	u1287
  1601  0196  0000               	nop
  1602                           
  1603                           ;Keypad4X4.c: 148: buttonPressed = BUTTON_13;
  1604  0197  300D               	movlw	13
  1605  0198  1283               	bcf	3,5	;RP0=0, select bank0
  1606  0199  1303               	bcf	3,6	;RP1=0, select bank0
  1607  019A  00BD               	movwf	??_getKey
  1608  019B  083D               	movf	??_getKey,w
  1609  019C  00FD               	movwf	_buttonPressed
  1610                           
  1611                           ;Keypad4X4.c: 149: keypadState->keyPressIndicator = 1;
  1612  019D  083F               	movf	getKey@keypadState,w
  1613  019E  0084               	movwf	4
  1614  019F  1383               	bcf	3,7	;select IRP bank0
  1615  01A0  1400               	bsf	0,0
  1616                           
  1617                           ;Keypad4X4.c: 150: keypadState->keyPressed = buttonPressed;
  1618  01A1  087D               	movf	_buttonPressed,w
  1619  01A2  00BD               	movwf	??_getKey
  1620  01A3  0A3F               	incf	getKey@keypadState,w
  1621  01A4  0084               	movwf	4
  1622  01A5  083D               	movf	??_getKey,w
  1623  01A6  0080               	movwf	0
  1624                           
  1625                           ;Keypad4X4.c: 152: }
  1626                           
  1627                           ;Keypad4X4.c: 151: return;
  1628  01A7  0008               	return
  1629  01A8                     l38:	
  1630                           
  1631                           ;Keypad4X4.c: 154: else if ((PORTB & 0x20) == 0x00)
  1632  01A8  1A86               	btfsc	6,5	;volatile
  1633  01A9  29C6               	goto	l40
  1634                           
  1635                           ;Keypad4X4.c: 155: {
  1636                           ;Keypad4X4.c: 156: _delay((unsigned long)((100)*(4000000/4000.0)));
  1637  01AA  3082               	movlw	130
  1638  01AB  1283               	bcf	3,5	;RP0=0, select bank0
  1639  01AC  1303               	bcf	3,6	;RP1=0, select bank0
  1640  01AD  00BE               	movwf	??_getKey+1
  1641  01AE  30DD               	movlw	221
  1642  01AF  00BD               	movwf	??_getKey
  1643  01B0                     u1297:	
  1644  01B0  0BBD               	decfsz	??_getKey,f
  1645  01B1  29B0               	goto	u1297
  1646  01B2  0BBE               	decfsz	??_getKey+1,f
  1647  01B3  29B0               	goto	u1297
  1648  01B4  0000               	nop
  1649                           
  1650                           ;Keypad4X4.c: 157: buttonPressed = BUTTON_14;
  1651  01B5  300E               	movlw	14
  1652  01B6  1283               	bcf	3,5	;RP0=0, select bank0
  1653  01B7  1303               	bcf	3,6	;RP1=0, select bank0
  1654  01B8  00BD               	movwf	??_getKey
  1655  01B9  083D               	movf	??_getKey,w
  1656  01BA  00FD               	movwf	_buttonPressed
  1657                           
  1658                           ;Keypad4X4.c: 158: keypadState->keyPressIndicator = 1;
  1659  01BB  083F               	movf	getKey@keypadState,w
  1660  01BC  0084               	movwf	4
  1661  01BD  1383               	bcf	3,7	;select IRP bank0
  1662  01BE  1400               	bsf	0,0
  1663                           
  1664                           ;Keypad4X4.c: 159: keypadState->keyPressed = buttonPressed;
  1665  01BF  087D               	movf	_buttonPressed,w
  1666  01C0  00BD               	movwf	??_getKey
  1667  01C1  0A3F               	incf	getKey@keypadState,w
  1668  01C2  0084               	movwf	4
  1669  01C3  083D               	movf	??_getKey,w
  1670  01C4  0080               	movwf	0
  1671                           
  1672                           ;Keypad4X4.c: 161: }
  1673                           
  1674                           ;Keypad4X4.c: 160: return;
  1675  01C5  0008               	return
  1676  01C6                     l40:	
  1677                           
  1678                           ;Keypad4X4.c: 163: else if ((PORTB & 0x40) == 0x00)
  1679  01C6  1B06               	btfsc	6,6	;volatile
  1680  01C7  29E4               	goto	l42
  1681                           
  1682                           ;Keypad4X4.c: 164: {
  1683                           ;Keypad4X4.c: 165: _delay((unsigned long)((100)*(4000000/4000.0)));
  1684  01C8  3082               	movlw	130
  1685  01C9  1283               	bcf	3,5	;RP0=0, select bank0
  1686  01CA  1303               	bcf	3,6	;RP1=0, select bank0
  1687  01CB  00BE               	movwf	??_getKey+1
  1688  01CC  30DD               	movlw	221
  1689  01CD  00BD               	movwf	??_getKey
  1690  01CE                     u1307:	
  1691  01CE  0BBD               	decfsz	??_getKey,f
  1692  01CF  29CE               	goto	u1307
  1693  01D0  0BBE               	decfsz	??_getKey+1,f
  1694  01D1  29CE               	goto	u1307
  1695  01D2  0000               	nop
  1696                           
  1697                           ;Keypad4X4.c: 166: buttonPressed = BUTTON_15;
  1698  01D3  300F               	movlw	15
  1699  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1700  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1701  01D6  00BD               	movwf	??_getKey
  1702  01D7  083D               	movf	??_getKey,w
  1703  01D8  00FD               	movwf	_buttonPressed
  1704                           
  1705                           ;Keypad4X4.c: 167: keypadState->keyPressIndicator = 1;
  1706  01D9  083F               	movf	getKey@keypadState,w
  1707  01DA  0084               	movwf	4
  1708  01DB  1383               	bcf	3,7	;select IRP bank0
  1709  01DC  1400               	bsf	0,0
  1710                           
  1711                           ;Keypad4X4.c: 168: keypadState->keyPressed = buttonPressed;
  1712  01DD  087D               	movf	_buttonPressed,w
  1713  01DE  00BD               	movwf	??_getKey
  1714  01DF  0A3F               	incf	getKey@keypadState,w
  1715  01E0  0084               	movwf	4
  1716  01E1  083D               	movf	??_getKey,w
  1717  01E2  0080               	movwf	0
  1718                           
  1719                           ;Keypad4X4.c: 170: }
  1720                           
  1721                           ;Keypad4X4.c: 169: return;
  1722  01E3  0008               	return
  1723  01E4                     l42:	
  1724                           
  1725                           ;Keypad4X4.c: 172: else if ((PORTB & 0x80) == 0x00)
  1726  01E4  1B86               	btfsc	6,7	;volatile
  1727  01E5  2A02               	goto	l1648
  1728                           
  1729                           ;Keypad4X4.c: 173: {
  1730                           ;Keypad4X4.c: 174: _delay((unsigned long)((100)*(4000000/4000.0)));
  1731  01E6  3082               	movlw	130
  1732  01E7  1283               	bcf	3,5	;RP0=0, select bank0
  1733  01E8  1303               	bcf	3,6	;RP1=0, select bank0
  1734  01E9  00BE               	movwf	??_getKey+1
  1735  01EA  30DD               	movlw	221
  1736  01EB  00BD               	movwf	??_getKey
  1737  01EC                     u1317:	
  1738  01EC  0BBD               	decfsz	??_getKey,f
  1739  01ED  29EC               	goto	u1317
  1740  01EE  0BBE               	decfsz	??_getKey+1,f
  1741  01EF  29EC               	goto	u1317
  1742  01F0  0000               	nop
  1743                           
  1744                           ;Keypad4X4.c: 175: buttonPressed = BUTTON_16;
  1745  01F1  3010               	movlw	16
  1746  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  1747  01F3  1303               	bcf	3,6	;RP1=0, select bank0
  1748  01F4  00BD               	movwf	??_getKey
  1749  01F5  083D               	movf	??_getKey,w
  1750  01F6  00FD               	movwf	_buttonPressed
  1751                           
  1752                           ;Keypad4X4.c: 176: keypadState->keyPressIndicator = 1;
  1753  01F7  083F               	movf	getKey@keypadState,w
  1754  01F8  0084               	movwf	4
  1755  01F9  1383               	bcf	3,7	;select IRP bank0
  1756  01FA  1400               	bsf	0,0
  1757                           
  1758                           ;Keypad4X4.c: 177: keypadState->keyPressed = buttonPressed;
  1759  01FB  087D               	movf	_buttonPressed,w
  1760  01FC  00BD               	movwf	??_getKey
  1761  01FD  0A3F               	incf	getKey@keypadState,w
  1762  01FE  0084               	movwf	4
  1763  01FF  083D               	movf	??_getKey,w
  1764  0200  0080               	movwf	0
  1765                           
  1766                           ;Keypad4X4.c: 179: }
  1767                           
  1768                           ;Keypad4X4.c: 178: return;
  1769  0201  0008               	return
  1770  0202                     l1648:	
  1771                           
  1772                           ;Keypad4X4.c: 181: else {
  1773                           ;Keypad4X4.c: 182: keypadState->keyPressIndicator = 0;
  1774  0202  083F               	movf	getKey@keypadState,w
  1775  0203  0084               	movwf	4
  1776  0204  1383               	bcf	3,7	;select IRP bank0
  1777  0205  1000               	bcf	0,0
  1778                           
  1779                           ;Keypad4X4.c: 183: keypadState->keyPressed = BUTTON_0;
  1780  0206  0A3F               	incf	getKey@keypadState,w
  1781  0207  0084               	movwf	4
  1782  0208  0180               	clrf	0
  1783                           
  1784                           ;Keypad4X4.c: 184: return;
  1785  0209  0008               	return
  1786  020A                     __end_of_getKey:	
  1787                           
  1788                           	psect	text3
  1789  045F                     __ptext3:	
  1790 ;; *************** function _controllerInit *****************
  1791 ;; Defined at:
  1792 ;;		line 148 in file "sysFunc.c"
  1793 ;; Parameters:    Size  Location     Type
  1794 ;;		None
  1795 ;; Auto vars:     Size  Location     Type
  1796 ;;		None
  1797 ;; Return value:  Size  Location     Type
  1798 ;;                  1    wreg      void 
  1799 ;; Registers used:
  1800 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1801 ;; Tracked objects:
  1802 ;;		On entry : 0/0
  1803 ;;		On exit  : 0/0
  1804 ;;		Unchanged: 0/0
  1805 ;; Data sizes:     COMMON   BANK0   BANK1
  1806 ;;      Params:         0       0       0
  1807 ;;      Locals:         0       0       0
  1808 ;;      Temps:          0       0       0
  1809 ;;      Totals:         0       0       0
  1810 ;;Total ram usage:        0 bytes
  1811 ;; Hardware stack levels used:    1
  1812 ;; Hardware stack levels required when called:    4
  1813 ;; This function calls:
  1814 ;;		_USARTInit
  1815 ;;		_gpioInit
  1816 ;;		_initKeypad
  1817 ;; This function is called by:
  1818 ;;		_main
  1819 ;; This function uses a non-reentrant model
  1820 ;;
  1821                           
  1822                           
  1823                           ;psect for function _controllerInit
  1824  045F                     _controllerInit:	
  1825                           
  1826                           ;sysFunc.c: 150: gpioInit();
  1827                           
  1828                           ;incstack = 0
  1829                           ; Regs used in _controllerInit: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1830  045F  2472               	fcall	_gpioInit
  1831                           
  1832                           ;sysFunc.c: 151: USARTInit(9600);
  1833  0460  3080               	movlw	128
  1834  0461  1283               	bcf	3,5	;RP0=0, select bank0
  1835  0462  1303               	bcf	3,6	;RP1=0, select bank0
  1836  0463  00BD               	movwf	USARTInit@baud_rate
  1837  0464  3025               	movlw	37
  1838  0465  00BE               	movwf	USARTInit@baud_rate+1
  1839  0466  220A               	fcall	_USARTInit
  1840                           
  1841                           ;sysFunc.c: 152: initKeypad();
  1842  0467  2469               	fcall	_initKeypad
  1843  0468  0008               	return
  1844  0469                     __end_of_controllerInit:	
  1845                           ;sysFunc.c: 154: return;
  1846                           
  1847                           
  1848                           	psect	text4
  1849  0469                     __ptext4:	
  1850 ;; *************** function _initKeypad *****************
  1851 ;; Defined at:
  1852 ;;		line 18 in file "Keypad4X4.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMMON   BANK0   BANK1
  1866 ;;      Params:         0       0       0
  1867 ;;      Locals:         0       0       0
  1868 ;;      Temps:          0       0       0
  1869 ;;      Totals:         0       0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    2
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_controllerInit
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879                           
  1880                           
  1881                           ;psect for function _initKeypad
  1882  0469                     _initKeypad:	
  1883                           
  1884                           ;Keypad4X4.c: 20: TRISB = 0xF0;
  1885                           
  1886                           ;incstack = 0
  1887                           ; Regs used in _initKeypad: [wreg]
  1888  0469  30F0               	movlw	240
  1889  046A  1683               	bsf	3,5	;RP0=1, select bank1
  1890  046B  1303               	bcf	3,6	;RP1=0, select bank1
  1891  046C  0086               	movwf	6	;volatile
  1892                           
  1893                           ;Keypad4X4.c: 21: PORTB = 0xFF;
  1894  046D  30FF               	movlw	255
  1895  046E  1283               	bcf	3,5	;RP0=0, select bank0
  1896  046F  1303               	bcf	3,6	;RP1=0, select bank0
  1897  0470  0086               	movwf	6	;volatile
  1898  0471  0008               	return
  1899  0472                     __end_of_initKeypad:	
  1900                           
  1901                           	psect	text5
  1902  0472                     __ptext5:	
  1903 ;; *************** function _gpioInit *****************
  1904 ;; Defined at:
  1905 ;;		line 18 in file "sysFunc.c"
  1906 ;; Parameters:    Size  Location     Type
  1907 ;;		None
  1908 ;; Auto vars:     Size  Location     Type
  1909 ;;		None
  1910 ;; Return value:  Size  Location     Type
  1911 ;;                  1    wreg      void 
  1912 ;; Registers used:
  1913 ;;		status,2, status,0, pclath, cstack
  1914 ;; Tracked objects:
  1915 ;;		On entry : 0/0
  1916 ;;		On exit  : 0/0
  1917 ;;		Unchanged: 0/0
  1918 ;; Data sizes:     COMMON   BANK0   BANK1
  1919 ;;      Params:         0       0       0
  1920 ;;      Locals:         0       0       0
  1921 ;;      Temps:          0       0       0
  1922 ;;      Totals:         0       0       0
  1923 ;;Total ram usage:        0 bytes
  1924 ;; Hardware stack levels used:    1
  1925 ;; Hardware stack levels required when called:    3
  1926 ;; This function calls:
  1927 ;;		_rs485Rx
  1928 ;; This function is called by:
  1929 ;;		_controllerInit
  1930 ;; This function uses a non-reentrant model
  1931 ;;
  1932                           
  1933                           
  1934                           ;psect for function _gpioInit
  1935  0472                     _gpioInit:	
  1936                           
  1937                           ;sysFunc.c: 20: ANSELH = 0x00;
  1938                           
  1939                           ;incstack = 0
  1940                           ; Regs used in _gpioInit: [status,2+status,0+pclath+cstack]
  1941  0472  1683               	bsf	3,5	;RP0=1, select bank3
  1942  0473  1703               	bsf	3,6	;RP1=1, select bank3
  1943  0474  0189               	clrf	9	;volatile
  1944                           
  1945                           ;sysFunc.c: 21: OPTION_REGbits.nRBPU = 0;
  1946  0475  1683               	bsf	3,5	;RP0=1, select bank1
  1947  0476  1303               	bcf	3,6	;RP1=0, select bank1
  1948  0477  1381               	bcf	1,7	;volatile
  1949                           
  1950                           ;sysFunc.c: 22: TRISCbits.TRISC5 = 0;
  1951  0478  1287               	bcf	7,5	;volatile
  1952                           
  1953                           ;sysFunc.c: 23: rs485Rx();
  1954  0479  248F               	fcall	_rs485Rx
  1955  047A  0008               	return
  1956  047B                     __end_of_gpioInit:	
  1957                           
  1958                           	psect	text6
  1959  020A                     __ptext6:	
  1960 ;; *************** function _USARTInit *****************
  1961 ;; Defined at:
  1962 ;;		line 31 in file "uart.c"
  1963 ;; Parameters:    Size  Location     Type
  1964 ;;  baud_rate       2    0[BANK0 ] unsigned int 
  1965 ;; Auto vars:     Size  Location     Type
  1966 ;;		None
  1967 ;; Return value:  Size  Location     Type
  1968 ;;                  1    wreg      void 
  1969 ;; Registers used:
  1970 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  1971 ;; Tracked objects:
  1972 ;;		On entry : 0/0
  1973 ;;		On exit  : 0/0
  1974 ;;		Unchanged: 0/0
  1975 ;; Data sizes:     COMMON   BANK0   BANK1
  1976 ;;      Params:         0       2       0
  1977 ;;      Locals:         0       0       0
  1978 ;;      Temps:          0       1       0
  1979 ;;      Totals:         0       3       0
  1980 ;;Total ram usage:        3 bytes
  1981 ;; Hardware stack levels used:    1
  1982 ;; Hardware stack levels required when called:    2
  1983 ;; This function calls:
  1984 ;;		Nothing
  1985 ;; This function is called by:
  1986 ;;		_controllerInit
  1987 ;; This function uses a non-reentrant model
  1988 ;;
  1989                           
  1990                           
  1991                           ;psect for function _USARTInit
  1992  020A                     _USARTInit:	
  1993                           
  1994                           ;uart.c: 34: UQFront=UQEnd=-1;
  1995                           
  1996                           ;incstack = 0
  1997                           ; Regs used in _USARTInit: [wreg-fsr0h+status,2+status,0]
  1998  020A  30FF               	movlw	255
  1999  020B  00FA               	movwf	_UQEnd	;volatile
  2000  020C  1283               	bcf	3,5	;RP0=0, select bank0
  2001  020D  1303               	bcf	3,6	;RP1=0, select bank0
  2002  020E  00BF               	movwf	??_USARTInit
  2003  020F  083F               	movf	??_USARTInit,w
  2004  0210  00FB               	movwf	_UQFront	;volatile
  2005                           
  2006                           ;uart.c: 37: BRGH = 1;
  2007  0211  1683               	bsf	3,5	;RP0=1, select bank1
  2008  0212  1303               	bcf	3,6	;RP1=0, select bank1
  2009  0213  1518               	bsf	24,2	;volatile
  2010                           
  2011                           ;uart.c: 38: switch(baud_rate)
  2012  0214  2A20               	goto	l1668
  2013  0215                     l1658:	
  2014                           ;uart.c: 39: {
  2015                           ;uart.c: 40: case 9600:
  2016                           
  2017                           
  2018                           ;uart.c: 41: SPBRG=25;
  2019  0215  3019               	movlw	25
  2020  0216  2A1C               	goto	L3
  2021  0217                     l1660:	
  2022                           ;uart.c: 43: case 19200:
  2023                           
  2024                           ;uart.c: 42: break;
  2025                           
  2026                           
  2027                           ;uart.c: 44: SPBRG=64;
  2028  0217  3040               	movlw	64
  2029  0218  2A1C               	goto	L3
  2030  0219                     l1662:	
  2031                           ;uart.c: 46: case 28800:
  2032                           
  2033                           ;uart.c: 45: break;
  2034                           
  2035                           
  2036                           ;uart.c: 47: SPBRG=42;
  2037  0219  302A               	movlw	42
  2038  021A  2A1C               	goto	L3
  2039  021B                     l1664:	
  2040                           ;uart.c: 49: case 33600:
  2041                           
  2042                           ;uart.c: 48: break;
  2043                           
  2044                           
  2045                           ;uart.c: 50: SPBRG=36;
  2046  021B  3024               	movlw	36
  2047  021C                     L3:	
  2048  021C  1683               	bsf	3,5	;RP0=1, select bank1
  2049  021D  1303               	bcf	3,6	;RP1=0, select bank1
  2050  021E  0099               	movwf	25	;volatile
  2051                           
  2052                           ;uart.c: 52: }
  2053                           
  2054                           ;uart.c: 51: break;
  2055  021F  2A44               	goto	l76
  2056  0220                     l1668:	
  2057                           
  2058                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 4 sub-sw
      +                          itches
  2059                           ; Switch size 1, requested type "space"
  2060                           ; Number of cases is 4, Range of values is 37 to 131
  2061                           ; switch strategies available:
  2062                           ; Name         Instructions Cycles
  2063                           ; simple_byte           13     7 (average)
  2064                           ; direct_byte          104     9 (fixed)
  2065                           ; jumptable            263     9 (fixed)
  2066                           ;	Chosen strategy is simple_byte
  2067  0220  1283               	bcf	3,5	;RP0=0, select bank0
  2068  0221  1303               	bcf	3,6	;RP1=0, select bank0
  2069  0222  083E               	movf	USARTInit@baud_rate+1,w
  2070  0223  3A25               	xorlw	37	; case 37
  2071  0224  1903               	skipnz
  2072  0225  2A30               	goto	l2048
  2073  0226  3A6E               	xorlw	110	; case 75
  2074  0227  1903               	skipnz
  2075  0228  2A35               	goto	l2050
  2076  0229  3A3B               	xorlw	59	; case 112
  2077  022A  1903               	skipnz
  2078  022B  2A3A               	goto	l2052
  2079  022C  3AF3               	xorlw	243	; case 131
  2080  022D  1903               	skipnz
  2081  022E  2A3F               	goto	l2054
  2082  022F  2A44               	goto	l76
  2083  0230                     l2048:	
  2084                           
  2085                           ; Switch size 1, requested type "space"
  2086                           ; Number of cases is 1, Range of values is 128 to 128
  2087                           ; switch strategies available:
  2088                           ; Name         Instructions Cycles
  2089                           ; simple_byte            4     3 (average)
  2090                           ; direct_byte           10     9 (fixed)
  2091                           ; jumptable            263     9 (fixed)
  2092                           ;	Chosen strategy is simple_byte
  2093  0230  083D               	movf	USARTInit@baud_rate,w
  2094  0231  3A80               	xorlw	128	; case 128
  2095  0232  1903               	skipnz
  2096  0233  2A15               	goto	l1658
  2097  0234  2A44               	goto	l76
  2098  0235                     l2050:	
  2099                           
  2100                           ; Switch size 1, requested type "space"
  2101                           ; Number of cases is 1, Range of values is 0 to 0
  2102                           ; switch strategies available:
  2103                           ; Name         Instructions Cycles
  2104                           ; simple_byte            4     3 (average)
  2105                           ; direct_byte            7     6 (fixed)
  2106                           ; jumptable            260     6 (fixed)
  2107                           ;	Chosen strategy is simple_byte
  2108  0235  083D               	movf	USARTInit@baud_rate,w
  2109  0236  3A00               	xorlw	0	; case 0
  2110  0237  1903               	skipnz
  2111  0238  2A17               	goto	l1660
  2112  0239  2A44               	goto	l76
  2113  023A                     l2052:	
  2114                           
  2115                           ; Switch size 1, requested type "space"
  2116                           ; Number of cases is 1, Range of values is 128 to 128
  2117                           ; switch strategies available:
  2118                           ; Name         Instructions Cycles
  2119                           ; simple_byte            4     3 (average)
  2120                           ; direct_byte           10     9 (fixed)
  2121                           ; jumptable            263     9 (fixed)
  2122                           ;	Chosen strategy is simple_byte
  2123  023A  083D               	movf	USARTInit@baud_rate,w
  2124  023B  3A80               	xorlw	128	; case 128
  2125  023C  1903               	skipnz
  2126  023D  2A19               	goto	l1662
  2127  023E  2A44               	goto	l76
  2128  023F                     l2054:	
  2129                           
  2130                           ; Switch size 1, requested type "space"
  2131                           ; Number of cases is 1, Range of values is 64 to 64
  2132                           ; switch strategies available:
  2133                           ; Name         Instructions Cycles
  2134                           ; simple_byte            4     3 (average)
  2135                           ; direct_byte           10     9 (fixed)
  2136                           ; jumptable            263     9 (fixed)
  2137                           ;	Chosen strategy is simple_byte
  2138  023F  083D               	movf	USARTInit@baud_rate,w
  2139  0240  3A40               	xorlw	64	; case 64
  2140  0241  1903               	skipnz
  2141  0242  2A1B               	goto	l1664
  2142  0243  2A44               	goto	l76
  2143  0244                     l76:	
  2144                           
  2145                           ;uart.c: 54: TXSTAbits.TX9=0;
  2146  0244  1683               	bsf	3,5	;RP0=1, select bank1
  2147  0245  1303               	bcf	3,6	;RP1=0, select bank1
  2148  0246  1318               	bcf	24,6	;volatile
  2149                           
  2150                           ;uart.c: 55: TXSTAbits.TXEN=1;
  2151  0247  1698               	bsf	24,5	;volatile
  2152                           
  2153                           ;uart.c: 56: TXSTAbits.SYNC=0;
  2154  0248  1218               	bcf	24,4	;volatile
  2155                           
  2156                           ;uart.c: 57: TXSTAbits.BRGH=1;
  2157  0249  1518               	bsf	24,2	;volatile
  2158                           
  2159                           ;uart.c: 60: RCSTAbits.SPEN=1;
  2160  024A  1283               	bcf	3,5	;RP0=0, select bank0
  2161  024B  1303               	bcf	3,6	;RP1=0, select bank0
  2162  024C  1798               	bsf	24,7	;volatile
  2163                           
  2164                           ;uart.c: 61: RCSTAbits.RX9=0;
  2165  024D  1318               	bcf	24,6	;volatile
  2166                           
  2167                           ;uart.c: 62: RCSTAbits.CREN=1;
  2168  024E  1618               	bsf	24,4	;volatile
  2169                           
  2170                           ;uart.c: 63: RCSTAbits.ADDEN=0;
  2171  024F  1198               	bcf	24,3	;volatile
  2172                           
  2173                           ;uart.c: 66: PIE1bits.RCIE=1;
  2174  0250  1683               	bsf	3,5	;RP0=1, select bank1
  2175  0251  1303               	bcf	3,6	;RP1=0, select bank1
  2176  0252  168C               	bsf	12,5	;volatile
  2177                           
  2178                           ;uart.c: 67: INTCONbits.PEIE=1;
  2179  0253  170B               	bsf	11,6	;volatile
  2180                           
  2181                           ;uart.c: 69: (GIE = 1);
  2182  0254  178B               	bsf	11,7	;volatile
  2183  0255  0008               	return
  2184  0256                     __end_of_USARTInit:	
  2185                           
  2186                           	psect	text7
  2187  03E0                     __ptext7:	
  2188 ;; *************** function _checkCommandRx *****************
  2189 ;; Defined at:
  2190 ;;		line 173 in file "sysFunc.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;  buffer          6   16[BANK0 ] unsigned char [6]
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  1    wreg      void 
  2197 ;; Registers used:
  2198 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2199 ;; Tracked objects:
  2200 ;;		On entry : 0/0
  2201 ;;		On exit  : 0/0
  2202 ;;		Unchanged: 0/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1
  2204 ;;      Params:         0       0       0
  2205 ;;      Locals:         0       6       0
  2206 ;;      Temps:          0       1       0
  2207 ;;      Totals:         0       7       0
  2208 ;;Total ram usage:        7 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    6
  2211 ;; This function calls:
  2212 ;;		_USARTReadBuffer
  2213 ;;		_runProtocol
  2214 ;;		_sortRxFrame
  2215 ;; This function is called by:
  2216 ;;		_main
  2217 ;; This function uses a non-reentrant model
  2218 ;;
  2219                           
  2220                           
  2221                           ;psect for function _checkCommandRx
  2222  03E0                     _checkCommandRx:	
  2223                           
  2224                           ;sysFunc.c: 175: uint8_t buffer[6];
  2225                           ;sysFunc.c: 177: if(rxCount >= (12 / 2))
  2226                           
  2227                           ;incstack = 0
  2228                           ; Regs used in _checkCommandRx: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2229  03E0  3006               	movlw	6
  2230  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2231  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2232  03E3  0234               	subwf	_rxCount,w
  2233  03E4  1C03               	skipc
  2234  03E5  0008               	return
  2235                           
  2236                           ;sysFunc.c: 178: {
  2237                           ;sysFunc.c: 179: USARTReadBuffer(buffer, sizeof(buffer));
  2238  03E6  3006               	movlw	6
  2239  03E7  00BF               	movwf	USARTReadBuffer@len
  2240  03E8  3000               	movlw	0
  2241  03E9  00C0               	movwf	USARTReadBuffer@len+1
  2242  03EA  304D               	movlw	(low (checkCommandRx@buffer| 0))& (0+255)
  2243  03EB  23A5               	fcall	_USARTReadBuffer
  2244                           
  2245                           ;sysFunc.c: 180: rxCount -= (12 / 2);
  2246  03EC  3006               	movlw	6
  2247  03ED  1283               	bcf	3,5	;RP0=0, select bank0
  2248  03EE  1303               	bcf	3,6	;RP1=0, select bank0
  2249  03EF  02B4               	subwf	_rxCount,f
  2250                           
  2251                           ;sysFunc.c: 181: sortRxFrame(buffer, &recvCommand);
  2252  03F0  3035               	movlw	(low (_recvCommand| 0))& (0+255)
  2253  03F1  00CC               	movwf	??_checkCommandRx
  2254  03F2  084C               	movf	??_checkCommandRx,w
  2255  03F3  00BD               	movwf	sortRxFrame@commandStruct
  2256  03F4  304D               	movlw	(low (checkCommandRx@buffer| 0))& (0+255)
  2257  03F5  2256               	fcall	_sortRxFrame
  2258                           
  2259                           ;sysFunc.c: 182: runProtocol(&recvCommand);
  2260  03F6  3035               	movlw	(low (_recvCommand| 0))& (0+255)
  2261  03F7  22DC               	fcall	_runProtocol
  2262  03F8  0008               	return
  2263  03F9                     __end_of_checkCommandRx:	
  2264                           
  2265                           	psect	text8
  2266  0256                     __ptext8:	
  2267 ;; *************** function _sortRxFrame *****************
  2268 ;; Defined at:
  2269 ;;		line 48 in file "sysFunc.c"
  2270 ;; Parameters:    Size  Location     Type
  2271 ;;  rxBuf           1    wreg     PTR unsigned char 
  2272 ;;		 -> checkCommandRx@buffer(6), 
  2273 ;;  commandStruc    1    0[BANK0 ] PTR struct .
  2274 ;;		 -> recvCommand(6), 
  2275 ;; Auto vars:     Size  Location     Type
  2276 ;;  rxBuf           1    3[BANK0 ] PTR unsigned char 
  2277 ;;		 -> checkCommandRx@buffer(6), 
  2278 ;;  command         1    5[BANK0 ] PTR struct .
  2279 ;;		 -> checkCommandRx@buffer(6), 
  2280 ;;  err             1    4[BANK0 ] enum E1653
  2281 ;; Return value:  Size  Location     Type
  2282 ;;                  1    wreg      enum E1653
  2283 ;; Registers used:
  2284 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2285 ;; Tracked objects:
  2286 ;;		On entry : 0/0
  2287 ;;		On exit  : 0/0
  2288 ;;		Unchanged: 0/0
  2289 ;; Data sizes:     COMMON   BANK0   BANK1
  2290 ;;      Params:         0       1       0
  2291 ;;      Locals:         0       3       0
  2292 ;;      Temps:          0       2       0
  2293 ;;      Totals:         0       6       0
  2294 ;;Total ram usage:        6 bytes
  2295 ;; Hardware stack levels used:    1
  2296 ;; Hardware stack levels required when called:    2
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_checkCommandRx
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           
  2305                           ;psect for function _sortRxFrame
  2306  0256                     _sortRxFrame:	
  2307                           
  2308                           ;incstack = 0
  2309                           ; Regs used in _sortRxFrame: [wreg-fsr0h+status,2+status,0]
  2310                           ;sortRxFrame@rxBuf stored from wreg
  2311  0256  1283               	bcf	3,5	;RP0=0, select bank0
  2312  0257  1303               	bcf	3,6	;RP1=0, select bank0
  2313  0258  00C0               	movwf	sortRxFrame@rxBuf
  2314                           
  2315                           ;sysFunc.c: 50: err_t err;
  2316                           ;sysFunc.c: 51: command_t *command;
  2317                           ;sysFunc.c: 52: command = rxBuf;
  2318  0259  0840               	movf	sortRxFrame@rxBuf,w
  2319  025A  00BE               	movwf	??_sortRxFrame
  2320  025B  083E               	movf	??_sortRxFrame,w
  2321  025C  00C2               	movwf	sortRxFrame@command
  2322                           
  2323                           ;sysFunc.c: 53: if(command->startByte == 0xFF)
  2324  025D  0842               	movf	sortRxFrame@command,w
  2325  025E  0084               	movwf	4
  2326  025F  1383               	bcf	3,7	;select IRP bank0
  2327  0260  0A00               	incf	0,w
  2328  0261  1D03               	btfss	3,2
  2329  0262  2A97               	goto	l1722
  2330                           
  2331                           ;sysFunc.c: 54: if(command->panelId == 0x01)
  2332  0263  0A42               	incf	sortRxFrame@command,w
  2333  0264  0084               	movwf	4
  2334  0265  0300               	decf	0,w
  2335  0266  1D03               	btfss	3,2
  2336  0267  2A94               	goto	l243
  2337                           
  2338                           ;sysFunc.c: 55: if(command->endByte == 0xFE)
  2339  0268  0842               	movf	sortRxFrame@command,w
  2340  0269  3E05               	addlw	5
  2341  026A  0084               	movwf	4
  2342  026B  30FE               	movlw	254
  2343  026C  0600               	xorwf	0,w
  2344  026D  1D03               	btfss	3,2
  2345  026E  2A8F               	goto	l1718
  2346                           
  2347                           ;sysFunc.c: 56: {
  2348                           ;sysFunc.c: 57: commandStruct->commandType = command->commandType;
  2349  026F  0842               	movf	sortRxFrame@command,w
  2350  0270  3E02               	addlw	2
  2351  0271  0084               	movwf	4
  2352  0272  0800               	movf	0,w
  2353  0273  397F               	andlw	127
  2354  0274  00BE               	movwf	??_sortRxFrame
  2355  0275  083D               	movf	sortRxFrame@commandStruct,w
  2356  0276  3E02               	addlw	2
  2357  0277  0084               	movwf	4
  2358  0278  0800               	movf	0,w
  2359  0279  063E               	xorwf	??_sortRxFrame,w
  2360  027A  3980               	andlw	-128
  2361  027B  063E               	xorwf	??_sortRxFrame,w
  2362  027C  0080               	movwf	0
  2363                           
  2364                           ;sysFunc.c: 58: commandStruct->param = command->param;
  2365  027D  0842               	movf	sortRxFrame@command,w
  2366  027E  3E03               	addlw	3
  2367  027F  0084               	movwf	4
  2368  0280  0800               	movf	0,w
  2369  0281  00BE               	movwf	??_sortRxFrame
  2370  0282  0A84               	incf	4,f
  2371  0283  0800               	movf	0,w
  2372  0284  00BF               	movwf	??_sortRxFrame+1
  2373  0285  083D               	movf	sortRxFrame@commandStruct,w
  2374  0286  3E03               	addlw	3
  2375  0287  0084               	movwf	4
  2376  0288  083E               	movf	??_sortRxFrame,w
  2377  0289  0080               	movwf	0
  2378  028A  0A84               	incf	4,f
  2379  028B  083F               	movf	??_sortRxFrame+1,w
  2380  028C  0080               	movwf	0
  2381                           
  2382                           ;sysFunc.c: 59: err = ERR_OK;
  2383  028D  01C1               	clrf	sortRxFrame@err
  2384                           
  2385                           ;sysFunc.c: 61: }
  2386                           
  2387                           ;sysFunc.c: 60: return err;
  2388                           ;	Return value of _sortRxFrame is never used
  2389  028E  0008               	return
  2390  028F                     l1718:	
  2391                           
  2392                           ;sysFunc.c: 62: else { err = ERR_END; return err;}
  2393  028F  3004               	movlw	4
  2394  0290  00BE               	movwf	??_sortRxFrame
  2395  0291  083E               	movf	??_sortRxFrame,w
  2396  0292  00C1               	movwf	sortRxFrame@err
  2397                           
  2398                           ;	Return value of _sortRxFrame is never used
  2399  0293  0008               	return
  2400  0294                     l243:	
  2401                           
  2402                           ;sysFunc.c: 63: else { err = ERR_ID; return err;}
  2403  0294  01C1               	clrf	sortRxFrame@err
  2404  0295  0AC1               	incf	sortRxFrame@err,f
  2405                           
  2406                           ;	Return value of _sortRxFrame is never used
  2407  0296  0008               	return
  2408  0297                     l1722:	
  2409                           
  2410                           ;sysFunc.c: 64: else { err = ERR_STRT; return err;}
  2411  0297  3003               	movlw	3
  2412  0298  00BE               	movwf	??_sortRxFrame
  2413  0299  083E               	movf	??_sortRxFrame,w
  2414  029A  00C1               	movwf	sortRxFrame@err
  2415                           
  2416                           ;	Return value of _sortRxFrame is never used
  2417  029B  0008               	return
  2418  029C                     __end_of_sortRxFrame:	
  2419                           
  2420                           	psect	text9
  2421  02DC                     __ptext9:	
  2422 ;; *************** function _runProtocol *****************
  2423 ;; Defined at:
  2424 ;;		line 67 in file "sysFunc.c"
  2425 ;; Parameters:    Size  Location     Type
  2426 ;;  commandRecv     1    wreg     PTR struct .
  2427 ;;		 -> recvCommand(6), 
  2428 ;; Auto vars:     Size  Location     Type
  2429 ;;  commandRecv     1   14[BANK0 ] PTR struct .
  2430 ;;		 -> recvCommand(6), 
  2431 ;;  command         1   13[BANK0 ] unsigned char 
  2432 ;; Return value:  Size  Location     Type
  2433 ;;                  1    wreg      void 
  2434 ;; Registers used:
  2435 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2436 ;; Tracked objects:
  2437 ;;		On entry : 0/0
  2438 ;;		On exit  : 0/0
  2439 ;;		Unchanged: 0/0
  2440 ;; Data sizes:     COMMON   BANK0   BANK1
  2441 ;;      Params:         0       0       0
  2442 ;;      Locals:         0       2       0
  2443 ;;      Temps:          0       1       0
  2444 ;;      Totals:         0       3       0
  2445 ;;Total ram usage:        3 bytes
  2446 ;; Hardware stack levels used:    1
  2447 ;; Hardware stack levels required when called:    5
  2448 ;; This function calls:
  2449 ;;		_ackButton
  2450 ;;		_resetKeypad
  2451 ;;		_sendButtonInfo
  2452 ;; This function is called by:
  2453 ;;		_checkCommandRx
  2454 ;; This function uses a non-reentrant model
  2455 ;;
  2456                           
  2457                           
  2458                           ;psect for function _runProtocol
  2459  02DC                     _runProtocol:	
  2460                           
  2461                           ;incstack = 0
  2462                           ; Regs used in _runProtocol: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2463                           ;runProtocol@commandRecv stored from wreg
  2464  02DC  1283               	bcf	3,5	;RP0=0, select bank0
  2465  02DD  1303               	bcf	3,6	;RP1=0, select bank0
  2466  02DE  00CB               	movwf	runProtocol@commandRecv
  2467                           
  2468                           ;sysFunc.c: 69: uint8_t command = commandRecv->commandType;
  2469  02DF  084B               	movf	runProtocol@commandRecv,w
  2470  02E0  3E02               	addlw	2
  2471  02E1  0084               	movwf	4
  2472  02E2  1383               	bcf	3,7	;select IRP bank0
  2473  02E3  0800               	movf	0,w
  2474  02E4  397F               	andlw	127
  2475  02E5  00C9               	movwf	??_runProtocol
  2476  02E6  0849               	movf	??_runProtocol,w
  2477  02E7  00CA               	movwf	runProtocol@command
  2478                           
  2479                           ;sysFunc.c: 70: switch(command){
  2480  02E8  2B08               	goto	l1742
  2481  02E9                     l1728:	
  2482                           ;sysFunc.c: 71: case SEND_BUTTON:
  2483                           
  2484                           
  2485                           ;sysFunc.c: 72: sendButtonInfo(lastKey);
  2486  02E9  0833               	movf	_lastKey,w
  2487  02EA  2383               	fcall	_sendButtonInfo
  2488                           
  2489                           ;sysFunc.c: 73: commandRecv->commandType = COMMAND_NULL;
  2490  02EB  1283               	bcf	3,5	;RP0=0, select bank0
  2491  02EC  1303               	bcf	3,6	;RP1=0, select bank0
  2492  02ED  084B               	movf	runProtocol@commandRecv,w
  2493  02EE  3E02               	addlw	2
  2494  02EF  0084               	movwf	4
  2495  02F0  3080               	movlw	-128
  2496  02F1  1383               	bcf	3,7	;select IRP bank0
  2497  02F2  0580               	andwf	0,f
  2498                           
  2499                           ;sysFunc.c: 74: break;
  2500  02F3  0008               	return
  2501  02F4                     l1732:	
  2502                           ;sysFunc.c: 76: case ACK_BUTTON:
  2503                           
  2504                           
  2505                           ;sysFunc.c: 77: ackButton();
  2506  02F4  233A               	fcall	_ackButton
  2507                           
  2508                           ;sysFunc.c: 78: commandRecv->commandType = COMMAND_NULL;
  2509  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  2510  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  2511  02F7  084B               	movf	runProtocol@commandRecv,w
  2512  02F8  3E02               	addlw	2
  2513  02F9  0084               	movwf	4
  2514  02FA  3080               	movlw	-128
  2515  02FB  1383               	bcf	3,7	;select IRP bank0
  2516  02FC  0580               	andwf	0,f
  2517                           
  2518                           ;sysFunc.c: 79: break;
  2519  02FD  0008               	return
  2520  02FE                     l1736:	
  2521                           ;sysFunc.c: 81: case RESET_KEYPAD:
  2522                           
  2523                           
  2524                           ;sysFunc.c: 82: resetKeypad();
  2525  02FE  2314               	fcall	_resetKeypad
  2526                           
  2527                           ;sysFunc.c: 83: commandRecv->commandType = COMMAND_NULL;
  2528  02FF  1283               	bcf	3,5	;RP0=0, select bank0
  2529  0300  1303               	bcf	3,6	;RP1=0, select bank0
  2530  0301  084B               	movf	runProtocol@commandRecv,w
  2531  0302  3E02               	addlw	2
  2532  0303  0084               	movwf	4
  2533  0304  3080               	movlw	-128
  2534  0305  1383               	bcf	3,7	;select IRP bank0
  2535  0306  0580               	andwf	0,f
  2536                           
  2537                           ;sysFunc.c: 88: }
  2538                           
  2539                           ;sysFunc.c: 87: break;
  2540                           
  2541                           ;sysFunc.c: 86: default:
  2542                           
  2543                           ;sysFunc.c: 84: break;
  2544  0307  0008               	return
  2545  0308                     l1742:	
  2546  0308  084A               	movf	runProtocol@command,w
  2547                           
  2548                           ; Switch size 1, requested type "space"
  2549                           ; Number of cases is 3, Range of values is 1 to 3
  2550                           ; switch strategies available:
  2551                           ; Name         Instructions Cycles
  2552                           ; simple_byte           10     6 (average)
  2553                           ; direct_byte           12     9 (fixed)
  2554                           ; jumptable            263     9 (fixed)
  2555                           ;	Chosen strategy is simple_byte
  2556  0309  3A01               	xorlw	1	; case 1
  2557  030A  1903               	skipnz
  2558  030B  2AE9               	goto	l1728
  2559  030C  3A03               	xorlw	3	; case 2
  2560  030D  1903               	skipnz
  2561  030E  2AF4               	goto	l1732
  2562  030F  3A01               	xorlw	1	; case 3
  2563  0310  1903               	skipnz
  2564  0311  2AFE               	goto	l1736
  2565  0312  2B13               	goto	l257
  2566  0313                     l257:	
  2567  0313  0008               	return
  2568  0314                     __end_of_runProtocol:	
  2569                           
  2570                           	psect	text10
  2571  0383                     __ptext10:	
  2572 ;; *************** function _sendButtonInfo *****************
  2573 ;; Defined at:
  2574 ;;		line 91 in file "sysFunc.c"
  2575 ;; Parameters:    Size  Location     Type
  2576 ;;  button          1    wreg     unsigned char 
  2577 ;; Auto vars:     Size  Location     Type
  2578 ;;  button          1   11[BANK0 ] unsigned char 
  2579 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2580 ;; Return value:  Size  Location     Type
  2581 ;;                  1    wreg      void 
  2582 ;; Registers used:
  2583 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2584 ;; Tracked objects:
  2585 ;;		On entry : 0/0
  2586 ;;		On exit  : 0/0
  2587 ;;		Unchanged: 0/0
  2588 ;; Data sizes:     COMMON   BANK0   BANK1
  2589 ;;      Params:         0       0       0
  2590 ;;      Locals:         0       7       0
  2591 ;;      Temps:          0       1       0
  2592 ;;      Totals:         0       8       0
  2593 ;;Total ram usage:        8 bytes
  2594 ;; Hardware stack levels used:    1
  2595 ;; Hardware stack levels required when called:    4
  2596 ;; This function calls:
  2597 ;;		_USARTWriteString
  2598 ;;		_rs485Rx
  2599 ;;		_rs485Tx
  2600 ;; This function is called by:
  2601 ;;		_runProtocol
  2602 ;; This function uses a non-reentrant model
  2603 ;;
  2604                           
  2605                           
  2606                           ;psect for function _sendButtonInfo
  2607  0383                     _sendButtonInfo:	
  2608                           
  2609                           ;incstack = 0
  2610                           ; Regs used in _sendButtonInfo: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2611                           ;sendButtonInfo@button stored from wreg
  2612  0383  1283               	bcf	3,5	;RP0=0, select bank0
  2613  0384  1303               	bcf	3,6	;RP1=0, select bank0
  2614  0385  00C8               	movwf	sendButtonInfo@button
  2615                           
  2616                           ;sysFunc.c: 93: uint8_t buffer[6];
  2617                           ;sysFunc.c: 94: buffer[0] = 0xFF;
  2618  0386  30FF               	movlw	255
  2619  0387  00C1               	movwf	??_sendButtonInfo
  2620  0388  0841               	movf	??_sendButtonInfo,w
  2621  0389  00C2               	movwf	sendButtonInfo@buffer
  2622                           
  2623                           ;sysFunc.c: 95: buffer[1] = 0x01;
  2624  038A  01C3               	clrf	sendButtonInfo@buffer+1
  2625  038B  0AC3               	incf	sendButtonInfo@buffer+1,f
  2626                           
  2627                           ;sysFunc.c: 96: buffer[2] = SEND_BUTTON;
  2628  038C  01C4               	clrf	sendButtonInfo@buffer+2
  2629  038D  0AC4               	incf	sendButtonInfo@buffer+2,f
  2630                           
  2631                           ;sysFunc.c: 97: buffer[3] = 0x00;
  2632  038E  01C5               	clrf	sendButtonInfo@buffer+3
  2633                           
  2634                           ;sysFunc.c: 98: buffer[4] = button;
  2635  038F  0848               	movf	sendButtonInfo@button,w
  2636  0390  00C1               	movwf	??_sendButtonInfo
  2637  0391  0841               	movf	??_sendButtonInfo,w
  2638  0392  00C6               	movwf	sendButtonInfo@buffer+4
  2639                           
  2640                           ;sysFunc.c: 99: buffer[5] = 0xFE;
  2641  0393  30FE               	movlw	254
  2642  0394  00C1               	movwf	??_sendButtonInfo
  2643  0395  0841               	movf	??_sendButtonInfo,w
  2644  0396  00C7               	movwf	sendButtonInfo@buffer+5
  2645                           
  2646                           ;sysFunc.c: 101: rs485Tx();
  2647  0397  248B               	fcall	_rs485Tx
  2648                           
  2649                           ;sysFunc.c: 102: USARTWriteString(buffer, sizeof(buffer));
  2650  0398  3042               	movlw	(low (sendButtonInfo@buffer| 0))& (0+255)
  2651  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2652  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2653  039B  00BE               	movwf	USARTWriteString@str
  2654  039C  3000               	movlw	0
  2655  039D  00BF               	movwf	USARTWriteString@str+1
  2656  039E  3006               	movlw	6
  2657  039F  00C1               	movwf	??_sendButtonInfo
  2658  03A0  0841               	movf	??_sendButtonInfo,w
  2659  03A1  00C0               	movwf	USARTWriteString@len
  2660  03A2  23F9               	fcall	_USARTWriteString
  2661                           
  2662                           ;sysFunc.c: 103: rs485Rx();
  2663  03A3  248F               	fcall	_rs485Rx
  2664  03A4  0008               	return
  2665  03A5                     __end_of_sendButtonInfo:	
  2666                           
  2667                           	psect	text11
  2668  0314                     __ptext11:	
  2669 ;; *************** function _resetKeypad *****************
  2670 ;; Defined at:
  2671 ;;		line 127 in file "sysFunc.c"
  2672 ;; Parameters:    Size  Location     Type
  2673 ;;		None
  2674 ;; Auto vars:     Size  Location     Type
  2675 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2676 ;; Return value:  Size  Location     Type
  2677 ;;                  1    wreg      void 
  2678 ;; Registers used:
  2679 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2680 ;; Tracked objects:
  2681 ;;		On entry : 0/0
  2682 ;;		On exit  : 0/0
  2683 ;;		Unchanged: 0/0
  2684 ;; Data sizes:     COMMON   BANK0   BANK1
  2685 ;;      Params:         0       0       0
  2686 ;;      Locals:         0       6       0
  2687 ;;      Temps:          0       1       0
  2688 ;;      Totals:         0       7       0
  2689 ;;Total ram usage:        7 bytes
  2690 ;; Hardware stack levels used:    1
  2691 ;; Hardware stack levels required when called:    4
  2692 ;; This function calls:
  2693 ;;		_USARTWriteString
  2694 ;;		_rs485Rx
  2695 ;;		_rs485Tx
  2696 ;; This function is called by:
  2697 ;;		_runProtocol
  2698 ;; This function uses a non-reentrant model
  2699 ;;
  2700                           
  2701                           
  2702                           ;psect for function _resetKeypad
  2703  0314                     _resetKeypad:	
  2704                           
  2705                           ;sysFunc.c: 129: uint8_t buffer[6];
  2706                           ;sysFunc.c: 131: buffer[0] = 0xFF;
  2707                           
  2708                           ;incstack = 0
  2709                           ; Regs used in _resetKeypad: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2710  0314  30FF               	movlw	255
  2711  0315  1283               	bcf	3,5	;RP0=0, select bank0
  2712  0316  1303               	bcf	3,6	;RP1=0, select bank0
  2713  0317  00C1               	movwf	??_resetKeypad
  2714  0318  0841               	movf	??_resetKeypad,w
  2715  0319  00C2               	movwf	resetKeypad@buffer
  2716                           
  2717                           ;sysFunc.c: 132: buffer[1] = 0x01;
  2718  031A  01C3               	clrf	resetKeypad@buffer+1
  2719  031B  0AC3               	incf	resetKeypad@buffer+1,f
  2720                           
  2721                           ;sysFunc.c: 133: buffer[2] = RESET_KEYPAD;
  2722  031C  3003               	movlw	3
  2723  031D  00C1               	movwf	??_resetKeypad
  2724  031E  0841               	movf	??_resetKeypad,w
  2725  031F  00C4               	movwf	resetKeypad@buffer+2
  2726                           
  2727                           ;sysFunc.c: 134: buffer[3] = 0x00;
  2728  0320  01C5               	clrf	resetKeypad@buffer+3
  2729                           
  2730                           ;sysFunc.c: 135: buffer[4] = 0x00;
  2731  0321  01C6               	clrf	resetKeypad@buffer+4
  2732                           
  2733                           ;sysFunc.c: 136: buffer[5] = 0xFE;
  2734  0322  30FE               	movlw	254
  2735  0323  00C1               	movwf	??_resetKeypad
  2736  0324  0841               	movf	??_resetKeypad,w
  2737  0325  00C7               	movwf	resetKeypad@buffer+5
  2738                           
  2739                           ;sysFunc.c: 138: rs485Tx();
  2740  0326  248B               	fcall	_rs485Tx
  2741                           
  2742                           ;sysFunc.c: 139: USARTWriteString(buffer, 6);
  2743  0327  3042               	movlw	(low (resetKeypad@buffer| 0))& (0+255)
  2744  0328  1283               	bcf	3,5	;RP0=0, select bank0
  2745  0329  1303               	bcf	3,6	;RP1=0, select bank0
  2746  032A  00BE               	movwf	USARTWriteString@str
  2747  032B  3000               	movlw	0
  2748  032C  00BF               	movwf	USARTWriteString@str+1
  2749  032D  3006               	movlw	6
  2750  032E  00C1               	movwf	??_resetKeypad
  2751  032F  0841               	movf	??_resetKeypad,w
  2752  0330  00C0               	movwf	USARTWriteString@len
  2753  0331  23F9               	fcall	_USARTWriteString
  2754                           
  2755                           ;sysFunc.c: 140: rs485Rx();
  2756  0332  248F               	fcall	_rs485Rx
  2757                           
  2758                           ;sysFunc.c: 142: keypadState.keyLock = 0;
  2759  0333  1283               	bcf	3,5	;RP0=0, select bank0
  2760  0334  1303               	bcf	3,6	;RP1=0, select bank0
  2761  0335  113B               	bcf	_keypadState,2
  2762                           
  2763                           ;sysFunc.c: 143: keypadState.keyPressIndicator = 0;
  2764  0336  103B               	bcf	_keypadState,0
  2765                           
  2766                           ;sysFunc.c: 144: keypadState.keyPressed = BUTTON_0;
  2767  0337  01BC               	clrf	_keypadState+1
  2768                           
  2769                           ;sysFunc.c: 145: lastKey = BUTTON_0;
  2770  0338  01B3               	clrf	_lastKey
  2771  0339  0008               	return
  2772  033A                     __end_of_resetKeypad:	
  2773                           
  2774                           	psect	text12
  2775  033A                     __ptext12:	
  2776 ;; *************** function _ackButton *****************
  2777 ;; Defined at:
  2778 ;;		line 106 in file "sysFunc.c"
  2779 ;; Parameters:    Size  Location     Type
  2780 ;;		None
  2781 ;; Auto vars:     Size  Location     Type
  2782 ;;  buffer          6    5[BANK0 ] unsigned char [6]
  2783 ;; Return value:  Size  Location     Type
  2784 ;;                  1    wreg      void 
  2785 ;; Registers used:
  2786 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2787 ;; Tracked objects:
  2788 ;;		On entry : 0/0
  2789 ;;		On exit  : 0/0
  2790 ;;		Unchanged: 0/0
  2791 ;; Data sizes:     COMMON   BANK0   BANK1
  2792 ;;      Params:         0       0       0
  2793 ;;      Locals:         0       6       0
  2794 ;;      Temps:          0       1       0
  2795 ;;      Totals:         0       7       0
  2796 ;;Total ram usage:        7 bytes
  2797 ;; Hardware stack levels used:    1
  2798 ;; Hardware stack levels required when called:    4
  2799 ;; This function calls:
  2800 ;;		_USARTWriteString
  2801 ;;		_rs485Rx
  2802 ;;		_rs485Tx
  2803 ;; This function is called by:
  2804 ;;		_runProtocol
  2805 ;; This function uses a non-reentrant model
  2806 ;;
  2807                           
  2808                           
  2809                           ;psect for function _ackButton
  2810  033A                     _ackButton:	
  2811                           
  2812                           ;sysFunc.c: 108: uint8_t buffer[6];
  2813                           ;sysFunc.c: 110: buffer[0] = 0xFF;
  2814                           
  2815                           ;incstack = 0
  2816                           ; Regs used in _ackButton: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2817  033A  30FF               	movlw	255
  2818  033B  1283               	bcf	3,5	;RP0=0, select bank0
  2819  033C  1303               	bcf	3,6	;RP1=0, select bank0
  2820  033D  00C1               	movwf	??_ackButton
  2821  033E  0841               	movf	??_ackButton,w
  2822  033F  00C2               	movwf	ackButton@buffer
  2823                           
  2824                           ;sysFunc.c: 111: buffer[1] = 0x01;
  2825  0340  01C3               	clrf	ackButton@buffer+1
  2826  0341  0AC3               	incf	ackButton@buffer+1,f
  2827                           
  2828                           ;sysFunc.c: 112: buffer[2] = ACK_BUTTON;
  2829  0342  3002               	movlw	2
  2830  0343  00C1               	movwf	??_ackButton
  2831  0344  0841               	movf	??_ackButton,w
  2832  0345  00C4               	movwf	ackButton@buffer+2
  2833                           
  2834                           ;sysFunc.c: 113: buffer[3] = 0x00;
  2835  0346  01C5               	clrf	ackButton@buffer+3
  2836                           
  2837                           ;sysFunc.c: 114: buffer[4] = 0x00;
  2838  0347  01C6               	clrf	ackButton@buffer+4
  2839                           
  2840                           ;sysFunc.c: 115: buffer[5] = 0xFE;
  2841  0348  30FE               	movlw	254
  2842  0349  00C1               	movwf	??_ackButton
  2843  034A  0841               	movf	??_ackButton,w
  2844  034B  00C7               	movwf	ackButton@buffer+5
  2845                           
  2846                           ;sysFunc.c: 117: rs485Tx();
  2847  034C  248B               	fcall	_rs485Tx
  2848                           
  2849                           ;sysFunc.c: 118: USARTWriteString(buffer, 6);
  2850  034D  3042               	movlw	(low (ackButton@buffer| 0))& (0+255)
  2851  034E  1283               	bcf	3,5	;RP0=0, select bank0
  2852  034F  1303               	bcf	3,6	;RP1=0, select bank0
  2853  0350  00BE               	movwf	USARTWriteString@str
  2854  0351  3000               	movlw	0
  2855  0352  00BF               	movwf	USARTWriteString@str+1
  2856  0353  3006               	movlw	6
  2857  0354  00C1               	movwf	??_ackButton
  2858  0355  0841               	movf	??_ackButton,w
  2859  0356  00C0               	movwf	USARTWriteString@len
  2860  0357  23F9               	fcall	_USARTWriteString
  2861                           
  2862                           ;sysFunc.c: 119: rs485Rx();
  2863  0358  248F               	fcall	_rs485Rx
  2864                           
  2865                           ;sysFunc.c: 121: keypadState.keyLock = 0;
  2866  0359  1283               	bcf	3,5	;RP0=0, select bank0
  2867  035A  1303               	bcf	3,6	;RP1=0, select bank0
  2868  035B  113B               	bcf	_keypadState,2
  2869                           
  2870                           ;sysFunc.c: 122: keypadState.keyPressIndicator = 0;
  2871  035C  103B               	bcf	_keypadState,0
  2872                           
  2873                           ;sysFunc.c: 123: lastKey = BUTTON_0;
  2874  035D  01B3               	clrf	_lastKey
  2875                           
  2876                           ;sysFunc.c: 124: keypadState.keyPressed = BUTTON_0;
  2877  035E  01BC               	clrf	_keypadState+1
  2878  035F  0008               	return
  2879  0360                     __end_of_ackButton:	
  2880                           
  2881                           	psect	text13
  2882  048B                     __ptext13:	
  2883 ;; *************** function _rs485Tx *****************
  2884 ;; Defined at:
  2885 ;;		line 31 in file "sysFunc.c"
  2886 ;; Parameters:    Size  Location     Type
  2887 ;;		None
  2888 ;; Auto vars:     Size  Location     Type
  2889 ;;		None
  2890 ;; Return value:  Size  Location     Type
  2891 ;;                  1    wreg      void 
  2892 ;; Registers used:
  2893 ;;		None
  2894 ;; Tracked objects:
  2895 ;;		On entry : 0/0
  2896 ;;		On exit  : 0/0
  2897 ;;		Unchanged: 0/0
  2898 ;; Data sizes:     COMMON   BANK0   BANK1
  2899 ;;      Params:         0       0       0
  2900 ;;      Locals:         0       0       0
  2901 ;;      Temps:          0       0       0
  2902 ;;      Totals:         0       0       0
  2903 ;;Total ram usage:        0 bytes
  2904 ;; Hardware stack levels used:    1
  2905 ;; Hardware stack levels required when called:    2
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_main
  2910 ;;		_sendButtonInfo
  2911 ;;		_ackButton
  2912 ;;		_resetKeypad
  2913 ;; This function uses a non-reentrant model
  2914 ;;
  2915                           
  2916                           
  2917                           ;psect for function _rs485Tx
  2918  048B                     _rs485Tx:	
  2919                           
  2920                           ;sysFunc.c: 33: PORTCbits.RC5 = 1;
  2921                           
  2922                           ;incstack = 0
  2923                           ; Regs used in _rs485Tx: []
  2924  048B  1283               	bcf	3,5	;RP0=0, select bank0
  2925  048C  1303               	bcf	3,6	;RP1=0, select bank0
  2926  048D  1687               	bsf	7,5	;volatile
  2927  048E  0008               	return
  2928  048F                     __end_of_rs485Tx:	
  2929                           
  2930                           	psect	text14
  2931  048F                     __ptext14:	
  2932 ;; *************** function _rs485Rx *****************
  2933 ;; Defined at:
  2934 ;;		line 36 in file "sysFunc.c"
  2935 ;; Parameters:    Size  Location     Type
  2936 ;;		None
  2937 ;; Auto vars:     Size  Location     Type
  2938 ;;		None
  2939 ;; Return value:  Size  Location     Type
  2940 ;;                  1    wreg      void 
  2941 ;; Registers used:
  2942 ;;		None
  2943 ;; Tracked objects:
  2944 ;;		On entry : 0/0
  2945 ;;		On exit  : 0/0
  2946 ;;		Unchanged: 0/0
  2947 ;; Data sizes:     COMMON   BANK0   BANK1
  2948 ;;      Params:         0       0       0
  2949 ;;      Locals:         0       0       0
  2950 ;;      Temps:          0       0       0
  2951 ;;      Totals:         0       0       0
  2952 ;;Total ram usage:        0 bytes
  2953 ;; Hardware stack levels used:    1
  2954 ;; Hardware stack levels required when called:    2
  2955 ;; This function calls:
  2956 ;;		Nothing
  2957 ;; This function is called by:
  2958 ;;		_main
  2959 ;;		_gpioInit
  2960 ;;		_sendButtonInfo
  2961 ;;		_ackButton
  2962 ;;		_resetKeypad
  2963 ;; This function uses a non-reentrant model
  2964 ;;
  2965                           
  2966                           
  2967                           ;psect for function _rs485Rx
  2968  048F                     _rs485Rx:	
  2969                           
  2970                           ;sysFunc.c: 38: PORTCbits.RC5 = 0;
  2971                           
  2972                           ;incstack = 0
  2973                           ; Regs used in _rs485Rx: []
  2974  048F  1283               	bcf	3,5	;RP0=0, select bank0
  2975  0490  1303               	bcf	3,6	;RP1=0, select bank0
  2976  0491  1287               	bcf	7,5	;volatile
  2977  0492  0008               	return
  2978  0493                     __end_of_rs485Rx:	
  2979                           
  2980                           	psect	text15
  2981  03A5                     __ptext15:	
  2982 ;; *************** function _USARTReadBuffer *****************
  2983 ;; Defined at:
  2984 ;;		line 206 in file "uart.c"
  2985 ;; Parameters:    Size  Location     Type
  2986 ;;  buff            1    wreg     PTR unsigned char 
  2987 ;;		 -> checkCommandRx@buffer(6), 
  2988 ;;  len             2    2[BANK0 ] unsigned int 
  2989 ;; Auto vars:     Size  Location     Type
  2990 ;;  buff            1    6[BANK0 ] PTR unsigned char 
  2991 ;;		 -> checkCommandRx@buffer(6), 
  2992 ;;  i               2    7[BANK0 ] unsigned int 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMMON   BANK0   BANK1
  3002 ;;      Params:         0       2       0
  3003 ;;      Locals:         0       3       0
  3004 ;;      Temps:          0       2       0
  3005 ;;      Totals:         0       7       0
  3006 ;;Total ram usage:        7 bytes
  3007 ;; Hardware stack levels used:    1
  3008 ;; Hardware stack levels required when called:    3
  3009 ;; This function calls:
  3010 ;;		_USARTReadData
  3011 ;; This function is called by:
  3012 ;;		_checkCommandRx
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016                           
  3017                           ;psect for function _USARTReadBuffer
  3018  03A5                     _USARTReadBuffer:	
  3019                           
  3020                           ;incstack = 0
  3021                           ; Regs used in _USARTReadBuffer: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3022                           ;USARTReadBuffer@buff stored from wreg
  3023  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  3024  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  3025  03A7  00C3               	movwf	USARTReadBuffer@buff
  3026                           
  3027                           ;uart.c: 208: uint16_t i;
  3028                           ;uart.c: 209: for(i=0;i<len;i++)
  3029  03A8  01C4               	clrf	USARTReadBuffer@i
  3030  03A9  01C5               	clrf	USARTReadBuffer@i+1
  3031  03AA                     l1692:	
  3032  03AA  0840               	movf	USARTReadBuffer@len+1,w
  3033  03AB  0245               	subwf	USARTReadBuffer@i+1,w
  3034  03AC  1D03               	skipz
  3035  03AD  2BB0               	goto	u715
  3036  03AE  083F               	movf	USARTReadBuffer@len,w
  3037  03AF  0244               	subwf	USARTReadBuffer@i,w
  3038  03B0                     u715:	
  3039  03B0  1803               	btfsc	3,0
  3040  03B1  0008               	return
  3041                           
  3042                           ;uart.c: 210: {
  3043                           ;uart.c: 211: buff[i]=USARTReadData();
  3044  03B2  2360               	fcall	_USARTReadData
  3045  03B3  1283               	bcf	3,5	;RP0=0, select bank0
  3046  03B4  1303               	bcf	3,6	;RP1=0, select bank0
  3047  03B5  00C1               	movwf	??_USARTReadBuffer
  3048  03B6  0844               	movf	USARTReadBuffer@i,w
  3049  03B7  0743               	addwf	USARTReadBuffer@buff,w
  3050  03B8  00C2               	movwf	??_USARTReadBuffer+1
  3051  03B9  0842               	movf	??_USARTReadBuffer+1,w
  3052  03BA  0084               	movwf	4
  3053  03BB  0841               	movf	??_USARTReadBuffer,w
  3054  03BC  1383               	bcf	3,7	;select IRP bank0
  3055  03BD  0080               	movwf	0
  3056  03BE  3001               	movlw	1
  3057  03BF  07C4               	addwf	USARTReadBuffer@i,f
  3058  03C0  1803               	skipnc
  3059  03C1  0AC5               	incf	USARTReadBuffer@i+1,f
  3060  03C2  3000               	movlw	0
  3061  03C3  07C5               	addwf	USARTReadBuffer@i+1,f
  3062  03C4  2BAA               	goto	l1692
  3063  03C5                     __end_of_USARTReadBuffer:	
  3064                           
  3065                           	psect	text16
  3066  0360                     __ptext16:	
  3067 ;; *************** function _USARTReadData *****************
  3068 ;; Defined at:
  3069 ;;		line 122 in file "uart.c"
  3070 ;; Parameters:    Size  Location     Type
  3071 ;;		None
  3072 ;; Auto vars:     Size  Location     Type
  3073 ;;  data            1    1[BANK0 ] unsigned char 
  3074 ;; Return value:  Size  Location     Type
  3075 ;;                  1    wreg      unsigned char 
  3076 ;; Registers used:
  3077 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3078 ;; Tracked objects:
  3079 ;;		On entry : 0/0
  3080 ;;		On exit  : 0/0
  3081 ;;		Unchanged: 0/0
  3082 ;; Data sizes:     COMMON   BANK0   BANK1
  3083 ;;      Params:         0       0       0
  3084 ;;      Locals:         0       1       0
  3085 ;;      Temps:          0       1       0
  3086 ;;      Totals:         0       2       0
  3087 ;;Total ram usage:        2 bytes
  3088 ;; Hardware stack levels used:    1
  3089 ;; Hardware stack levels required when called:    2
  3090 ;; This function calls:
  3091 ;;		Nothing
  3092 ;; This function is called by:
  3093 ;;		_USARTReadBuffer
  3094 ;;		_USARTFlushBuffer
  3095 ;; This function uses a non-reentrant model
  3096 ;;
  3097                           
  3098                           
  3099                           ;psect for function _USARTReadData
  3100  0360                     _USARTReadData:	
  3101                           
  3102                           ;uart.c: 124: char data;
  3103                           ;uart.c: 127: if(UQFront==-1)
  3104                           
  3105                           ;incstack = 0
  3106                           ; Regs used in _USARTReadData: [wreg-fsr0h+status,2+status,0]
  3107  0360  0A7B               	incf	_UQFront,w	;volatile
  3108  0361  1D03               	btfss	3,2
  3109  0362  2B65               	goto	l1398
  3110                           
  3111                           ;uart.c: 128: return 0;
  3112  0363  3000               	movlw	0
  3113  0364  0008               	return
  3114  0365                     l1398:	
  3115                           
  3116                           ;uart.c: 130: data=URBuff[UQFront];
  3117  0365  087B               	movf	_UQFront,w
  3118  0366  3E20               	addlw	(low (_URBuff| 0))& (0+255)
  3119  0367  0084               	movwf	4
  3120  0368  1383               	bcf	3,7	;select IRP bank0
  3121  0369  0800               	movf	0,w
  3122  036A  1283               	bcf	3,5	;RP0=0, select bank0
  3123  036B  1303               	bcf	3,6	;RP1=0, select bank0
  3124  036C  00BD               	movwf	??_USARTReadData
  3125  036D  083D               	movf	??_USARTReadData,w
  3126  036E  00BE               	movwf	USARTReadData@data
  3127                           
  3128                           ;uart.c: 132: if(UQFront==UQEnd)
  3129  036F  087B               	movf	_UQFront,w	;volatile
  3130  0370  067A               	xorwf	_UQEnd,w	;volatile
  3131  0371  1D03               	skipz
  3132  0372  2B79               	goto	l1404
  3133                           
  3134                           ;uart.c: 133: {
  3135                           ;uart.c: 136: UQFront=UQEnd=-1;
  3136  0373  30FF               	movlw	255
  3137  0374  00FA               	movwf	_UQEnd	;volatile
  3138  0375  00BD               	movwf	??_USARTReadData
  3139  0376  083D               	movf	??_USARTReadData,w
  3140  0377  00FB               	movwf	_UQFront	;volatile
  3141                           
  3142                           ;uart.c: 137: }
  3143  0378  2B81               	goto	l1408
  3144  0379                     l1404:	
  3145                           
  3146                           ;uart.c: 138: else
  3147                           ;uart.c: 139: {
  3148                           ;uart.c: 140: UQFront++;
  3149  0379  3001               	movlw	1
  3150  037A  00BD               	movwf	??_USARTReadData
  3151  037B  083D               	movf	??_USARTReadData,w
  3152  037C  07FB               	addwf	_UQFront,f	;volatile
  3153                           
  3154                           ;uart.c: 142: if(UQFront==12)
  3155  037D  300C               	movlw	12
  3156  037E  067B               	xorwf	_UQFront,w	;volatile
  3157  037F  1903               	btfsc	3,2
  3158                           
  3159                           ;uart.c: 143: UQFront=0;
  3160  0380  01FB               	clrf	_UQFront	;volatile
  3161  0381                     l1408:	
  3162                           
  3163                           ;uart.c: 144: }
  3164                           ;uart.c: 146: return data;
  3165  0381  083E               	movf	USARTReadData@data,w
  3166  0382  0008               	return
  3167  0383                     __end_of_USARTReadData:	
  3168                           
  3169                           	psect	text17
  3170  040F                     __ptext17:	
  3171 ;; *************** function _USARTWriteLine *****************
  3172 ;; Defined at:
  3173 ;;		line 89 in file "uart.c"
  3174 ;; Parameters:    Size  Location     Type
  3175 ;;  str             1    wreg     PTR unsigned char 
  3176 ;;		 -> STR_1(11), 
  3177 ;;  len             1    4[BANK0 ] unsigned char 
  3178 ;; Auto vars:     Size  Location     Type
  3179 ;;  str             1    6[BANK0 ] PTR unsigned char 
  3180 ;;		 -> STR_1(11), 
  3181 ;; Return value:  Size  Location     Type
  3182 ;;                  1    wreg      void 
  3183 ;; Registers used:
  3184 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3185 ;; Tracked objects:
  3186 ;;		On entry : 0/0
  3187 ;;		On exit  : 0/0
  3188 ;;		Unchanged: 0/0
  3189 ;; Data sizes:     COMMON   BANK0   BANK1
  3190 ;;      Params:         0       1       0
  3191 ;;      Locals:         0       1       0
  3192 ;;      Temps:          0       1       0
  3193 ;;      Totals:         0       3       0
  3194 ;;Total ram usage:        3 bytes
  3195 ;; Hardware stack levels used:    1
  3196 ;; Hardware stack levels required when called:    4
  3197 ;; This function calls:
  3198 ;;		_USARTWriteChar
  3199 ;;		_USARTWriteString
  3200 ;; This function is called by:
  3201 ;;		_main
  3202 ;; This function uses a non-reentrant model
  3203 ;;
  3204                           
  3205                           
  3206                           ;psect for function _USARTWriteLine
  3207  040F                     _USARTWriteLine:	
  3208                           
  3209                           ;incstack = 0
  3210                           ; Regs used in _USARTWriteLine: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3211                           ;USARTWriteLine@str stored from wreg
  3212  040F  1283               	bcf	3,5	;RP0=0, select bank0
  3213  0410  1303               	bcf	3,6	;RP1=0, select bank0
  3214  0411  00C3               	movwf	USARTWriteLine@str
  3215                           
  3216                           ;uart.c: 91: USARTWriteChar('\r');
  3217  0412  300D               	movlw	13
  3218  0413  2483               	fcall	_USARTWriteChar
  3219                           
  3220                           ;uart.c: 92: USARTWriteChar('\n');
  3221  0414  300A               	movlw	10
  3222  0415  2483               	fcall	_USARTWriteChar
  3223                           
  3224                           ;uart.c: 94: USARTWriteString(str, len);
  3225  0416  1283               	bcf	3,5	;RP0=0, select bank0
  3226  0417  1303               	bcf	3,6	;RP1=0, select bank0
  3227  0418  0843               	movf	USARTWriteLine@str,w
  3228  0419  00BE               	movwf	USARTWriteString@str
  3229  041A  3000               	movlw	0
  3230  041B  1D03               	btfss	3,2
  3231  041C  3080               	movlw	128
  3232  041D  00BF               	movwf	USARTWriteString@str+1
  3233  041E  0841               	movf	USARTWriteLine@len,w
  3234  041F  00C2               	movwf	??_USARTWriteLine
  3235  0420  0842               	movf	??_USARTWriteLine,w
  3236  0421  00C0               	movwf	USARTWriteString@len
  3237  0422  23F9               	fcall	_USARTWriteString
  3238  0423  0008               	return
  3239  0424                     __end_of_USARTWriteLine:	
  3240                           
  3241                           	psect	text18
  3242  03F9                     __ptext18:	
  3243 ;; *************** function _USARTWriteString *****************
  3244 ;; Defined at:
  3245 ;;		line 79 in file "uart.c"
  3246 ;; Parameters:    Size  Location     Type
  3247 ;;  str             2    1[BANK0 ] PTR unsigned char 
  3248 ;;		 -> resetKeypad@buffer(6), ackButton@buffer(6), sendButtonInfo@buffer(6), STR_1(11), 
  3249 ;;  len             1    3[BANK0 ] unsigned char 
  3250 ;; Auto vars:     Size  Location     Type
  3251 ;;		None
  3252 ;; Return value:  Size  Location     Type
  3253 ;;                  1    wreg      void 
  3254 ;; Registers used:
  3255 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3256 ;; Tracked objects:
  3257 ;;		On entry : 0/0
  3258 ;;		On exit  : 0/0
  3259 ;;		Unchanged: 0/0
  3260 ;; Data sizes:     COMMON   BANK0   BANK1
  3261 ;;      Params:         0       3       0
  3262 ;;      Locals:         0       0       0
  3263 ;;      Temps:          0       0       0
  3264 ;;      Totals:         0       3       0
  3265 ;;Total ram usage:        3 bytes
  3266 ;; Hardware stack levels used:    1
  3267 ;; Hardware stack levels required when called:    3
  3268 ;; This function calls:
  3269 ;;		_USARTWriteChar
  3270 ;; This function is called by:
  3271 ;;		_USARTWriteLine
  3272 ;;		_sendButtonInfo
  3273 ;;		_ackButton
  3274 ;;		_resetKeypad
  3275 ;; This function uses a non-reentrant model
  3276 ;;
  3277                           
  3278                           
  3279                           ;psect for function _USARTWriteString
  3280  03F9                     _USARTWriteString:	
  3281  03F9                     l1386:	
  3282                           ;uart.c: 81: while(len)
  3283                           
  3284                           ;incstack = 0
  3285                           ; Regs used in _USARTWriteString: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3286                           
  3287  03F9  1283               	bcf	3,5	;RP0=0, select bank0
  3288  03FA  1303               	bcf	3,6	;RP1=0, select bank0
  3289  03FB  0840               	movf	USARTWriteString@len,w
  3290  03FC  1903               	btfsc	3,2
  3291  03FD  0008               	return
  3292                           
  3293                           ;uart.c: 82: {
  3294                           ;uart.c: 83: USARTWriteChar(*str);
  3295  03FE  1283               	bcf	3,5	;RP0=0, select bank0
  3296  03FF  1303               	bcf	3,6	;RP1=0, select bank0
  3297  0400  083F               	movf	USARTWriteString@str+1,w
  3298  0401  00FF               	movwf	127
  3299  0402  083E               	movf	USARTWriteString@str,w
  3300  0403  0084               	movwf	4
  3301  0404  23C5               	fcall	stringtab
  3302  0405  2483               	fcall	_USARTWriteChar
  3303                           
  3304                           ;uart.c: 84: str++;
  3305  0406  3001               	movlw	1
  3306  0407  1283               	bcf	3,5	;RP0=0, select bank0
  3307  0408  1303               	bcf	3,6	;RP1=0, select bank0
  3308  0409  07BE               	addwf	USARTWriteString@str,f
  3309  040A  1803               	skipnc
  3310  040B  0ABF               	incf	USARTWriteString@str+1,f
  3311                           
  3312                           ;uart.c: 85: --len;
  3313  040C  3001               	movlw	1
  3314  040D  02C0               	subwf	USARTWriteString@len,f
  3315  040E  2BF9               	goto	l1386
  3316  040F                     __end_of_USARTWriteString:	
  3317                           
  3318                           	psect	text19
  3319  0483                     __ptext19:	
  3320 ;; *************** function _USARTWriteChar *****************
  3321 ;; Defined at:
  3322 ;;		line 72 in file "uart.c"
  3323 ;; Parameters:    Size  Location     Type
  3324 ;;  ch              1    wreg     unsigned char 
  3325 ;; Auto vars:     Size  Location     Type
  3326 ;;  ch              1    0[BANK0 ] unsigned char 
  3327 ;; Return value:  Size  Location     Type
  3328 ;;                  1    wreg      void 
  3329 ;; Registers used:
  3330 ;;		wreg
  3331 ;; Tracked objects:
  3332 ;;		On entry : 0/0
  3333 ;;		On exit  : 0/0
  3334 ;;		Unchanged: 0/0
  3335 ;; Data sizes:     COMMON   BANK0   BANK1
  3336 ;;      Params:         0       0       0
  3337 ;;      Locals:         0       1       0
  3338 ;;      Temps:          0       0       0
  3339 ;;      Totals:         0       1       0
  3340 ;;Total ram usage:        1 bytes
  3341 ;; Hardware stack levels used:    1
  3342 ;; Hardware stack levels required when called:    2
  3343 ;; This function calls:
  3344 ;;		Nothing
  3345 ;; This function is called by:
  3346 ;;		_USARTWriteString
  3347 ;;		_USARTWriteLine
  3348 ;;		_USARTWriteInt
  3349 ;;		_USARTGotoNewLine
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _USARTWriteChar
  3355  0483                     _USARTWriteChar:	
  3356                           
  3357                           ;incstack = 0
  3358                           ; Regs used in _USARTWriteChar: [wreg]
  3359                           ;USARTWriteChar@ch stored from wreg
  3360  0483  1283               	bcf	3,5	;RP0=0, select bank0
  3361  0484  1303               	bcf	3,6	;RP1=0, select bank0
  3362  0485  00BD               	movwf	USARTWriteChar@ch
  3363  0486                     l83:	
  3364                           ;uart.c: 74: while(!PIR1bits.TXIF);
  3365                           
  3366  0486  1E0C               	btfss	12,4	;volatile
  3367  0487  2C86               	goto	l83
  3368                           
  3369                           ;uart.c: 76: TXREG=ch;
  3370  0488  083D               	movf	USARTWriteChar@ch,w
  3371  0489  0099               	movwf	25	;volatile
  3372  048A  0008               	return
  3373  048B                     __end_of_USARTWriteChar:	
  3374                           
  3375                           	psect	text20
  3376  0424                     __ptext20:	
  3377 ;; *************** function _ISR *****************
  3378 ;; Defined at:
  3379 ;;		line 6 in file "isr.c"
  3380 ;; Parameters:    Size  Location     Type
  3381 ;;		None
  3382 ;; Auto vars:     Size  Location     Type
  3383 ;;		None
  3384 ;; Return value:  Size  Location     Type
  3385 ;;                  1    wreg      void 
  3386 ;; Registers used:
  3387 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  3388 ;; Tracked objects:
  3389 ;;		On entry : 0/0
  3390 ;;		On exit  : 0/0
  3391 ;;		Unchanged: 0/0
  3392 ;; Data sizes:     COMMON   BANK0   BANK1
  3393 ;;      Params:         0       0       0
  3394 ;;      Locals:         0       0       0
  3395 ;;      Temps:          5       0       0
  3396 ;;      Totals:         5       0       0
  3397 ;;Total ram usage:        5 bytes
  3398 ;; Hardware stack levels used:    1
  3399 ;; Hardware stack levels required when called:    1
  3400 ;; This function calls:
  3401 ;;		_USARTHandleRxInt
  3402 ;; This function is called by:
  3403 ;;		Interrupt level 1
  3404 ;; This function uses a non-reentrant model
  3405 ;;
  3406                           
  3407                           
  3408                           ;psect for function _ISR
  3409  0424                     _ISR:	
  3410                           
  3411                           ;isr.c: 8: if (PIR1bits.RCIF)
  3412  0424  1E8C               	btfss	12,5	;volatile
  3413  0425  2C2E               	goto	i1l296
  3414                           
  3415                           ;isr.c: 9: {
  3416                           ;isr.c: 10: rxCount++;
  3417  0426  3001               	movlw	1
  3418  0427  00F5               	movwf	??_ISR
  3419  0428  0875               	movf	??_ISR,w
  3420  0429  07B4               	addwf	_rxCount,f
  3421                           
  3422                           ;isr.c: 11: USARTHandleRxInt();
  3423  042A  229C               	fcall	_USARTHandleRxInt
  3424                           
  3425                           ;isr.c: 12: PIR1bits.RCIF = 0;
  3426  042B  1283               	bcf	3,5	;RP0=0, select bank0
  3427  042C  1303               	bcf	3,6	;RP1=0, select bank0
  3428  042D  128C               	bcf	12,5	;volatile
  3429  042E                     i1l296:	
  3430                           ;isr.c: 13: return;
  3431                           
  3432  042E  0879               	movf	??_ISR+4,w
  3433  042F  00FF               	movwf	127
  3434  0430  0878               	movf	??_ISR+3,w
  3435  0431  008A               	movwf	10
  3436  0432  0877               	movf	??_ISR+2,w
  3437  0433  0084               	movwf	4
  3438  0434  0E76               	swapf	(??_ISR+1)^(0+-128),w
  3439  0435  0083               	movwf	3
  3440  0436  0EFE               	swapf	126,f
  3441  0437  0E7E               	swapf	126,w
  3442  0438  0009               	retfie
  3443  0439                     __end_of_ISR:	
  3444                           
  3445                           	psect	intentry
  3446  0004                     __pintentry:	
  3447                           ;incstack = 0
  3448                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  3449                           
  3450  0004                     interrupt_function:	
  3451  007E                     saved_w	set	btemp
  3452  0004  00FE               	movwf	btemp
  3453  0005  0E03               	swapf	3,w
  3454  0006  00F6               	movwf	??_ISR+1
  3455  0007  0804               	movf	4,w
  3456  0008  00F7               	movwf	??_ISR+2
  3457  0009  080A               	movf	10,w
  3458  000A  00F8               	movwf	??_ISR+3
  3459  000B  1283               	bcf	3,5	;RP0=0, select bank0
  3460  000C  1303               	bcf	3,6	;RP1=0, select bank0
  3461  000D  087F               	movf	btemp+1,w
  3462  000E  00F9               	movwf	??_ISR+4
  3463  000F  2C24               	ljmp	_ISR
  3464                           
  3465                           	psect	text21
  3466  029C                     __ptext21:	
  3467 ;; *************** function _USARTHandleRxInt *****************
  3468 ;; Defined at:
  3469 ;;		line 97 in file "uart.c"
  3470 ;; Parameters:    Size  Location     Type
  3471 ;;		None
  3472 ;; Auto vars:     Size  Location     Type
  3473 ;;  data            1    4[COMMON] unsigned char 
  3474 ;; Return value:  Size  Location     Type
  3475 ;;                  1    wreg      void 
  3476 ;; Registers used:
  3477 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3478 ;; Tracked objects:
  3479 ;;		On entry : 0/0
  3480 ;;		On exit  : 0/0
  3481 ;;		Unchanged: 0/0
  3482 ;; Data sizes:     COMMON   BANK0   BANK1
  3483 ;;      Params:         0       0       0
  3484 ;;      Locals:         1       0       0
  3485 ;;      Temps:          4       0       0
  3486 ;;      Totals:         5       0       0
  3487 ;;Total ram usage:        5 bytes
  3488 ;; Hardware stack levels used:    1
  3489 ;; This function calls:
  3490 ;;		Nothing
  3491 ;; This function is called by:
  3492 ;;		_ISR
  3493 ;; This function uses a non-reentrant model
  3494 ;;
  3495                           
  3496                           
  3497                           ;psect for function _USARTHandleRxInt
  3498  029C                     _USARTHandleRxInt:	
  3499                           
  3500                           ;uart.c: 101: char data=RCREG;
  3501                           
  3502                           ;incstack = 0
  3503                           ; Regs used in _USARTHandleRxInt: [wreg-fsr0h+status,2+status,0]
  3504  029C  1283               	bcf	3,5	;RP0=0, select bank0
  3505  029D  1303               	bcf	3,6	;RP1=0, select bank0
  3506  029E  081A               	movf	26,w	;volatile
  3507  029F  00F0               	movwf	??_USARTHandleRxInt
  3508  02A0  0870               	movf	??_USARTHandleRxInt,w
  3509  02A1  00F4               	movwf	USARTHandleRxInt@data
  3510                           
  3511                           ;uart.c: 104: if(((UQEnd==12-1) && UQFront==0) || ((UQEnd+1)==UQFront))
  3512  02A2  300B               	movlw	11
  3513  02A3  067A               	xorwf	_UQEnd,w	;volatile
  3514  02A4  1903               	btfsc	3,2
  3515  02A5  087B               	movf	_UQFront,w	;volatile
  3516  02A6  1903               	btfsc	3,2
  3517  02A7  2ABD               	goto	i1l1756
  3518  02A8  087B               	movf	_UQFront,w	;volatile
  3519  02A9  00F0               	movwf	??_USARTHandleRxInt
  3520  02AA  01F1               	clrf	??_USARTHandleRxInt+1
  3521  02AB  1BF0               	btfsc	??_USARTHandleRxInt,7
  3522  02AC  03F1               	decf	??_USARTHandleRxInt+1,f
  3523  02AD  3001               	movlw	1
  3524  02AE  077A               	addwf	_UQEnd,w	;volatile
  3525  02AF  00F2               	movwf	??_USARTHandleRxInt+2
  3526  02B0  01F3               	clrf	??_USARTHandleRxInt+3
  3527  02B1  1803               	skipnc
  3528  02B2  0AF3               	incf	??_USARTHandleRxInt+3,f
  3529  02B3  1BFA               	btfsc	_UQEnd,7	;volatile
  3530  02B4  03F3               	decf	??_USARTHandleRxInt+3,f
  3531  02B5  0871               	movf	??_USARTHandleRxInt+1,w
  3532  02B6  0673               	xorwf	??_USARTHandleRxInt+3,w
  3533  02B7  1D03               	skipz
  3534  02B8  2ABB               	goto	u78_25
  3535  02B9  0870               	movf	??_USARTHandleRxInt,w
  3536  02BA  0672               	xorwf	??_USARTHandleRxInt+2,w
  3537  02BB                     u78_25:	
  3538  02BB  1D03               	skipz
  3539  02BC  2AC5               	goto	i1l1760
  3540  02BD                     i1l1756:	
  3541                           
  3542                           ;uart.c: 105: {
  3543                           ;uart.c: 107: UQFront++;
  3544  02BD  3001               	movlw	1
  3545  02BE  00F0               	movwf	??_USARTHandleRxInt
  3546  02BF  0870               	movf	??_USARTHandleRxInt,w
  3547  02C0  07FB               	addwf	_UQFront,f	;volatile
  3548                           
  3549                           ;uart.c: 108: if(UQFront==12) UQFront=0;
  3550  02C1  300C               	movlw	12
  3551  02C2  067B               	xorwf	_UQFront,w	;volatile
  3552  02C3  1903               	btfsc	3,2
  3553  02C4  01FB               	clrf	_UQFront	;volatile
  3554  02C5                     i1l1760:	
  3555                           
  3556                           ;uart.c: 109: }
  3557                           ;uart.c: 111: if(UQEnd==12-1)
  3558  02C5  300B               	movlw	11
  3559  02C6  067A               	xorwf	_UQEnd,w	;volatile
  3560  02C7  1D03               	btfss	3,2
  3561  02C8  2ACB               	goto	i1l1764
  3562                           
  3563                           ;uart.c: 112: UQEnd=0;
  3564  02C9  01FA               	clrf	_UQEnd	;volatile
  3565  02CA  2ACF               	goto	i1l1766
  3566  02CB                     i1l1764:	
  3567                           
  3568                           ;uart.c: 113: else
  3569                           ;uart.c: 114: UQEnd++;
  3570  02CB  3001               	movlw	1
  3571  02CC  00F0               	movwf	??_USARTHandleRxInt
  3572  02CD  0870               	movf	??_USARTHandleRxInt,w
  3573  02CE  07FA               	addwf	_UQEnd,f	;volatile
  3574  02CF                     i1l1766:	
  3575                           
  3576                           ;uart.c: 116: URBuff[UQEnd]=data;
  3577  02CF  0874               	movf	USARTHandleRxInt@data,w
  3578  02D0  00F0               	movwf	??_USARTHandleRxInt
  3579  02D1  087A               	movf	_UQEnd,w
  3580  02D2  3E20               	addlw	(low (_URBuff| 0))& (0+255)
  3581  02D3  0084               	movwf	4
  3582  02D4  0870               	movf	??_USARTHandleRxInt,w
  3583  02D5  1383               	bcf	3,7	;select IRP bank0
  3584  02D6  0080               	movwf	0
  3585                           
  3586                           ;uart.c: 118: if(UQFront==-1) UQFront=0;
  3587  02D7  0A7B               	incf	_UQFront,w	;volatile
  3588  02D8  1D03               	btfss	3,2
  3589  02D9  0008               	return
  3590  02DA  01FB               	clrf	_UQFront	;volatile
  3591  02DB  0008               	return
  3592  02DC                     __end_of_USARTHandleRxInt:	
  3593  007E                     btemp	set	126	;btemp
  3594  007E                     wtemp0	set	126


Data Sizes:
    Strings     11
    Constant    0
    Data        0
    BSS         31
    Persistent  2
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      14
    BANK0            80     23      52
    BANK1            32      0       0

Pointer List with Targets:

    runProtocol@commandRecv	PTR struct . size(1) Largest target is 6
		 -> recvCommand(BANK0[6]), 

    sortRxFrame@commandStruct	PTR struct . size(1) Largest target is 6
		 -> recvCommand(BANK0[6]), 

    sortRxFrame@rxBuf	PTR unsigned char  size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    sortRxFrame@command	PTR struct . size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    USARTReadBuffer@buff	PTR unsigned char  size(1) Largest target is 6
		 -> checkCommandRx@buffer(BANK0[6]), 

    USARTWriteLine@str	PTR unsigned char  size(1) Largest target is 11
		 -> STR_1(CODE[11]), 

    USARTWriteString@str	PTR unsigned char  size(2) Largest target is 11
		 -> resetKeypad@buffer(BANK0[6]), ackButton@buffer(BANK0[6]), sendButtonInfo@buffer(BANK0[6]), STR_1(CODE[11]), 

    getKey@keypadState	PTR struct . size(1) Largest target is 2
		 -> keypadState(BANK0[2]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    _ISR->_USARTHandleRxInt

Critical Paths under _main in BANK0

    _main->_checkCommandRx
    _scanKeypad->_getKey
    _controllerInit->_USARTInit
    _checkCommandRx->_runProtocol
    _runProtocol->_sendButtonInfo
    _sendButtonInfo->_USARTWriteString
    _resetKeypad->_USARTWriteString
    _ackButton->_USARTWriteString
    _USARTReadBuffer->_USARTReadData
    _USARTWriteLine->_USARTWriteString
    _USARTWriteString->_USARTWriteChar

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0    4085
                                             22 BANK0      1     1      0
                     _USARTWriteLine
                     _checkCommandRx
                     _controllerInit
                            _rs485Rx
                            _rs485Tx
                         _scanKeypad
 ---------------------------------------------------------------------------------
 (1) _scanKeypad                                           1     1      0     775
                                              3 BANK0      1     1      0
                             _getKey
 ---------------------------------------------------------------------------------
 (2) _getKey                                               3     3      0     775
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _controllerInit                                       0     0      0      75
                          _USARTInit
                           _gpioInit
                         _initKeypad
 ---------------------------------------------------------------------------------
 (2) _initKeypad                                           0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _gpioInit                                             0     0      0       0
                            _rs485Rx
 ---------------------------------------------------------------------------------
 (2) _USARTInit                                            3     1      2      75
                                              0 BANK0      3     1      2
 ---------------------------------------------------------------------------------
 (1) _checkCommandRx                                       7     7      0    2597
                                             15 BANK0      7     7      0
                    _USARTReadBuffer
                        _runProtocol
                        _sortRxFrame
 ---------------------------------------------------------------------------------
 (2) _sortRxFrame                                          6     5      1     285
                                              0 BANK0      6     5      1
 ---------------------------------------------------------------------------------
 (2) _runProtocol                                          3     3      0    2068
                                             12 BANK0      3     3      0
                          _ackButton
                        _resetKeypad
                     _sendButtonInfo
 ---------------------------------------------------------------------------------
 (3) _sendButtonInfo                                       8     8      0     658
                                              4 BANK0      8     8      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (3) _resetKeypad                                          7     7      0     636
                                              4 BANK0      7     7      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (3) _ackButton                                            7     7      0     636
                                              4 BANK0      7     7      0
                   _USARTWriteString
                            _rs485Rx
                            _rs485Tx
 ---------------------------------------------------------------------------------
 (1) _rs485Tx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rs485Rx                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _USARTReadBuffer                                      7     5      2     193
                                              2 BANK0      7     5      2
                      _USARTReadData
 ---------------------------------------------------------------------------------
 (3) _USARTReadData                                        2     2      0      23
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _USARTWriteLine                                       3     2      1     638
                                              4 BANK0      3     2      1
                     _USARTWriteChar
                   _USARTWriteString
 ---------------------------------------------------------------------------------
 (4) _USARTWriteString                                     3     0      3     492
                                              1 BANK0      3     0      3
                     _USARTWriteChar
 ---------------------------------------------------------------------------------
 (5) _USARTWriteChar                                       1     1      0      22
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _ISR                                                  5     5      0      23
                                              5 COMMON     5     5      0
                   _USARTHandleRxInt
 ---------------------------------------------------------------------------------
 (7) _USARTHandleRxInt                                     5     5      0      23
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 7
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _USARTWriteLine
     _USARTWriteChar
     _USARTWriteString
       _USARTWriteChar
   _checkCommandRx
     _USARTReadBuffer
       _USARTReadData
     _runProtocol
       _ackButton
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
       _resetKeypad
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
       _sendButtonInfo
         _USARTWriteString
           _USARTWriteChar
         _rs485Rx
         _rs485Tx
     _sortRxFrame
   _controllerInit
     _USARTInit
     _gpioInit
       _rs485Rx
     _initKeypad
   _rs485Rx
   _rs485Tx
   _scanKeypad
     _getKey

 _ISR (ROOT)
   _USARTHandleRxInt

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      A       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BITBANK0            50      0       0       3        0.0%
BANK0               50     17      34       4       65.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BITBANK1            20      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BANK1               20      0       0       6        0.0%
ABS                  0      0      42       7        0.0%
DATA                 0      0      42       8        0.0%


Microchip Technology PIC Macro Assembler V1.42 build -159332390 
Symbol Table                                                                                   Sun Jun 18 22:14:46 2017

                        pc 0002                _runProtocol 02DC                __CFG_CP$OFF 0000  
                       l21 0076                         l31 012E                         l40 01C6  
                       l24 00B4                         l16 003A                         l33 014C  
                       l42 01E4                         l26 00D2                         l35 016A  
                       l19 0058                         l28 00F0                         l38 01A8  
                       l83 0486                         l76 0244                         fsr 0004  
       USARTInit@baud_rate 003D                        l243 0294                        l257 0313  
                      _GIE 005F               __CFG_CPD$OFF 0000                        _ISR 0424  
                      u715 03B0             ?_USARTReadData 0070                        fsr0 0004  
              _sortRxFrame 0256    __size_of_controllerInit 000A                        indf 0000  
             __CFG_IESO$ON 0000               __CFG_LVP$OFF 0000                       ?_ISR 0070  
                     l2050 0235                       l1404 0379                       l2052 023A  
                     l2054 023F                       l1408 0381                       l2048 0230  
                     l1520 0094                       l1604 0188                       l1386 03F9  
                     l1722 0297                       l1562 010E                       l1732 02F4  
                     l1660 0217                       l1398 0365                       l1742 0308  
                     l1718 028F                       l1662 0219                       l1736 02FE  
                     l1728 02E9                       l1664 021B                       l1648 0202  
                     l1658 0215                       l1692 03AA                       l1668 0220  
                     l1872 044A                       STR_1 03D5                       _BRGH 04C2  
                     u1207 009E                       u1217 00BC                       u1307 01CE  
                     u1227 00DA                       u1317 01EC                       u1237 00F8  
                     u1157 0447                       u1247 0118                       u1167 0026  
                     u1257 0136                       u1177 0042                       u1267 0154  
                     u1187 0060                       u1277 0172                       u1197 007E  
                     u1287 0192                       u1297 01B0               __CFG_WRT$OFF 0000  
   __end_of_USARTWriteChar 048B            ?_checkCommandRx 0070     __end_of_USARTWriteLine 0424  
                     _main 0439                       btemp 007E          USARTReadData@data 003E  
                     start 0010              __CFG_MCLRE$ON 0000                      ??_ISR 0075  
        resetKeypad@buffer 0042          ?_USARTHandleRxInt 0070                      ?_main 0070  
       ??_USARTHandleRxInt 0070              __CFG_WDTE$OFF 0000           USARTWriteChar@ch 003D  
                    i1l296 042E                      _RCREG 001A             _sendButtonInfo 0383  
                    _SPBRG 0099                      _PORTB 0006            __end_of_rs485Rx 0493  
                    _TRISB 0086            __end_of_rs485Tx 048F                      u78_25 02BB  
                    _TXREG 0019                      _UQEnd 007A           ?_USARTReadBuffer 003F  
           __CFG_FCMEN$OFF 0000            ackButton@buffer 0042             __CFG_BOREN$OFF 0000  
                    pclath 000A         __size_of_USARTInit 004C            ?_USARTWriteChar 0070  
          ?_USARTWriteLine 0041                      status 0003                      wtemp0 007E  
          __initialization 0011               __end_of_main 044D            ??_USARTReadData 003D  
   __end_of_sendButtonInfo 03A5                     ??_main 0053         USARTReadBuffer@len 003F  
                   _ANSELH 0189                     i1l1760 02C5                     i1l1764 02CB  
                   i1l1756 02BD                     i1l1766 02CF               ?_resetKeypad 0070  
                   _URBuff 0020             __CFG_PWRTE$OFF 0000          USARTWriteLine@len 0041  
        USARTWriteLine@str 0043           __end_of_gpioInit 047B                     _getKey 0019  
 __end_of_USARTWriteString 040F                  ??_rs485Rx 003D                  ??_rs485Tx 003D  
        __end_of_USARTInit 0256            ?_sendButtonInfo 0070             _controllerInit 045F  
                   saved_w 007E    __end_of__initialization 0017         __size_of_ackButton 0026  
           __pcstackCOMMON 0070               ?_runProtocol 0070     __end_of_controllerInit 0469  
             ?_sortRxFrame 003D             _OPTION_REGbits 0081           ??_checkCommandRx 004C  
            _buttonPressed 007D                 __pbssBANK0 0020                 __pnvCOMMON 007A  
               __pmaintext 0439                    ?_getKey 0070                 __pintentry 0004  
      USARTReadBuffer@buff 0043            ?_controllerInit 0070          __end_of_ackButton 0360  
     sendButtonInfo@buffer 0042       sendButtonInfo@button 0048           ??_USARTWriteChar 003D  
         ??_USARTWriteLine 0042         USARTWriteInt@F1616 002C  __size_of_USARTHandleRxInt 0040  
               __stringtab 03C5                  ?_gpioInit 0070                    _UQFront 007B  
 sortRxFrame@commandStruct 003D       __size_of_resetKeypad 0026        _currentKeypadStatus 0031  
        getKey@keypadState 003F                 _initKeypad 0469            __size_of_getKey 01F1  
               _currentKey 007C                    _rs485Rx 048F                    _rs485Tx 048B  
               _scanKeypad 044D                    __ptext1 044D                    __ptext2 0019  
                  __ptext3 045F                    __ptext4 0469                    __ptext5 0472  
                  __ptext6 020A                    __ptext7 03E0                    __ptext8 0256  
                  __ptext9 02DC               __size_of_ISR 0015                    _lastKey 0033  
                  _rxCount 0034                    clrloop0 047C       end_of_initialization 0017  
               ??_gpioInit 003D   __size_of_USARTReadBuffer 0020                  _RCSTAbits 0018  
         ??_sendButtonInfo 0041          ?_USARTWriteString 003E       __size_of_runProtocol 0038  
                _PORTCbits 0007      __end_of_USARTReadData 0383         ??_USARTWriteString 0041  
                _USARTInit 020A                  _TRISCbits 0087       __size_of_sortRxFrame 0046  
                _TXSTAbits 0098                ?_initKeypad 0070           USARTReadBuffer@i 0044  
           __end_of_getKey 020A                ?_scanKeypad 0070        start_initialization 0011  
               ?_USARTInit 003D                __end_of_ISR 0439           _USARTHandleRxInt 029C  
   runProtocol@commandRecv 004B   __CFG_FOSC$INTRC_NOCLKOUT 0000         sortRxFrame@command 0042  
        ??_USARTReadBuffer 0041           ??_controllerInit 0040                   ??_getKey 003D  
              __pbssCOMMON 007C                  ___latbits 0000              __pcstackBANK0 003D  
                _ackButton 033A        __size_of_initKeypad 0009        __size_of_scanKeypad 0012  
        __size_of_gpioInit 0009                   ?_rs485Rx 0070                   ?_rs485Tx 0070  
                __pstrings 03C5                ??_USARTInit 003F                 ?_ackButton 0070  
            ??_resetKeypad 0041          interrupt_function 0004                  clear_ram0 047B  
                 _PIE1bits 008C    __size_of_checkCommandRx 0019                   _PIR1bits 000C  
              __stringbase 03D4  __size_of_USARTWriteString 0016       checkCommandRx@buffer 004D  
  __size_of_USARTWriteChar 0008    __size_of_USARTWriteLine 0015               ??_initKeypad 003D  
      __end_of_resetKeypad 033A              ??_runProtocol 0049   __end_of_USARTHandleRxInt 02DC  
             ??_scanKeypad 0040           __size_of_rs485Rx 0004           __size_of_rs485Tx 0004  
       __end_of__stringtab 03D5              ??_sortRxFrame 003E                ??_ackButton 0041  
                 __ptext10 0383                   __ptext11 0314                   __ptext20 0424  
                 __ptext12 033A                   __ptext21 029C                   __ptext13 048B  
                 __ptext14 048F                   __ptext15 03A5                   __ptext16 0360  
                 __ptext17 040F                   __ptext18 03F9                   __ptext19 0483  
              _keypadState 003B          __CFG_BOR4V$BOR40V 0000         __end_of_initKeypad 0472  
          _USARTReadBuffer 03A5                   _gpioInit 0472              __size_of_main 0014  
              _recvCommand 0035         __end_of_scanKeypad 045F     __size_of_USARTReadData 0023  
      __end_of_runProtocol 0314                 _INTCONbits 000B    __size_of_sendButtonInfo 0022  
         sortRxFrame@rxBuf 0040        __end_of_sortRxFrame 029C                   intlevel1 0000  
              _resetKeypad 0314             _checkCommandRx 03E0                  stringcode 03CF  
      USARTWriteString@len 0040        USARTWriteString@str 003E              _USARTReadData 0360  
  __end_of_USARTReadBuffer 03C5       USARTHandleRxInt@data 0074                   stringdir 03CF  
                 stringtab 03C5         runProtocol@command 004A             sortRxFrame@err 0041  
         _USARTWriteString 03F9     __end_of_checkCommandRx 03F9             _USARTWriteChar 0483  
           _USARTWriteLine 040F  
